#!/bin/sh

#===============================================================================
# MIT License
# Copyright (C) 2018 Z.Riemann
#
#-------------------------------------------------------------------------------
# auto configure source code tree rule:
#
#-------------------------------------------------------------------------------
# options
function print_usage(){
cat << !USAGE_END!
zmake v1.0.0

Options:
  -h, --help                       Display this information
  --license                        Display the MIT License
Auto make rules:
  --show-path-rule                 Display sample auto make tree rule
  --show-code-rule                 Display embedded codes rule
  --with-code-rule                 Auto generate Makefile by auto-code-rule
  --with-path-rule
Adapter no rules:
  --libs-path=[path1:path2:...]    <Reserved>
                                   librarys path
                                   auto build path name: lib<name>
                                   auto exclude path: test[s]
  --excl-libs-path=[libpath/exclpath:] <Reserved>
                                   exclude path in librarys path
zmake tags:
  @zmake.install [off|ON]          Default ON, target needs install
  @zmake.all [off|ON]              Default ON, target build in all
  @zmake.link <-l...>              Librarys needs to link
  @zmake.app <name>                Attach file to target by application name, -o name
  @zmake.lib <name>                Attach file to target by library name, -o libname.so.version 
Outputs:
  ./bin                            binary files directory
    |- obj_debug                   debug version objects
    |- debug                       debug version libs or apps
    |- obj_release                 release version objects
    |- release                     release version libs or apps
    |- obj_arm ...                 base arm linux
    ...
  execute programs as follow:
  $ bin/release/<app-name> [--options]
  For bug reporting instructions, please see:
  <https://github.com/ZRiemann/zmake.git>.
!USAGE_END!
}
# print_usage

# auto configure source code tree rule
function print_path_rule(){
cat << !CFG_RULE_END!
1. library top path: lib<lib-name>
2. application top path: app<app-name>
!CFG_RULE_END!
}
# print_path_rule

# auto configure embedded scripts code rule
function print_code_rule(){
cat << !CODE_RULE_END!
1. library codes
   output: lib<name1>.so<.1.0.0> lib<name2>.so<.1.0.0>
   /**
    * @zmake.lib <lib-name1>:<lib-name2>:...
    * @zmake.ignote
    */

    @zmake.lib    ; module of lib-name*
    @zmake.ignore ; do not compile this file

2. application codes
   output: <app-name1> <app-name2> ...
   /**
    * @zmake.app.module <app-name1>:<app-name2>:...
    * @zmake.app.main <app-name>
    * @zmake.app.dependent <lib1>:<lib2>
    */

    @zmake.app.module    ; module of app-name*
    @zmake.app.main      ; app-name main entry file
    @zmake.app.dependent ; list dependentlibrarys,
                         ; followed by @zmake.app.main
!CODE_RULE_END!
}
# print_code_rule

# pint the configure file license
function print_license(){
cat << !LICENSE_END!
MIT License

Copyright (c) 2018 Z.Riemann
https://github.com/ZRiemann/zmake.git

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
!LICENSE_END!
}
# print_license

# linux shell color control
# cl_: color_
# r: red; g: green; y: yellow; p: purple
# c: close color control
# echo -e "${cl_r}echo red color${cl_off}"
cl_r="\\033[31m"
cl_g="\\033[32m"
cl_y="\\033[33m"
cl_b="\\033[34m"
cl_p="\\033[35m"
cl_c="\\033[0m"

# options
# 0-code-rule; 1-path-rule 3-no-rule
rule_code="rule-code"
rule_path="rule-path"
rule_null="rule-null"
rule_mode=$rule_code

# get_options

#===============================================================================
# Generate Makefile

# backup the exist dir or files, <name> => <name>.backup
function backup(){
    echo -e "${cl_b}Start backup $*${cl_c}"
    echo -e "${cl_r}backup files task delay...${cl_c}"
}
# backup Makefile makefile bin

# just remove Makefile makefile bin
echo -e "${cl_y}WARNNING: Makefile makefile bin will be deleted...${cl_c}"
rm -fr Makefile makefile makefile_* makefile_all src/auto_version.h bin

# prepare environment before configure
if [ -f build/preconfigure ]; then
    echo "${cl_b}Prepare environment before configure${cl_c}"
    . build/preconfigure
fi

# preconfigure
CC=gcc
CFLAG=-I.
LIB_SONAME=1.0.0
BUILDS=release
BIN_ROOT=bin


# scan source codes
#target_count=0
dependent_file=""
obj_name=""
obj_dir="bin/obj_debug"
# [lib|app] : <objs> <depedents>
makefile_obj="makefile_obj"
# all : <libs> <apps>
makefile_all="makefile_all"
# is lib or app
is_lib=0
# zmake tag prefix
zmake="@zmake."
# zmake tag list
zmake_tag=""
# zmake type: cc/lib/app
zmake_type=""
# zmake value;
zmake_value=""
# current cc
zmake_cc=$CC
zmake_cflag=$CFLAG
# buffered all targets
zmake_target=""
# obj sub directorys
zmake_subdir=""

zmake_install="on"
zmake_all="on"
zmake_link=""
zmake_set_install=0
zmake_set_all=0
zmake_set_link=0

# install directorys
zmake_install_bin="/usr/local/bin"
zmake_install_lib="/usr/local/lib"
zmake_install_inc="/usr/local/include"

# version configure
# major.minor.revision
zversion="1.0.0"
zver_major=${zversion%%.*}
zver_minor=${zversion#*.}
zver_minor=${zver_minor%.*}
zver_revision=${zversion##*.}
echo "ver: ${zver_major}.${zver_minor}.${zver_revision}"
# base => alpha => beta => RC => relaease
zalbt="alpha"
# build date
zdate=$(date '+20%y%m%d')
echo $zdate
# git version
zgit_rev=$(which git)
if [ -z ${zgit_rev##*/git} ]; then
    zgit_rev=$(git rev-parse HEAD)
else
    zgit_rev="nil"
fi
echo $zgit_rev

# generate auto_version.h
cat << !AUTO_VER! > auto_version.h
#define VER_AUTO 1
const int major_version=${zver_major};
const int minor_version=${zver_minor};
const int revision_version=${zver_revision};
const char *version= "${zversion}.${zalbt}";
const char *build_date = "${zdate}";
const char *git_rev = "${zgit_rev}";
!AUTO_VER!

# generate micro definitions
cat << !MAKE_ALL! > $makefile_all
ifeq (\$(BUILDS), debug)
	OPTM=-g
else ifeq (\$(BUILDS), release)
	OPTM=-O3
else
    BUILDS=release
	OPTM=-O3
endif

CC=${CC}
CFLAG=${CFLAG}
BIN_ROOT=${BIN_ROOT}

BUILDS_DIR=\$(BIN_ROOT)/\$(BUILDS)
OBJ_DIR=\$(BIN_ROOT)/obj_\$(BUILDS)

# installation directory
INST_BIN=${zmake_install_bin}
INST_LIB=${zmake_install_lib}
INST_INC=${zmake_install_inc}

# version control
VERSION=${zversion}
VER_MAJOR=${zver_major}
VER_MINOR=${zver_minor}
VER_REVISION=${zver_revision}

# all : prepare targets...
!MAKE_ALL!

printf "all : prepare" >> $makefile_all
# prepare header files
header_file=$(find . -type f -a \( -name \*.h -o -name \*.hpp \))
#for dep_match in ${header_file}; do
#    echo "match: $dep_match "
#done
#echo "header files: ${header_file}"

function parse_zmake_target(){
    # parse target1:target2:...
    # append target to all
    while :; do
        # zmake_tgt = target1
        zmake_tgt=${zmake_value%%:*}
        # zmake_value = target2:...
        zmake_value=${zmake_value#*:}

        # test new target
        [[ "$zmake_target" =~ "$zmake_tgt" ]] || {
            zmake_target+=" $zmake_tgt"
        }

        # target : source.o
        [ -f "makefile_${zmake_tgt}" ] || {
            # tag app or lib, for what type to build
            echo "# ${zmake_type}" > makefile_${zmake_tgt}
            # target :
            if [ "lib" = "${zmake_type}" ]; then
                printf "\$(BUILDS_DIR)/lib${zmake_tgt}.so.\$(VERSION) :" >> makefile_${zmake_tgt}
            else
                printf "\$(BUILDS_DIR)/${zmake_tgt} :" >> makefile_${zmake_tgt}
            fi
        }

        if [ 1 -eq ${zmake_set_install} ]; then
            echo "Set install"
            if [ -f "makefile_${zmake_tgt}_flags" ]; then
                if [ "0" != "$(grep install= makefile_${zmake_tgt}_flags)" ]; then
                    # append
                    echo "install=${zmake_install}" >> makefile_${zmake_tgt}_flags
                else
                    # error
                    echo -e "${cl_r}Install flag already be set.${cl_c}"
                fi
            else
                # create
                echo "install=${zmake_install}" >> makefile_${zmake_tgt}_flags
            fi
        fi

        if [ 1 -eq ${zmake_set_all} ]; then
            echo "Set all"
            if [ -f "makefile_${zmake_tgt}_flags" ]; then
                if [ "0" != "$(grep all= makefile_${zmake_tgt}_flags)" ]; then
                    # append
                    echo "all=${zmake_all}" >> makefile_${zmake_tgt}_flags
                else
                    # error
                    echo -e "${cl_r}All flag already be set.${cl_c}"
                fi
            else
                # create
                echo "all=${zmake_all}" >> makefile_${zmake_tgt}_flags
            fi
        fi

        if [ 1 -eq ${zmake_set_link} ]; then
            echo "Set link"
            if [ -f "makefile_${zmake_tgt}_flags" ]; then
                if [ "0" != "$(grep link= makefile_${zmake_tgt}_flags)" ]; then
                    # append
                    echo "link=${zmake_link}" >> makefile_${zmake_tgt}_flags
                else
                    # error
                    echo -e "${cl_r}Link flag already be set.${cl_c}"
                fi
            else
                # create
                echo "link=${zmake_link}" >> makefile_${zmake_tgt}_flags
            fi
        fi
        # target : ... obj.o
        printf " ${obj_name}" >> makefile_${zmake_tgt}
        # test end of item: zmake_tgt == zmake_value == last target
        [ "$zmake_tgt" = "$zmake_value" ] && break
    done
}


function parse_zmake_type(){
    echo -e "${cl_p}parse $path_name ${cl_c}"

    zmake_set_install=0
    zmake_set_all=0
    zmake_set_link=0

    while :; do
        zmake_tag=${zmake_tag#*.}
        zmake_type=${zmake_tag%% *}

        [ "$zmake_tag" = "$zmake_type" ] && break

        zmake_tag=${zmake_tag#* }
        zmake_value=${zmake_tag%%;*}
        echo "${zmake_type} : ${zmake_value}"

        case "$zmake_type" in
            install)
                zmake_set_install=1
                zmake_install=${zmake_value};;
            all)
                zmake_set_all=1
                zmake_all=${zmake_value};;
            link)
                zmake_set_link=1
                zmake_link=${zmake_value};;
            lib | app)
                # source.o : source.c depedents.h
                obj_name="\$(OBJ_DIR)/${path_name%.*}.o"

                # test new subdir
                obj_path=${obj_name%/*}
                [[ "$zmake_subdir" =~ "$obj_path" ]] || {
                    # append new sub ddir
                    zmake_subdir+=" $obj_path"
                }

                # find out dependents header files
                dependent_file=""
                for dep_header in $(grep "#include " $path_name); do
                    [ "#include" = "${dep_header}" ] && continue
                    # remove < , > or "
                    dep_header=${dep_header#*<}
                    dep_header=${dep_header%>*}
                    dep_header=${dep_header#*\"}
                    dep_header=${dep_header%\"*}
                    for dep_match in ${header_file}; do
                        [[ "${dep_match}" =~ "$dep_header" ]] && dependent_file+=" ${dep_match}"
                    done
                done

                echo >> $makefile_obj
                echo "$obj_name : ${path_name}$dependent_file" >> $makefile_obj
                if [ "app" = "$zmake_type" ]; then
                    printf "\t\$(CC) \$(OPTM) \$(CFLAG) -c -o \$@ $path_name\n" >> $makefile_obj
                else
                    printf "\t\$(CC) \$(OPTM) \$(CFLAG) -fPIC -c -o \$@ $path_name\n" >> $makefile_obj
                fi
                # all : target ...
                # target : obj_name ...
                parse_zmake_target
                ;;
            *) echo -e "${cl_r}UNRECOGNIZED TYPE: ${zmake_type}${cl_c}";;
        esac
    done
}

if [ "$rule_mode" = "$rule_code" ]; then
    for path_name in $(find . -type f -a \( -name \*.c -o -name \*.C -o \
                            -name \*.cc -o -name \*.cpp -o -name \*.CPP \
                            -o -name \*.c++ -o -name \*.cp -o -name \*.cxx \)); do
        # remove ./ prefix
        path_name=${path_name#*./}

        # parse code rule ...
        zmake_tag=$(grep $zmake $path_name)

        if [ -n "$zmake_tag" ]; then
            parse_zmake_type
        else
            echo -e "${cl_y}$path_name has no @zmake.* tags, we not parse it.${cl_c}"
            continue
        fi
    done
fi

# merge makefile_all makefile_<targets> and makefile_obj to Makefile
# makefile_all => Makefile
mv $makefile_all Makefile

#echo "$zmake_target" >> Makefile
for target in $zmake_target; do
    if [ -f "makefile_${target}_flags" ]; then
        if [ "0" = "$(grep -c all=off makefile_${target}_flags)" ]; then
            printf " ${target}" >> Makefile
            echo -e "${cl_g}${target} default build.${cl_c}"
        else
            echo -e "${cl_y}${target} not default build.${cl_c}"
        fi
    else
        printf " ${target}" >> Makefile
    fi
done
echo >> Makefile

# prepare :
# @mkdir -p dirs...
echo >> Makefile
echo "prepare:" >> Makefile
printf "\t@mkdir -p \$(BUILDS_DIR) \$(OBJ_DIR) ${zmake_subdir}\n\n" >> Makefile

# target1 : obj1 obj2 ...
for target in $zmake_target; do
    # generate build rule
    echo >> makefile_${target}
    if [ 1 -eq $(grep -c "# lib" makefile_${target}) ]; then
        output="\$(BUILDS_DIR)/lib${target}.so"
        # generate target : output
        echo >> Makefile
        echo "${target} : ${output}.\$(VERSION)" >> Makefile
        # build library
        printf "\t\$(CC) \$(OPTM) -shared -Wl,-soname,lib${target}.so.\$(VER_MAJOR) -o \$@ \$^\n" >> makefile_${target}
        printf "\t@rm -f ${output}\n" >> makefile_${target}
        printf "\t@ln -s lib${target}.so.\$(VERSION) ${output}.\$(VER_MAJOR) >/dev/null 2>&1\n" >> makefile_${target}
        printf "\t@ln -s lib${target}.so.\$(VER_MAJOR) ${output} >/dev/null 2>&1\n" >> makefile_${target}
        echo "ifeq (\$(BUILDS),release)" >> makefile_${target}
        printf "\t@strip \$@\n" >> makefile_${target}
        echo "endif" >> makefile_${target}

        # install/uninstall
        zmake_set_install=0
        if [ -f "makefile_${target}_flags" ]; then
            if [ "0" = "$(grep -c install=off makefile_${target}_flags)" ]; then
                zmake_set_install=1
            fi
        else
            zmake_set_install=1
        fi

        if [ "1" = "$zmake_set_install" ]; then
            echo >> makefile_${target}
            echo "install_${target} :" >> makefile_${target}
            printf "\t@echo install ${target}..." >> makefile_${target}
            echo >> makefile_${target}
            echo "uninstall_${target} :" >> makefile_${target}
            printf "\t@echo uninstall ${target}..." >> makefile_${target}
            echo >> makefile_${target}
        fi
    else
        # generate target : output
        output="\$(BUILDS_DIR)/${target}"
        echo >> Makefile
        echo "${target} : ${output}" >> Makefile

        #build application
        zmake_link=""
        if [ -f "makefile_${target}_flags" ]; then
            if [ "1" = "$(grep -c link= makefile_${target}_flags)" ]; then
                zmake_link=$(grep link= makefile_${target}_flags)
                zmake_link=${zmake_link#*link=}
            fi
        fi

        printf "\t\$(CC) \$(OPTM) -Wl,-rpath=\$(shell pwd)/\$(BUILDS_DIR) -L\$(shell pwd)/\$(BUILDS_DIR) -o \$@ \$^ ${zmake_link}" >> makefile_${target}
        # install/uninstall
        zmake_set_install=0
        if [ -f "makefile_${target}_flags" ]; then
            if [ "0" = "$(grep -c install=off makefile_${target}_flags)" ]; then
                zmake_set_install=1
            fi
        else
            zmake_set_install=1
        fi

        if [ "1" = "$zmake_set_install" ]; then
            echo >> makefile_${target}
            echo "install_${target} :" >> makefile_${target}
            printf "\t@echo install ${target}..." >> makefile_${target}
            echo >> makefile_${target}
            echo "uninstall_${target} :" >> makefile_${target}
            printf "\t@echo uninstall ${target}..." >> makefile_${target}
            echo >> makefile_${target}
        fi
    fi
    # append makefile_<target> to Makefile
    cat makefile_${target} >> Makefile
    echo >> Makefile
done

# obj1 : src1 src2 ... depedents ...
cat $makefile_obj >> Makefile

# generate make install/uninstall/clean
echo >> Makefile
echo "# install librarys and applications" >> Makefile
echo "install :" >> Makefile
printf "\t@echo install libs and apps\n" >> Makefile
echo >> Makefile
echo "# uninstall librarys and applications" >> Makefile
echo "uninstall :" >> Makefile
printf "\t@echo uninstall libs and apps\n" >> Makefile
echo >> Makefile
echo "# clean up" >> Makefile
echo "clean :" >> Makefile
printf "\t@rm -fr \$(BIN_ROOT) auto_version.h" >> Makefile


# remove temporary file
#rm -f makefile_*
