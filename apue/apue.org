* 进程环境
  - 引言
  - main 
    内核调用exec
  - 进程终止
    1. return(0)
    2. exit(0)
       执行清理后进入内核；
    3. _exit(0),_Exit(0)
       立即进入内核；(子进程调用)
    4. 最后一个线程从启动线程返回
    5. 最后一个线程调用pthread_exit
    6. abort()
    7. signal()
    8. 最后一个线程对取消请求的响应
    9. atexit(void (*func)(void));
       
  - 环境表
    extern char **environ;
    getenv()/putenv()
  - 存储空间布局
    + 正文：共享，只读
    + 初始化数据段：
    + 未初始化数据段：
    + 堆
    + 栈
      $ size /usr/bin/cc
  - 共享库
    $ gcc -static hello.c ; 阻止gcc使用共享库，文件大
  - 空间分配
    malloc()/calloc()/realloc()
    libmalloc/vmalloc/quick_fit/jemalloc/TCMalloc/alloca
  - 环境变量
    #include <stdlib.h>
    int putenv();
    int setenv();
    int unsetenv();
  - get/setrlimit();
* 进程控制
  - 进程标识
    uint pid;
    0 swapper 调度进程
    1 init 自举后启动一个UNIX系统
    2 page daemon 页守护进程
    
    #include <unistd.h>
    pid_t getpid();
    pid_t getppid();
    uid_t getuid();
    uid_t geteuid();
    gid_t getgid();
    gid_t getegid();
  - fork 
    Copy-On-Write(COW)
    fork()/vfork()保持子进程先运行exec/_exit
    fork()两次，不希望父进程管理子进程
  - exit
    
  - wait()/waitpid()/waitid()/wait3()/wait4()
    -1 
    >0
    =0
    <-1

  - exec*()
    
