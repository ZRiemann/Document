# UNIX环境高级编程

3. 文件IO
3.1 引言
 unbufferedI/O: open()/read()/write()/lseek()/close()
 不是ISO C 部分，是POSIX.1部分
 dup()/fcntl()/sync()/fsync()/ioctl()

3.2 文件描述符
 内核：一切文件都通过文件描述符引用，文件描述符为一个非负整数；
 <unistd.h> STDIN/OUT/ERR_FILENO
 范围：0~OPEN_MAX-1

3.3 open/openat
 #include<fcntl.h>
 int open(const char* path, int oflag, .../*mode_t mode*/);
 int openat(int fd, const char* path, int oflag, .../*mode_t mode*/);
 
3.4 create
 #include<fcntl.h>
 int create(const char* path, mode_t mode); == open(paht, O_WRONLY | OCREATE | O_TRUNC, mode);
 被open取代

3.5 close
 #include <unistd.h>
 int close(int fd);
 
3.6 lseek
 #include <unistd.h>
 off_t lseek(int fd, off_t offset, int whence);
 param whence SEEK_SET/SEEK_CUR/SEEK_END

3.7 read
 #include <unistd.h>
 ssize_t read(int fd, void* buf, size_t nbyes);
 return 0:eof -1:error
 .普通文件30字节，要求读100，第一次read返回30，第二次read返回0(EOF)
 .从终端设备读，默认一次读一行，第18章介绍如何改变这一点
 .从网络读，读取缓存中的数据量，可能小于要求读的数据量
 .从管道或FIFO读，read只返回实际可用字节数
 .从面向记录（如磁带），一次返回一个记录
 .当一个信号造成中断，而已经读取了部分数据情况，10.5节进一步讨论；

3.8 write
 #include <unistd.h>
 ssize_t write(int fd, const void* buf, size_t nbytes);
 return -1:error n: n bytes has write.

3.9 I/O效率
 c3_io_efficiency.c
 .利用shell的IO重定向功能，重定向标准输入输出
 .缓冲区BUFFSIZE值4096，大多数文件系统为改善性能都采用某种预读(read ahead)技术，缓冲区大于32字节后读取时长相差不大；
 .高速缓存技术，会缓存进阶的访问文件，后续访问被高速缓存的文件将无需磁盘IO;

3.10 文件共享
 UNIX系统支持不通进程间共享打开的文件，dup();
 内核使用三种数据结构表示打开的文件，他们之间的关系决定了文件共享方面一个进程对另一个进程可能产生的影响；
  1，每个进程在进程表中都有一个记录项，记录项中包含一张打开{文件描述符表}，包含a，文件描述符标志；b，指向一个<文件表项>指针；
  2，内核为所有打开文件维持一张文件表。<文件表项>包含：a，文件状态；b，当前偏移量；c，[v节点表项]指针
  3，每个打开的文件（或设备）都有一个v节点。[v节点表项]包含：a，文件类；b，操作函数指针；c，i节点（索引节点：所有者、长度、磁盘位置）
  进程1{文件描述符表}      内核<文件表项>       [v节点表项]
  fd 文件指针				     v节点	      i节点
  0  nfptr-------------->文件状态	 /-->v节点信息
  1  fptr-----|		 当前偏移量	 |   v_data--------->i节点信息
  2	      |		 v节点指针--------|		     当前文件长度
  ...         \--------->文件状态	 |<------------------i_vnode
			 当前偏移量	 \<-----\
			 v节点指针-------->...	|
						|
  进程2{文件描述符}（共享打开进程1中同一个文件）	|
  ... xfptr------------->文件状态		|
			 当前文件偏移量		|
			 v节点指针---------------/
3.11 原子操作
3.11.1 追加到一个文件
 O_APPEND 提供原子操作追加到文件尾部；
 pread/pwrite原子性的定位并执行IO；
  #include <unistd.h>
  ssize_t pread(int fd, void* buf, size_t nbytes, off_t offset); -1:error 0:eof >0:nbytes read
  ssize_t pwrite(int fd, const void* buf, size_t nbytes, off_t offset);-1:error >0:nbytes write
  .pread/pwrite无法中断其定位和读/写操作；即原子操作
  .不更新当前文件偏移量；
 创建一个文件O_CREAT|O_EXCL；原子打开一个文件

3.12 dup/dup2 复制文件描述符
 #include <unistd.h>
 int dup(int fd); -1:error
 int dup(int fd, int fd2); -1:error
  duplicate fd to fd2, if(fd2 open){close fd2;dup fd to fd2};
  fd2 FD_CLOSEXEC文件描述符标志就被清除
  进程表		文件表
  fd  ptr
  012 
  3   3ptr------------->文件状态标志 
  4   4ptr--------/     当前偏移量
			v节点指针------->....
  4 = dup(3); == fcntl(fd, F_DUPFD, 0);
  4 = dup2(3,4); ~= close(fd2); fcntl(fd, F_DUPFD, fd2);
      atomic           not atomic  and errno diff
  
3.13 sync/fsync/fdatasync()
 #include <unistd.h>
 void sync(void); 所有修改过的块缓冲区排入写队列后返回，不等待实际写磁盘操作结束
 int fsync(int fd); 0:ok -1:error 只对文件fd起作用，并等待写磁盘操作结束才返回，更新文件属性（数据库操作需求）
 int fdatasync(int fd); 0:ok -1:error 类似fsync但只影响数据部分，不同步更新文件属性；
 delaywrite: write(fd...)->buffer->queue->disk

3.14 fcntl() 改变已经打开的文件属性
 #include <fcntl.h>
 int fcntl(int fd, int cmd, .../*int arg or pointer*/); -1:error
  .F_DUPFD/DUPFD_CLOEXEC 复制一个描述符（F_DUPFD复制的文件描述符没有FD_CLOEXEC）
  .F_GETFD/SETFD 获取/设置fd标志
  .F_GTTFL/SETFL fd 状态标志
    O_REONLY/WRONLY/REWR/EXEC/SEARCH/APPEND/NONBLOCK/SYNC/DSYNC/RSYNC/FSYNC/ASYNC
    O_ACCMODE 驱动访问方式，在比较
    F_SETFL:O_APPEND/NONBLOCK/SYNC/DSYANC/RSYNC/FSYNC/ASYNC
  .F_GETOWN/SETOWN 异步IO所有权,获取当前接收SIGIO/URG信号的进程ID或组ID @14.5.2
  .F_GETLK/SETLK/SETLKW 记录锁  @14.3
  
  c3_fcntl.c sample
  c3_fcntl_set_fl.c

3.15 ioctl()
 #include <unistd.h>
 #include <sys/ioctl.h>
 int ioctl(int fd, int request, ...); -1:error
  类别	       常量名  头文件	        ioctl数
  盘标号       DIOxxx  <sys/disklabel.h> 4
  文件IO       FIOxxx  <sys/filio.h>	14
  磁带IO       MTIOxxx <sys/mtio.h>	11
  套接字IO     SIOxxx  <sys/sockio.h>	73
  终端IO       TIOxxx  <sys/ttycom.h>	43

3.16 /dev/fd
 fd = open("/def/fd/0",mode); == fd = dup(0);
 主要有shell 使用，
 $filter file2 | cat file1 - file3 | lpr
 cat 读file1，接着读其标准输入（也就是filter file2命令的输出），然后读file3
 $filter file2 | cat file1 /dev/fd/0 file3 | lpr


4. 文件和目录
4.1 引言 stat结构 描述文件属性
4.2 stat/fstat/fstatat/lstat
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
 int stat(const char* pathname, struct stat* buf);
 int fstat(int fd, struct stat* buf);
 int lstat(const char* path, struct stat* buf);
 int fstatat(int fd, const char* path, status stat* buf, int flag);
 struct stat{
  mode_t st_mode; // file type & mode permissions 文件类型
  ino_t st_ino; // i-node number serial number
  dev_t st_dev; // device number file system
  dev_t st_rdev; // device number for special files
  nlint_t st_nlint; // number of links
  uid_t st_uid; // user ID of owner
  gid_t st_gid; // group ID of owner
  off_t st_size; // size in bytes, for regular files
  struct timespec st_atime; // time of last access
  struct timespec st_mtime; // time of last modification
  strict timespec st_ctime; // time of last file status change
  blksize_t st_blksize; // best I/O block size
  blkcnt_t st_blocks; // number of dist blocks allocated
 }; // general define
 struct timespec{
  time_t tv_sec;
  long tv_nsec;
 };
 $ls -l // 就是调用stat实现的

4.3 文件类型 = stat.st_mode;
 普通文件(regular file)： S_ISREG(stat.st_mode) 79.77%
 目录文件(directory file)： S_ISDIR() 11.93%
 块特殊文件(block special file)：提供对设备（如磁盘）带缓冲的访问；S_ISBLK()  0.01%
 字符特殊文件(character special file)：提供对设备不带缓冲的访问；S_ISCHR() 0.03%
 FIFO(named pipe)：用于进程间通信;S_ISFIFO() 0.00%
 套接字(socket)：S_ISSOCK() 0.01%
 符号连接（symbolic link）：指向另一个文件 S_ISSOCK() @4.17 8.25%

 IPC对象说明为文件，S_TYPEISMQ/SEM/SHM(stat*)消息队列/信号量/共享存储对象 @15
 c4_3stat.c
 
4.4 设置用户ID和设置组ID
 实际 用户ID 组ID	#我们是谁
 有效 用户ID 组ID	#文件访问权限
 附属       组ID	
 保存 用户ID 组ID	#由exec函数保存
 S_ISUID/ISGID(stat.st_mode);

4.5 文件访问权限 access permission
 #include <sys/stat.h>
 S_IRUSR	 用户读
 S_IWUSR	 用户写
 S_IXUSR	 用户执行
 S_IRGRP	 组读
 S_IWGRP
 S_IXGRP
 S_IROTH	其他读
 S_IWOTH
 S_IXOTH

 chmod(1)
 进程每次打开、创建、删除文件时，内核就进行文件权限测试；
 设计st_uid，st_gid、进程有效ID及进程附属组ID；
 内核检测流程：
  if(有效用户ID == 0){
   pass;
  }else if(有效用户ID == userID && userID has permission){
   pass;
  }
  if(有效组ID|附属组 == groupID && groupID has permission){
   pass;
  }else{
   permission denied;
  }
  if(otherID has permission){
   pass
  }else{
   permission denied;
  }

4.6 新文件和目录的所有权
 新文件的用户ID = 进程有效用户ID
 新文件的组ID = 进程有效组ID/所在目录组ID

4.7 access/faccessat
 open()内核以进程有效ID来进行访问权限测试；
 access()内核以实际ID来进行访问权限测试；
 #include <unistd.h>
 int access(const char* path, int mode);
 int faccessat(int fd, const char* path, int mode, int flag);
  return 0:ok -1:error
  mode [F_OK|R_OK|W_OK|X_OK]
 // demo
 $ls -l a.out
 -rwxrwxr-x 1 sar ...
 $su
 Password:
 #chown root a.out
 #chmod u+s a.out
 #ls -l a.out
 -rwsrwxr-x 1 root ...
 #exit
 $./a.out /etc/shadow
 access error for /etc/shadow: Permission denied
 open for reading OK;
 
4.8 umask
 #include <sys/stat.h>
 mode_t umask(mode_t cmask);
 c4_9umask.c

4.9 chmod/fchmod/fchmodat
 #include <sys/stat.h>
 int chmod(const char* path, mode_t mode);
 int fchmod(int fd, mode_t mode);
 int fchmodat(int fd, const char* path, mode_t mode, int flag);
  reutrn 0:ok -1:error
  mode_t
   S_ISUID/ISGID/ISVTX
   S_IRWXU/IRUSR/IWUSR/IXUSR
   S_IRWXG/IRGRP/IWGRP/IXGRP
   S_IRWXO/IROTH/IWOTH/IXOTH
 c4_9cmod.c

4.10 粘着位
 S_ISVTX(sticky bit)：在程序结束时正文仍被保存杂交换区，加快下次加载速度；已过时；

4.11 chown/fchown/fchownat/lchown
 #include <unistd.h>
 int chown(const char* path, uid_t owner, gid_t group);
 int fchown(int fd, uid_t owner, gid_t group);
 int fchownat(int fd, const char* path, uid_t owner, gid_t group, int flag);
 int lchown(const char* path, uid_t owner, gid_t group);
  return 0:ok -1:error

4.12 文件长度
 st_blksize/blocks
 文件空洞

4.13 文件截断
 #include <unistd.h>
 int truncate(const char* path, off_t length);
 int ftruncate(int fd, off_t length);
  return 0:ok -1:error

4.14 文件系统
 文件链接，先介绍文件系统的基本结构；了解i节点和指向i节点的目录项之间的区别；
 文件系统：
  .UFS: BSD UNIX File System
   磁盘：分区1	      分区2...
   分区：
    文件系统：自举块|超级块|柱面组0|柱面组1|...|柱面组n|
     柱面：超级块副本|配置信息|i节点图|块位图|i节点数组|数据块|
      i节点数组：i节点|i节点|...|i节点|
                          /----^ \-----------\------------\
      数据块：|...|目录块[i节点编号+文件名]|...|数据块1|...|数据块2|...|
      *每个i节点有一个连接计数，当连接计数到0时才删除文件；unlink() nlink_t->stat.st_nlink-- 硬连接
      *符号连接(symbolic link), lrwxrwxrwx 1 root 7 Sep 25 07:14 lib -> usr/lib; i节点文件类型是S_IFLNK
      *i节点包括文件有关的所有信息：文件类型，文件权限，长度，数据块指针；stat结构中的大多数信息取自i节点
      *目录项只能指向同一文件系统中相应的i节点，不能指向另一个文件系统的i节点；因此ln(1) link(2)不能跨越文件系统，
      *重命名文件，构造一个指向现有i节点的新目录项，并删除老的目录项；统一文件系统内mv(1)命令的通常操作范式；
      
  .PCFS: DOS File System
  .HSFS: CD File System

4.15 link/lintkat/unlink/unlinkat/revome
 #include <unistd.h>
 int lint(const chat* existingpath, const char* newpath);
 int lintat(int efd, const char* existingpath, int nfd, const char* newpath, int flag);
  return 0:ok -1:error
 内核关闭文件时首先检查打开该文件的进程个数，如果是0再去检查其链接计数，如果是0就删除该文件；
  main(){
  open("tempfile",O_REWR);
  unlink("tempfile");
  sleep(15);
  exit(0)
  }
  $ls -l tempfile // 查看文件大小
  -rw-r----- 1 sar 413265408 Jan 21 07:14 tempfile
  $df /home // 查看可用磁盘空间
  Filesystem lk-blocks  Used    Available Use% Mounted on
  /dev/hda4  11021440   1956332 9064105   18%  /home
  $./a.out & // 后台运行
  1364
  $file unlinked //程序输出
  ls -l tempfile
  ls: tempfile: No such file or directory // 目录项已删除
  $df /home
  ... // 磁盘空间未释放
  $done // 程序输出
  df /home
  ... // 磁盘空间被释放
  unlink 的这种特性进程被程序用来确保即使程序崩溃，它所创建的临时文件也不会遗留下来；
  rmdir(2)
  
  #include <stdio.h>
  int remove(const char* pathname);
   return 0:ok -1:error

4.17 符号连接
 符号连接：对文件的间接指针，与上节的link硬连接有所不同，硬连接直接指向i节点；符号连接为了避开硬连接的一些限：
  .避免硬链接要求文件位于同一文件系统
  .避免只有超级用户才能创建指向目录的硬连接
  符号连接任何用户都可以创建指向任何文件的符号连接；

4.18 symlink/symlinkat/readlink/readlinkat
 #include <unistd.h>
 int symlink(const char* actualpath, const char* sympath);
 int symlinkat(const char* actualpath, inf fd, const char* sympath);
 ssize_t readlink(const char* pathname, char* buf, size_t bufsize);
 ssize_t readlinkat(int fd, const char* pathname, char* buf, size_t bufsize);
  return >=0:ok -1:error

4.19 文件时间
 stat.st_atime 最后一次访问时间         read    -u
 stat.st_mtime 最后一次修改时间         write   
 stat.st_ctime 最后一次i节点状态更改时间 chmod/chown -c

4.20 futimens/utimensat/utimes
 文件的访问和修改时间可以更改；

4.21 mkdir/mkdirat/rmdir
 #include <sys/stat.h>
 int mkdir(const char* path, mode_t mode);
 int mkdirat(int fd, const char* pathname, mode_t mode);
 int rmdir(const char* path);
  return 0:ok -1:error

4.22 读目录
 只有内核才能写目录；
 #include <dirent.h>
 DIR* opendir(const char* pathname);
 DIR* fdopendir(int fd);
 struct dirent* readdir(DIR* pd);
 void rewinddir(DIR* pd);
 int closedir(DIR* pd);
 long telldir(DIR* pd);
 void seekdir(DIR* dp, long loc);

4.23 chdir/fchdir/getcwd
4.24 设备特殊文件
 stat.st_dev/st_rdev 编写ttyname函数是需要用到；
 
5. 标志IO(stdio)
5.1 引言
5.2 流和FILE对象
 fd IO <unistd.h>
 stream IO <stdio.h>
 stream's orientation 流定向

 #include <stdio.h>
 #include <wchar.h>
 int fwide(FILE* fp, int mode);
  return 0:未定向 >0:宽定向 <0:字节定向
  mode   0:不设置定向 >0:未定向则设置宽定向 <0:未定向则设置字节定向
  *不改变已定向的流的定向
 stdin,stdout,stderr ->STDIN/STDOUT/STDERR_FILENO
5.4 缓冲
 stdio 3重缓冲类型
  .全缓冲
  .行缓冲
  .无缓冲
 #include <stdio.h>
 void setbuf(FILE* fp, char* buf);//size BUFSIZ defined int stdio.h
 int setvbuf(FILE* fp, char* buf, int mode, size_t size);
 setvbuf精确设置缓冲类型,mode：_IOFBF/IOLBF/IONBF
 int fflush(FILE* fp); // 0:ok EOF:error
 FILE* fopen(const char* paht, cont char* type);
 FILE* freopen(const char* path, const char* type, FILE* fp);
 FILE* fdopen(int fd, const char* type);
  stdio		  fdio
  r/rb 		  O_RDONLY
  w/wb		  O_WRONLY|O_CREAT|O_TRUNC
  a/ab		  O_WRONLY|O_CREAT|O_APPEND
  r+/rb+	  O_RDRW
  w+/wb+	  O_RDWR|O_CREAT|O_TRUNK
  a+/ab+	  O_RDWR|O_CREAT|O_APPEND
 int fclose(FILE* fp);

5.6 读和写流
 #include <stdio.h>
 int getc(FILE* fp);
 int fgetc(FILE* fp);
 int getchar(void);
  return c:ok EOF:error
 int ferror(FILE* fp);
 int feof(FILE* fp);
 void clearerr(FILE* fp);
 ungetc(intc, FILE* fp);
 int putc(intc, FILE* fp);
 int fputc(int c, FILE* fp);
 int putchar（int c);

5.7 每次IO一行
 gets(char* buf)；存在溢出风险弃用

5.8 stdio效率
 标志io 比 fd io 略慢

5.9 二进制I/O
 size_t fread(void* ptr, size_t size, sizt_t nobj, FILE* fp);
 size_t fwrite(const void* ptr, size_t size, size_t nobj, FILE* fp);

5.10 定位流
 ftell/fseek/ftello/fseeko/fgetpos/fsetpos/rewind
 
5.11 格式IO
 #include<stdio.h>
 int printf(const char* format, ...);
 int fprintf(FILE* fp, const char* format, ...);
 int dprintf(int fd, const char* format, ...);
 int sprintf(char* buf, const char* format, ...);
 int snprintf(char* buf, size_t n, const char* format, ...);

 #include <stdarg.h>
 #include <stdio.h>
 int vprintf(const char* format, va_list arg);

 int scanf(char* format, ...);
 int fscanf(File* fp, const char* format, ...);
 int sscanf(const char* buf, const char* format, ...);

 int vfscanf(File* fp, const char* format, va_list argv);

5.12 实现细节
 #include <stdio.h>
 int fileno(FILE* pf); // 获得与流相关联的fd

5.13 临时文件
 char* tmpnam(char* ptr);
 FILE* tmpfile(void);
 
5.14 内存流
 #include <stdio.h>
 FILE* fmemopen(void* buf, size_t size, const char* type);

5.15 标志IO
 不足:效率不高，内核-IObuf-用户buf；

6 系统数据文件和信息
5.2 口令文件
 #include <pwd.h>
 struct passwd{
  char* pw_name; // 用户名
  char* pw_passwd; // 加密口令
  uid_t pw_uid; // 数值用户ID
  gid_t pw_gid; // 数值组ID
  char* pw_gecos; // 注释
  char* pw_dir; // 初始工作目录
  char* pw_shell; // 初始shell；
  char* pw_class; // 用户访问类
  time_t pw_change; // 下次修改口令时间
  time_t pw_expire; // 账号有效期时间
  
 };
 struct passwd* getpwuid(uit_t uid);
 struct passwd* getpwnam(const char* name);
 struct passwd* getpwent(void);
  return NULL:error ptr:OK
 void setpwent(void);
 void endpwent(void);
 
 /etc/passwd
 /etc/shadow
 struct spwd{
  char* sp_namp; // 登陆名
  char* sp_pwdp; // 加密口令
  int sp_lstchg; // 上次更改口令进过的时间
  int sp_min; // 经过多少天后允许更改
  int sp_max; // 要求更改尚余天数
  int sp_warn; // 超期警告天数
  int sp_inact; // 账号不活动之前尚余天数
  int sp_expire; // 账户超期天数
  unsigned int sp_flag; // 保留
 };
 login(1)/passwe(1) 可访问/etc/passwd
 #include <shadow.h>
 struct spwd* getspnam(const char* name);
 struct spwd* getspent(void);
 void setspent(void);
 void endspent(void);
 
6.4 组文件
 <grp.h>
 struct group *getgrgid(gid_t gid);
 struct group *getgrnam(const char *name);
 struct group{
  char* gr_name;
  char* gr_passwd;
  int gr_gid;
  char **gr_mem;
 };
 void setgrent(void);
 void endgrent(void);
 struct group *getgrent(void);// NULL:end

 newgrp(1) // 更改实际组
 附属组ID(supplementary group),用户：1实际组ID + 16附属组ID
 #include <unistd.h>
 int getgroups(int gidsetsize, gid_t grouplist[]); // -1:error >0:supplementary group nums
 #include <grp.h> // on Linux
 #include <unistd.h> // on FreeBSD Mac os x and Solaries
 int setgroups(int ngroups, const gid_t grouplist[]);
 int initgroups(const char* username, gid_t basegid); // 0:ok -1:error

 who(1) // dump utmp
 last(1) // dump wtmp
 
6.9 系统标识
 #include <sys/utsname.h>
 int uname(struct utsname* name); // >0:OK -1:error
 struct utsname{
  char sysneme[]; // name of the operating system
  char nodename[]; // name of this node
  char release[]; // current release of operating system
  char version[]; // current version of this release
  char machine[]; // name of hardware type
 };
 #include <unistd.h>
 int gethostname(char *name, int namelen); // 0:ok -1:error

6.10 时间和日期例程
 UTC(Coordinated Universal Time)
 #include <time.h>
 time_t time(time_t* calptr); // -1:error >0:ok
 struct tm *gmtime(cont time_t *calptr);
 struct tm *localtime(const time_t *calptr);
 time_t mktime(struct tm *tmptr); // 生成time_t
 size_t strftime(char *restrict buf, size_t maxsize, const char* format, const struct tm *tmptr);
 #include <sys/time.h> // CLOCK_REALTIME
 int clock_gettime(clockid_t clock_id, struct timespec *tsp); // 0:ok -1:error
 int clock_getres(clockid_t clock_id, struct timespec *tsp);

7 进程环境
7.1 引言
 进程控制原语，进程环境

7.2 main
 int main(int argc, char *argv[]);
 exit()/_exit()/_Exit()

7.5 环境表
 extern char **environ;
 getenv()/putenv();

7.6 C程序的存储空间布局
 逻辑布局：
 .正文段：CPU执行机器指令部分，可共享
 .初始化数据段：
 .未初始化数据的：bss(block started by symbol)
 .栈：自动变量及每次函数调用所需保持的信息都存放在此段中；
 .堆：动态对内存分配；
 例如：32位Intel x86 Linux正文段从0x08048000开始，栈低从0xC00000000开始；
 a.out中还有若干其他类型的段，如符合表段、调试信息段、动态共享库连接表段等，这些部分不装载到进程执行程序映像中；

7.7 共享库
 cc(1)/ld(1)/ldd
 $gcc -static hello1.c // 阻止gcc使用共享库
 $size a.out
 text    data	bss	dec	hex	filename
 787775  6128   11272   805175  c4937   a.out
 $gcc hello1.c  // gcc默认使用共享库
 $size a.out
 text  data	bss	dec	hex	filename
 1176  504	16	1696	6a0	a.out

7.8 存储空间分配
 #include <stdlib.h>
 void *malloc(size_t size);
 void *calloc(size_t nobj, size_t size);
 void *realloc(void *ptr, size_t newsize); // NULL:error
 void free(void *ptr);
 返回指针一定是适当对齐的，使其可用于任何数据对象；
 sbrk(2)实现上述函数；
 alloca(3): 在栈中分配空间，自动释放；

7.9 环境变量
 #include <stdlib.h>
 char *getenv(const char *name);
 int putenv(char *str);
 int setenv(const hcar *name, const char *value, int rewrite);
 int unsetenv(const char *name);

7.10 setjmp()/longjmp()
 应用于深层嵌套调用出现的错误；
 #include <setjmp.h>
 int setjmp(jmp_buf env);
 void longjmp(jmp_buf env, int val);
 // sigsetjmp/siglongjmp()

 自动变量、寄存器变量、易失变量、静态变量、全局变量

7.11 getrlimit/setrlimit
 #include <sys/resource.h>
 int getrlimit(int resource, struct rlimit *rptr);
 int setrlimit(int resource, const struct rlimit * rlptr);

8 进程控制
 创建、执行、终止进程；
 进程属性；
 
8.2 进程标识
 pid()
 ID：0 调度进程swapper，内核的一部分
 ID：1 init进程，自举内核启动后启动一个UNIX系统；孤儿进程的父进程
 ID：2 页守护进程，支持虚拟存储器系统的分页操作
 #include <unistd.h>
 pid_t getpid(void);
 pid_t getppid(void);
 uid_t getuid(void);
 uit_t geteuid(void);
 gid_t getgid(void);
 gid_t getegid(void);

8.3 fork
 #include <unistd.h>
 pid_t fork(void); // 0:子进程 >0:父进程 -1：error
 fork后经常跟随一个exec，写时复制（Copy-On-Write）

 1）fork复制自己，如网络服务器
 2）vfork（子进程先执行），执行不同程序，如shell，子进程fork返回后立即调用exec；组合成一个操作spawn

 父进程等待子进程
 wait()/waitpid()
 孤儿进程：父进程先于子进程结束，子进程的父进程将变为init
 zombie进程：子进程结束，但父进程为对器进行善后处理；
  避免僵尸进程：fork两次；
 
 文件共享
 1）父进程等待子进程完成。不进行任何操作
 2）父子进程各种执行不同操作，需要各自关闭不需要的文件描述符
 
8.6 wait/waitpid
 #include <sys/wait.h>
 pid_t wait(int *statloc); // 简单阻塞等待
 /* param pid_t pid [in]
    -1 any pid
    >0 wait pid
    =0 等待组ID等于调用进程组ID的任意一个子进程（进程组）
    <-1 等待组ID等于pid绝对值的任意一个子进程
    param options [in]
     0
     WCONTINUED 支持作业控制，控制子进程继续
     WNOHANG 不阻塞
     WUNTRACED 
 */
 pid_t waitpid(pid_t pid, int *statloc, int options); // options可设置不阻塞，控制等待其期望的子进程结束
 int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); // 0:ok -1:error
  // pid_t:ok 0,-1:error
  // statloc 由实现定义，其中某些未表示退出状态，其他未表示喜好编号，有一位指示是否产生了core文件；定义在<sys/wait.h>中；
  // WIFEXITED(status) true 正常终止
  // WIFSIGNALED(status) true 异常终止
  // WIFSTOPPED(status) WSTOPSIG(status),获取子进程涨停信号编号；
  // WIFCONTINUED(status) 子进程继续执行
 进程终止时内核向父进程发送SIGCHILD信号；
 .如果所有子进程都还在运行，则阻塞
 .如果一个子进程终止，正在等待父进程获取终止状态，则取得子进程的终止状态立即返回；
 .如果没有任何子进程，则立即返回出错；
 如果进程由于接收到SIGCHILE后调用wait，我们期望wait会立即返回，但如果随机时间点wait，则进程会阻塞；

8.8 wait3/wait4
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/time.h>
 #include <sys/resource.h>
 pid_t wait3(int *statloc, int options, struct reusage *rusage);
 pid_t wait4(pid_t pid, int *statloc, int options, statuct rusage *rusage);
 获取更详细的资源状态；

8.9 竞争条件（race condition）
 子进程等待父进程结束:
 while(getppind() != 1)sleep(1); // 简单粗暴笨方法，IPC机制更好
 
8.10 exec
 fork创建新进程，exec执行新程序，exit终止进程，wait等待终止；
 #include <unistd.h>
 int exec[lv][ep]()
 int fexecve(int fd, char *const argv[], char *const envp[]);

8.11 更改用户ID和更改组ID
 最小特权(least privilege)
 #include <unistd.h>
 int setuid(uid_t uid);
 int setgid(gid_t gid);
 int setreuid(uid_t ruid, uid_t euid);
 int setregid(gid_t rgid, gid_t egid);

 1)at(1) root
  实际用户ID = uid；
  有效用户ID = root；
  保存的设置用户ID = root;
 2)at 第一件事
  实际用户ID = uid；
  有效用户ID = uid；
  保存的设置用户ID = root;
 3)需要时调整有效用户ID
 4)守护进程代用户运行命令
  实际用户ID = uid；
  有效用户ID = uid；
  保存的设置用户ID = uid;

8.12 解释器文件 interpreter file
 #! pathname [optional-argument]
 #! /bin/sh

 $ /bin/su
 Password:
 #mv /usr/bin/awk /usr/bin/awk.save
 #cp /home/sar/bin/echoarg /usr/bin/awk
 #suspend // 挂起超级用户shell
 [1] + Stopped /bin/su
 $ swkexample file1 FILENAME2 f3
 argv[0]: /bin/awk
 argv[1]: -f
 argv[2]: /usr/local/bin/awkexample
 argv[3]: file1
 argv[4]: FILENAME2
 argv[5]: f3
 $fg
 /bin/su
 # mv /usr/bin/awk.save /usr/bin/awk
 # exit

8.13 system
 #include <stdlib.h>
 int system(conat char *cmdstring);

8.14 进程会计 process accounting
 
8.15 用户标识
 #include <unistd.h>
 char *getlogin(vodi);
 
8.16 进程调度
 #include <unistd.h>
 int nice(int incr);
 int getpriority(int which, id_t who);
 int setpriority(int whick, id_t who, int value);

8.17 进程时间
 #include <sys/times.h>
 clock_t times(struct tms* buf);

9 进程关系

9.3 网络登录
 pseudo terminal 伪终端；
 inetd 因特网超级服务器
 
