#+STARTUP: indent
* mysql
** build
*** steps
    #+BEGIN_SRC sh
    wget https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-8.0/mysql-boost-8.0.20.tar.gz
    tar -zxf mysql-boost-8.0.20.tar.gz

    cd mysql-8.0.20

    mkdir build
    cd build
    #error not find boost
    cmake -DDWONLOAD_BOOST=1 -DWITH_BOOST=../boost/boost_1_70_0 ..
    #err could not find rpc/rpc.h
    sudo yum install -y libtirpc-devel
    #error not find googletest
    cd ~/git
    git clone https://github.com/google/googletest.git
    mkdir build
    cd build
    cmake ..
    make -j8
    sudo make install
    sudo ldconfig

    #error: Could not find rpcgen
    cd ~/git
    git clone https://github.com/thkukuk/rpcsvc-proto
    git checkout -b v1.4.1
    ./autogen.sh
    ./configure
    make -j8
    sudo make install
    sudo ldconfig
    #+END_SRC
* Tips
  - 修改默认密码 ;sh_util/install/mysql.sh
  - 执行脚本 ;mysql -h localhost -u root -p123456 < /path/data.sql
  - 命令表
    |-------------------------+----------------+--------------------------------------------|
    | command                 | meaning        | sample                                     |
    |-------------------------+----------------+--------------------------------------------|
    | show                    | 显示           | show variables like 'validate_password.%'; |
    |                         |                | show database;                             |
    |                         |                | show tables;                               |
    | use                     | 切换数据库     | use mysql;                                 |
    | quit                    | 推出客户端     | \q                                         |
    | describe                | 描述表结构     | describe pet;                              |
    | show create table <tbl> | 显示表构造sql  |                                            |
    | load_data               | 加载表数据     |                                            |
    | insert                  | 插入表数据     |                                            |
    |-------------------------+----------------+--------------------------------------------|
    | varchar(20)             | 可变长度字符串 | len[1-65535]                               |
    |                         |                |                                            |
    |-------------------------+----------------+--------------------------------------------|
    | AND                     |                |                                            |
    | OR                      |                |                                            |
    | distinct                | 不重复统计     |                                            |
    | order by <col>          | 根据<列>排序   | select * from pet order by birth desc/asc; |
    | IS NOT NULL             | 非空判断       | select * from pet where death is not null; |
    | timestampdiff()         | 时间差         | ... timestampdiff(year, birth, death) ...  |
    | year()                  | 获取年份       | year('2018-5-4') => 2018                   |
    | month()                 | 获取月份       | month('2018-5-4') => 5                     |
    | dayofmonth()            |                |                                            |
** 批量插入数据
*** 1. 一条SQL插入多条数据
    INSERT INTO table_name (filed1, filed2 ...) VALUES (val1, val2 ...), (val11, val12 ...) ...
*** 2. 事务插入
    START TRANSACTION;
    INSERT INTO ...
    INSERT INTO ...
    ...
    COMMIT;
*** 3. 主键有序插入
    有序插入 B+tree 调整小
*** 4. 预编译 mysql_stmt_prepare()/bind_param()
* 3 Turorial(教程)
** 3.2 Entering Queries(输入查询)
   - \c ;不立即执行
   - 提示符含义
     |--------+----------------------|
     | prompt | meaning              |
     |--------+----------------------|
     | mysql> | 等待新的查询         |
     | ->     | 等待多行输入的查询   |
     | '>     | 等待多行输入的配对'  |
     | ">     | 等待多行输入的配对"  |
     | `>     | 等待多行输入的配对`  |
     | /*>    | 等待多行输入的配对/* |
     |--------+----------------------|
** 3.3 Creating and Using a Database ;创建并使用数据库
*** 3.3.1 Creating and Selection a DataBase ;创建并选择数据库
    create database test; 创建test数据库
    - unix like 数据库名称大小写敏感
*** 3.3.2 Creating a Table
    create table pet (name VARCHAR(20), owner VARCHAR(20),
    species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);
    show tables;
    describe pet;
*** 3.3.3 Loading Data into a Table
    创建pet.txt，用tab分割数据项，一条数据一行，用\N表示空项；
    load data local infile './pet.txt' into table pet;
*** 3.3.4 Retrieving Infomation form a Table
    select what-to-select -- *
    from which-table -- pet
    [where condition-to-satisfy];
**** 3.3.4.1 Selecting All Data
     select * from pet;
     UPDATE pet SET birth = '1989-08-31' WHERE name = 'Bowser';
**** 3.3.4.2 Selecting Particular Rows 选择指定行
     SELECT * FROM pet WHERE name = 'Bowser';
     SELECT * FROM pet WHERE birth >= '1998-1-1';
     SELECT * FROM pet WHERE species = 'snake' OR species = 'bird';
**** 3.3.4.3 Selecting Particular columns
     select name, birth from pet;
     SELECT DISTINCT owner FROM pet;
**** 3.3.4.4 Sorting Rows ;行排序 order by <col> DESC
     SELECT name, birth FROM pet ORDER BY birth DESC;
**** 3.3.4.5 Data Calculations ;数据计算
     SELECT name, birth, CURDATE(),
       TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age
       FROM pet;
     SELECT name, birth, death,
       TIMESTAMPDIFF(YEAR,birth,death) AS age
       FROM pet WHERE death IS NOT NULL ORDER BY age;
     SELECT name, birth FROM pet WHERE MONTH(birth) = 5;
     SELECT name, birth FROM pet
       WHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH));
     SELECT name, birth FROM pet
       WHERE MONTH(birth) = MOD(MONTH(CURDATE()), 12) + 1;
**** 3.3.4.6 Working with NULL values ; IS [NOT] NULL
     SELECT 1 IS NULL, 1 IS NOT NULL;
     SELECT 1 = NULL, 1 <> NULL, 1 < NULL, 1 > NULL;
     SELECT 0 IS NULL, 0 IS NOT NULL, '' IS NULL, '' IS NOT NULL;
**** 3.3.4.7 Pattern Matching ; like/not like 模式匹配
     - *_* 匹配一个字符
     - *%* 匹配0~N个任意字符
     - *like/not like* 匹配关键字
       SELECT * FROM pet WHERE name LIKE 'b%'; 名字以b开头
       SELECT * FROM pet WHERE name LIKE '_____'; 名字以有5个字母组成
     - REGEXP_LIKE()
       + *.* <==> *_*
       + [abc] <=> a b c 匹配其中一个字符
       + * <==> *%*
       + {n} 重复N次
       + ^/$ 锚定第一个字符/最后一个字符
         SELECT * FROM pet WHERE REGEXP_LIKE(name, '^b'); 锚定b开头
         SELECT * FROM pet WHERE REGEXP_LIKE(name, '^b' COLLATE utf8mb4_0900_as_cs);
         SELECT * FROM pet WHERE REGEXP_LIKE(name, BINARY '^b');
         SELECT * FROM pet WHERE REGEXP_LIKE(name, '^b', 'c');
         SELECT * FROM pet WHERE REGEXP_LIKE(name, '^.....$'); 5字符长度
         SELECT * FROM pet WHERE REGEXP_LIKE(name, '^.{5}$'); 5字符长度
**** 3.3.4.8 Couting Rows ;行计数
     SELECT COUNT(*) FROM pet; 获取表行数
     SELECT owner, COUNT(*) FROM pet GROUP BY owner; 获取每人拥有的宠物数
     SELECT sex, COUNT(*) FROM pet GROUP BY sex; 统计宠物性别
     SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex; 统计各类宠物性别
**** 3.3.4.9 Using More Than one Table ;多表复用
     CREATE TABLE event (name VARCHAR(20), date DATE, type VARCHAR(15), remark VARCHAR(255));
     SELECT pet.name,
       TIMESTAMPDIFF(YEAR,birth,date) AS age,
       remark
       FROM pet INNER JOIN event
       ON pet.name = event.name
       WHERE event.type = 'litter';
     SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species
       FROM pet AS p1 INNER JOIN pet AS p2
       ON p1.species = p2.species AND p1.sex = 'f' AND p2.sex = 'm';
** 3.4 Getting Infomation About Databases and Tables ;获取数据库及表信息
   select database(); 获取当前数据库名称
   show tables; 获取当前数据库下的所有表名称
   describe pet; 获取表项信息
    - field 列名称
    - type 列数据类型
    - null 是否可以为NULL
    - key 是否索引项
    - default 默认值(NULL)
    - extra 额外属性[AUTO_INCREMENT]
** 3.5 Using mysql in Batch Mode ;批量处理模式
   mysql < batch-file
   mysql -e "source batch-file" ;windows下有特殊字符
   --force ;批处理发生错误时继续
   mysql < batch-file | more ;浏览大量输出
   mysql < batch-file > mysql.out ;将查询输出到文件mysql.out
   mysql -t ;交互模式输出
   mysql -v ;详细输出，输出命令行；

   mysql> source filename; 客户端下执行批处理
   mysql> \. filename; 同上
** 3.6 Examples of common queries ;同性查询示例
   9个示例解决一些同性问题:
   CREATE TABLE shop (
    article INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL,
    dealer  CHAR(20)                 DEFAULT ''     NOT NULL,
    price   DOUBLE(16,2)             DEFAULT '0.00' NOT NULL,
    PRIMARY KEY(article, dealer));
   INSERT INTO shop VALUES
    (1,'A',3.45),(1,'B',3.99),(2,'A',10.99),(3,'B',1.45),
    (3,'C',1.69),(3,'D',1.25),(4,'D',19.95);
*** 3.6.1 The Maximum value of a column ;列最大值
    SELECT MAX(article) AS article FROM shop; 获取最大的article值
    SELECT MIN(article) AS article FROM shop; 获取最小的article值
    SELECT AVG(article) AS article FROM shop; 获取article平均值
    SELECT SUM(article) AS article FROM shop; 获取article平均值
    select count(*), sum(price), avg(price), max(price), min(price) from shop;
    SELECT sal FROM `emp` order by sal desc limit 3,1; 获取第四名
*** 3.6.2 The row holding the maximum of a certain colum ;含最大值的行
    SELECT article, dealer, price
    FROM   shop
    WHERE  price=(SELECT MAX(price) FROM shop); 获取报价最高的行，自查询
*** 3.6.3 Maximum of column per group ;每组的列最大值
    SELECT article, MAX(price) AS price
    FROM   shop
    GROUP BY article;
    获取每组的最大值
*** 3.6.4 The rows holding the group-wise maximum of a certain column
    SELECT article, dealer, price
    FROM   shop s1
    WHERE  price=(SELECT MAX(s2.price)
    FROM shop s2
    WHERE s1.article = s2.article);
    获取每组最大报价及其经销商；

    SELECT s1.article, s1.dealer, s1.price
    FROM shop s1
    LEFT JOIN shop s2 ON s1.article = s2.article AND s1.price < s2.price

    SELECT s1.article, dealer, s1.price
    FROM shop s1
    JOIN (
      SELECT article, MAX(price) AS price
      FROM shop
      GROUP BY article) AS s2
      ON s1.article = s2.article AND s1.price = s2.price;
      WHERE s2.article IS NULL;

*** 3.6.5 Using User-Defined Variables ; 用户自定义值
    SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop; 缓存变量 
    SELECT * FROM shop WHERE price=@min_price OR price=@max_price; 使用变量

*** 3.6.6 Using Froeign Keys ; 外键
    CREATE TABLE person (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    name CHAR(60) NOT NULL,
    PRIMARY KEY (id)
    );
    CREATE TABLE shirt (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    style ENUM('t-shirt', 'polo', 'dress') NOT NULL,
    color ENUM('red', 'blue', 'orange', 'white', 'black') NOT NULL,
    owner SMALLINT UNSIGNED NOT NULL REFERENCES person(id),
    PRIMARY KEY (id)
    );
    INSERT INTO person VALUES (NULL, 'Antonio Paz');
    SELECT @last := LAST_INSERT_ID();

    INSERT INTO shirt VALUES
    (NULL, 'polo', 'blue', @last),
    (NULL, 'dress', 'white', @last),
    (NULL, 't-shirt', 'blue', @last);

    INSERT INTO person VALUES (NULL, 'Lilliana Angelovska');
    SELECT @last := LAST_INSERT_ID();
    
    INSERT INTO shirt VALUES
    (NULL, 'dress', 'orange', @last),
    (NULL, 'polo', 'red', @last),
    (NULL, 'dress', 'blue', @last),
    (NULL, 't-shirt', 'white', @last);

    SELECT * FROM person;
    SELECT * FROM shirt;

    SELECT s.* FROM person p INNER JOIN shirt s
    ON s.owner = p.id
    WHERE p.name LIKE 'Lilliana%'
    AND s.color <> 'white';

*** 3.6.7 Searching on Two Keys ; 在两个键间查找
    SELECT field1_index, field2_index FROM test_table
    WHERE field1_index = '1' OR  field2_index = '1';
*** 3.6.8 Calculating visits per day ;统计每日访问
    CREATE TABLE t1 (year YEAR(4), month INT(2) UNSIGNED ZEROFILL,
             day INT(2) UNSIGNED ZEROFILL);
    INSERT INTO t1 VALUES(2000,1,1),(2000,1,20),(2000,1,30),(2000,2,2),
            (2000,2,23),(2000,2,23);
    SELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1
       GROUP BY year,month;

    SELECT year, month, COUNT(DISTINCT day) AS days FROM t1 GROUP BY year,month;
*** 3.6.9 Using AUTO_INCREMENT ;使用自增
    CREATE TABLE animals (
     id MEDIUMINT NOT NULL AUTO_INCREMENT,
     name CHAR(30) NOT NULL,
     PRIMARY KEY (id)
     );

     INSERT INTO animals (name) VALUES
     ('dog'),('cat'),('penguin'),
     ('lax'),('whale'),('ostrich');

     SELECT * FROM animals;
     
     -- C API mysql_insert_id()
     -- client LAST_INSERT_ID()
     ALTER TABLE tbl AUTO_INCREMENT = 100; 从100开始自增
** 3.7 Using MySQL With Apache ;Apache 相关
   LogFormat \
        "\"%h\",%{%Y%m%d%H%M%S}t,%>s,\"%b\",\"%{Content-Type}o\",  \
        \"%U\",\"%{Referer}i\",\"%{User-Agent}i\""
   LOAD DATA INFILE '/local/access_log' INTO TABLE tbl_name
     FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '\\'
* 4 MySQL Programs ; 程序
** 4.1 Overview of MySQL Programs ;概览
   - mysqld ;主服务
   - mysqld_safe ;尝试启动mysqld脚本
   - mysql.server ;服务启动脚本，调用mysqld_safe
   - mydqld_multi ;启动多服务
   - mysql ;客户端
   - mysqladmin ;超级权限客户端
   - mysqlcheck ;
   - mydqldump ;将数据库导出到SQL，text，XML
   - mysqlimport ;数据导入
   - mysqlpump ;导出数据到SQL文件
   - mysqlshow ;显示数据库信息
  
   ...
** 4.2 Using MySQL Programs ;使用
   shell> mysql --user=root test
   shell> mysqladmin extended-status variables
   shell> mysqlshow --help
   shell> mysqldump -u root personnel
** 4.3 MySQL Server and Server-Startup Programs; 服务端
** 4.4 MySQL Installation-Related Programs ; 安装相关
** 4.5 MySQL Client Programs ; 客户端
** 4.6 MySQL Administrative and Utility Programs ; 高级及实用
** 4.7 MySQL Program Development Utilities ; 开发实例
** 4.8 Miscellaneous Programs ; 杂项
** 4.9 MySQL Program Environment Variables ;编程
* 27 Connectors and APIs
** 27.7 C API

* offical document
** Data Structures
   #+BEGIN_SRC c
   MYSQL_RES *res; //This structure represents the result of a query that returns rows (SELECT, SHOW, DESCRIBE, EXPLAIN).
   MYSQL_ROW *row; //This is a type-safe representation of one row of data. It is currently implemented as an array of counted byte strings. Rows are obtained by calling mysql_fetch_row().
   MYSQL_FIELD *fiels; //This structure contains metadata: information about a field, such as the field's name, type, and size.  mysql_fetch_field()
   MYSQL_FIELD_OFFSET offset; //This is a type-safe representation of an offset into a MySQL field list. (Used by mysql_field_seek().)

   my_ulonglong ull; // The type used for the number of rows and for mysql_affected_rows(), mysql_num_rows(), and mysql_insert_id().
   printf ("Number of rows: %lu\n", (unsigned long) mysql_num_rows(result));

   my_bool b;

   mysql_real_connect(); // mysql_connect
   mysql_error()/mysql_errno(); // mysql_eof()
   mysql_ping() //
   mysql_query();
   mysql_real_query();

   #+END_SRC
*** enum enum_field_types type
The type of the field. The type value may be one of the MYSQL_TYPE_ symbols shown in the following table.

Type Value	Type Description
MYSQL_TYPE_TINY	TINYINT field
MYSQL_TYPE_SHORT	SMALLINT field
MYSQL_TYPE_LONG	INTEGER field
MYSQL_TYPE_INT24	MEDIUMINT field
MYSQL_TYPE_LONGLONG	BIGINT field
MYSQL_TYPE_DECIMAL	DECIMAL or NUMERIC field
MYSQL_TYPE_NEWDECIMAL	Precision math DECIMAL or NUMERIC
MYSQL_TYPE_FLOAT	FLOAT field
MYSQL_TYPE_DOUBLE	DOUBLE or REAL field
MYSQL_TYPE_BIT	BIT field
MYSQL_TYPE_TIMESTAMP	TIMESTAMP field
MYSQL_TYPE_DATE	DATE field
MYSQL_TYPE_TIME	TIME field
MYSQL_TYPE_DATETIME	DATETIME field
MYSQL_TYPE_YEAR	YEAR field
MYSQL_TYPE_STRING	CHAR or BINARY field
MYSQL_TYPE_VAR_STRING	VARCHAR or VARBINARY field
MYSQL_TYPE_BLOB	BLOB or TEXT field (use max_length to determine the maximum length)
MYSQL_TYPE_SET	SET field
MYSQL_TYPE_ENUM	ENUM field
MYSQL_TYPE_GEOMETRY	Spatial field
MYSQL_TYPE_NULL	NULL-type field
#+BEGIN_SRC c
//You can use the IS_NUM() macro to test whether a field has a numeric type. Pass the type value to IS_NUM() and it evaluates to TRUE if the field is numeric:
if (IS_NUM(field->type))
    printf("Field is numeric\n");
#+END_SRC

For each non-SELECT query (for example, INSERT, UPDATE, DELETE), you can find out how many rows were changed (affected) by calling mysql_affected_rows().

Call mysql_stmt_init() to create a statement handler, then mysql_stmt_prepare() to prepare the statement string, mysql_stmt_bind_param() to supply the parameter data, and mysql_stmt_execute() to execute the statement. You can repeat the mysql_stmt_execute() by changing parameter values in the respective buffers supplied through mysql_stmt_bind_param().

prepare '?' they are permitted in the VALUES() list of an INSERT statement,  in a comparison with a column in a WHERE clause to specify a comparison value;
The parameter markers must be bound to application variables using mysql_stmt_bind_param() before executing the statement.
#+BEGIN_SRC c
//To prepare and execute a statement, an application follows these steps:
mysql_stmt_init();
mysql_stmt_prepare();

// if the statement will produce a result set
mysql_stmt_result_metadata();

mysql_stmt_bind_param();
mysql_stmt_execute();

mysql_stmt_bind_result();
mysql_stmt_fetch();

mysql_stmt_errno();
mysql_stmt_error();
mysql_stmt_sqlstate();
#+END_SRC
* Tests
** Stress testing
|--------------------------+---------------------|
| mysql服务器配置          | 4核8G内存           |
|                          | *.26                |
|--------------------------+---------------------|
| 测试服务器               | 2核2G内存           |
|                          | *.09,*.21,*.18,*.22 |
|--------------------------+---------------------|
| .09单客户端插入速度      | 200,000/41.5=4,819  |
| .09加.21双客户端插入速度 | 400,000/47=8,510    |
| 四客户端同时插入速度     | 800,000/58=13,793   |
|--------------------------+---------------------|
* Percona XtraBackup
** PartI Introduction
*** C2 HOW PERCONA XTRABACKUP WORKS
    - InnoDB's crash-recovery functionality
      1. copys InnoDB data files that is internally inconsistent
      2. performs crash recovery on the files to make them a consistent
    - LSN(Log Sequence Number)
    - redo log(transaction log)
      contains a record of every change to InnoDB data.
** PartIII Prerequisites
*** C4 Connection and Privileges Needed
    - Privileges(特权) 数据库用户操作数据库服务权限集
      - DataBase user tables/databases
      - RELOAD, LOCK TABLES(unless --no-lock)
      - BACKUP_ADMIN performance_schema.log_status
      - REPLICATION CLIENT obtain the binary log position
      - CREATETABLESPACE import tables
      - PROCESS
      - SUPER
      - CREATE create PERCONA_SCHEMA.xtrabackup_history database and table
      - INSERT
      - SELECT
      - SQL example
        #+BEGIN_SRC sql
        CREATE USER 'bkpuser'@'localhost' IDENTIFIED BY 's3cr%T';
        GRANT BACKUP_ADMIN, PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'bkpuser'@'localhost';
        GRANT SELECT ON performance_schema.log_status TO 'bkpuser'@'localhost';
        FLUSH PRIVILEGES;

        #+END_SRC
    - Permissions(权限) 系统用户权限，文件读写执行权限，服务启动停止权限
      - System user : datadir READ,EXECUTE
    - Connecting to the server 连接数据库
      #+BEGIN_SRC sh
      xtrabackup --user=root --password=passwd --backup --target-dir=/data/bkps/
      #+END_SRC
      - --port
      - --socket
      - --host
*** C5 CONFIGURING XTRABACKUP
    - command-line
    - /etc/my.cnf
      - [mysqld]
        - datadir
        - InnoDB options
      - [xtrabackup]
        - 不接受mysqld --set-variable=<var>=<val>, 改为--variable=value
        - datadir
        - InnnoDB options ; read later, it will take precedence
        - target_dir=/data/backups/mysql
          - NFS卷fsync()可能没有真正的sync数据，使用sync挂载选项避免。
** PartIV Backup Scenarios
*** C6 THE BACKUP CYCLE - FULL BACKUPS(完全备份)
**** Creating a backup
     *可随时打断，不同于prepare*
     #+BEGIN_SRC sh
     xtrabackup --backup --target-dir=/data/backups/
     xtrabackup: Transaction log of lsn (26970807) to (137343534) was copied.

     ls -lh /data/backups
     total 182M
     drwx------ 7 root root 4.0K Sep 6 10:19 .
     drwxrwxrwt 11 root root 4.0K Sep 6 11:05 ..
     -rw-r----- 1 root root 387 Sep 6 10:19 backup-my.cnf
     -rw-r----- 1 root root 76M Sep 6 10:19 ibdata1
     drwx------ 2 root root 4.0K Sep 6 10:19 mysql
     drwx------ 2 root root 4.0K Sep 6 10:19 performance_schema
     drwx------ 2 root root 4.0K Sep 6 10:19 sbtest
     drwx------ 2 root root 4.0K Sep 6 10:19 test
     drwx------ 2 root root 4.0K Sep 6 10:19 world2
     -rw-r----- 1 root root 116 Sep 6 10:19 xtrabackup_checkpoints
     -rw-r----- 1 root root 433 Sep 6 10:19 xtrabackup_info
     -rw-r----- 1 root root 106M Sep 6 10:19 xtrabackup_logfile
     #+END_SRC
     xtrabackup: Transaction log of lsn (26970807) to (137343534) was copied.
     Note:日志拷贝线程每秒检查事务日志，可能会无法跟上而发生错误；
**** Preparing a backup
     - *--prepare* 使文件在某时段完全一致，可以启动InnoDB。否则报错
       *不可被打断，否则数据不可用*
       #+BEGIN_SRC sh
       xtrabackup --prepare --target-dir=/data/backups/

       InnoDB: Shutdown completed; log sequence number 137345046
       160906 11:21:01 completed OK!

       xtrabackup: This target seems to be already prepared.
       xtrabackup: notice: xtrabackup_logfile was already used to '--prepare'
       #+END_SRC
     - 在prepare期间，xtrabackup启动一个嵌入式的InnoDB以关闭InnoDB的标准安全检查
       使用嵌入InnoDB进行拷贝数据恢复。
     - *--apply-log-only* 后续做增量备份使必须使用该选项
**** Restoring a Backup
     - --copy-back(--move-back)
       #+BEGIN_SRC sh
       xtrabackup --copy-back --target-dir=/data/backups
       #+END_SRC
       *Note:* datadir must be empty. MySQL server needs to be shut down.
     - rsync
       #+BEGIN_SRC sh
       chown -R mysql:mysql /var/lib/mysql
       rsync -avrP /data/backup /var/lib/mysql
       #+END_SRC
*** C7 INCREMENTAL BACKUP
**** Introduction
     - 增量备份，只拷贝上次全量备份后改变的数据。
     - 可以在多个全量备份上进行增量备份。如每周全量备份，每天增量备份。
     - 增量备份工作原理：LSN每页保存了相应的数据变更。
     - --incremental-force-scan 强制读取所有页面
     - --incremental-lsn 
**** Creating an Incremental Backup
     #+BEGIN_SRC sh
     cat /data/backups/base/xtrabackup_checkpoints

     backup_type = full-backuped
     from_lsn = 0
     to_lsn = 1626007
     last_lsn = 1626007
     compact = 0
     recover_binlog_info = 1

     xtrabackup --backup --target-dir=/data/backups/inc1 --incremental-basedir=/data/backups/base

     cat /data/backups/inc1/xtrabackup_checkpoints

     backup_type = incremental
     from_lsn = 1626007
     to_lsn = 4124244
     last_lsn = 4124244
     compact = 0
     recover_binlog_info = 1

     # xtrabackup --backup --target-dir=/data/backups/inc1 --incremental-basedir=/data/backups/inc2
     #+END_SRC
**** Preparing the Incremental Backups
     - --prepare 不同于全量备份的prepare.
       - 保存提交的事务
       - 回滚未提交的事务
         但是增量不能回滚未提交事务，因为用户可能在后续提交事务。
         使用--apply-log-only防止回滚,如果回复启动MySQL后台会继续完成回滚
     #+BEGIN_SRC sh
     xtrabackup --prepare --apply-log-only --target-dir=/data/backups/base

     InnoDB: Shutdown completed; log sequence number 1626007
     161011 12:41:04 completed OK!

     xtrabackup --prepare --apply-log-only --target-dir=/data/backups/base \
                --incremental-dir=/data/backups/inc1

     incremental backup from 1626007 is enabled.
     xtrabackup: cd to /data/backups/base
     xtrabackup: This target seems to be already prepared with --apply-log-only.
     xtrabackup: xtrabackup_logfile detected: size=2097152, start_lsn=(4124244)
     ...
     xtrabackup: page size for /tmp/backups/inc1/ibdata1.delta is 16384 bytes
     Applying /tmp/backups/inc1/ibdata1.delta to ./ibdata1...
     ...
     161011 12:45:56 completed OK!

      xtrabackup --prepare --target-dir=/data/backups/base \
     --incremental-dir=/data/backups/inc2
     #+END_SRC
*** C8 COMPRESSED BACKUP
    压缩备份, xbstream流备份
**** Creating Compressed Backups
     #+BEGIN_SRC sh
     # 单线程压缩
     xtrabackup --backup --compress --target-dir=/data/compressed/
     # 4线程压缩
     xtrabackup --backup --compress --compress-threads=4 --target-dir=/data/compressed/

     ...
     170223 13:00:38 [01] Compressing ./test/sbtest1.frm to /tmp/compressed/test/sbtest1.
     ˓→frm.qp
     170223 13:00:38 [01] ...done
     170223 13:00:38 [01] Compressing ./test/sbtest2.frm to /tmp/compressed/test/sbtest2.
     ˓→frm.qp
     170223 13:00:38 [01] ...done
     ...
     170223 13:00:39 [00] Compressing xtrabackup_info
     170223 13:00:39 [00] ...done
     xtrabackup: Transaction log of lsn (9291934) to (9291934) was copied.
     170223 13:00:39 completed OK!
     #+END_SRC
**** Preparing the backup
     #+BEGIN_SRC sh
     xtrabackup --decompress --target-dir=/data/compressed/
     # --parallel=4
     # --remove-original
     xtrabackup --prepare --target-dir=/data/compressed/
     #+END_SRC
**** Restoring the backup
     #+BEGIN_SRC sh
      xtrabackup --copy-back --target-dir=/data/backups/
     chown -R mysql:mysql /var/lib/mysql
     #+END_SRC
** PartV User's Manual
*** C9 PERCONA XTRABACKUP USER MANNUAL
**** The xtrabackup Binary
* tips
** 初始安装修改root密码及访问权限
#+BEGIN_SRC sh
# install server and client develop lib
sudo apt install mysql-server libmysqlclient-dev

# show initial user and password
sudo cat /etc/mysql/debian.cnf
[sudo] password for betty: 
# Automatically generated for Debian scripts. DO NOT TOUCH!
[client]
host     = localhost
user     = debian-sys-maint
password = 61tAx8tghU6xn9Ax
socket   = /var/run/mysqld/mysqld.sock
[mysql_upgrade]
host     = localhost
user     = debian-sys-maint
password = 61tAx8tghU6xn9Ax
socket   = /var/run/mysqld/mysqld.sock

# login mysql
mysql -u debian-sys-maint -p
#pwd 61tAx8tghU6xn9Ax
show database;
use mysql;

# for version <= 5.7
#update user set password=password('123456') where user='root';
#GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;

# for version 8.0
update user set authentication_string='' where user='root';
alter user 'root'@'localhost' identified with mysql_native_password by '123456';
# /etc/mysql/mysql.conf.d/mysqld.cnf
# #bind-address=127.0.0.1
update user set host='%' where user='root';
flush privileges;

#+END_SRC
** 绕过密码登陆
/etc/mysql/mysql.conf.d/mysqld.cnf
[mysqld]
skip-grant-tables

** 安日期分区
https://blog.csdn.net/zhang168/article/details/46911305
#+BEGIN_SRC sql
CREATE TABLE part_date3 (
       c1 int default NULL,
       c2 varchar(30) default NULL,
       c3 date default NULL) engine=myisam
       partition by range (to_days(c3))
       (PARTITION p0 VALUES LESS THAN (to_days('1995-01-01')),
       PARTITION p1 VALUES LESS THAN (to_days('1996-01-01')) ,
       PARTITION p2 VALUES LESS THAN (to_days('1997-01-01')) ,
       PARTITION p3 VALUES LESS THAN (to_days('1998-01-01')) ,
       PARTITION p4 VALUES LESS THAN (to_days('1999-01-01')) ,
       PARTITION p5 VALUES LESS THAN (to_days('2000-01-01')) ,
       PARTITION p6 VALUES LESS THAN (to_days('2001-01-01')) ,
       PARTITION p7 VALUES LESS THAN (to_days('2002-01-01')) ,
       PARTITION p8 VALUES LESS THAN (to_days('2003-01-01')) ,
       PARTITION p9 VALUES LESS THAN (to_days('2004-01-01')) ,
       PARTITION p10 VALUES LESS THAN (to_days('2010-01-01')),
       PARTITION p11 VALUES LESS THAN MAXVALUE );
/*
ABS()
-- CEILING() and FLOOR() （在使用这2个函数的建立分区表的前提是使用函数的分区键是INT类型），例如
-- mysql> CREATE TABLE t (c FLOAT) PARTITION BY LIST( FLOOR(c) )( -> PARTITION p0 VALUES IN (1,3,5), -> PARTITION p1 VALUES IN (2,4,6) -> );; ERROR 1491 (HY000): The PARTITION function returns the wrong type   mysql> CREATE TABLE t (c int) PARTITION BY LIST( FLOOR(c) )( -> PARTITION p0 VALUES IN (1,3,5), -> PARTITION p1 VALUES IN (2,4,6) -> ); Query OK, 0 rows affected (0.01 sec)
DAY()
DAYOFMONTH()
DAYOFWEEK()
DAYOFYEAR()
DATEDIFF()
EXTRACT()
HOUR()
MICROSECOND()
MINUTE()
MOD()
MONTH()
QUARTER()
SECOND()
TIME_TO_SEC()
TO_DAYS()
WEEKDAY()
YEAR()
YEARWEEK()
,*/

explain partitions
select count(*) from part_date3 where
       c3> date '1995-01-01' and c3 <date '1995-12-31'\G

/*
,*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: part_date3
   partitions: p1
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 808431
        Extra: Using where
1 row in set (0.00 sec)
,*/

select count(*) from part_date3 where
       c3> date '1995-01-01' and c3 <date '1995-12-31';
/*
+----------+
| count(*) |
+----------+
|   805114 |
+----------+
1 row in set (4.11 sec)
,*/
mysql> select count(*) from part_date1 where
       c3> date '1995-01-01' and c3 <date '1995-12-31';

/*
+----------+
| count(*) |
+----------+
|   805114 |
+----------+
1 row in set (40.33 sec)
,*/
#+END_SRC