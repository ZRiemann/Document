shell 编程

1. 管道和重重定向

1.1 重定向输出

 $ ls -l > lsoutput.txt ; 重定向到文件(truncate)
 $ ps >> lsoutput.txt ; 重定向追加到文件尾部(append)
 $ kill -HUP 1234 >killout.txt 2>killerr.txt
   ;标准输出重定向到killout.txt,错误输出重定向到killer.txt
 $ kill -1 1234 >killouterr.txt 2>&1
   ;标准/错误输出都重定向到killouterr.txt

 *$ kill -1 1234 >/dev/null 2>&1 ;不显示任务信息

1.2 重定向输入
 $ more < killout.txt ;

1.3 管道

 $ ps > psout.txt
 $ sort psout.txt > pssort.out
 ;下面等价
 $ ps | sort > pssort.out

 $ ps | sort | more
 $ ps -xo comm | sort | uniq | grep -v sh | more

1.4 交互式程序

 * ; 通配字符串
 ? ; 通配单个字符
 [set] ; 匹配任意一个单个字符
 [^set] ; 对内容取反，匹配无set字符
 {} ; 部分支持

 $ ls my_{finger, toe}s ;匹配my_fingers,my_toes

1.5 创建脚本

 #!/bin/sh
 # first 注释行
 
 for file in *
 do
   if grep -q POSIX $file
     then
       echo $file
   fi
 down
 exit 0

1.6 shell 语法

1.6.1 变量

 . 大小写敏感
 . '$' 访问变量内容
 . 变量定义'='两边不能有空格
 . read命令将用户输入赋值给一个变量
   $ read salutation
   Wie geht'a?
   $ echo $salutation
   Wie geht'a?
 . 脚本参数一般以空白字符风格;(空格，\t, \n)
   一个参数包含多个空白符必须加上引号
 . '\' 字符逃逸
 . "$var" 替换变量内容, '$var' 不替换

1.6.2 环境变量
 . $HOME 用户home目录
 . $PATH 命令搜索目录列表
 . $PS1 命令提示符,一般是'$'
 . $PS2 二级提示符,一般是'>'
 . $IFS 分隔符(一般是空白符)
 . $0 shell脚本名字 $[1|2...] like argv[i]
 . $# 脚本参数个数, like argc
 . $$ 脚本进程号，生成唯一临时文件/tmp/tmpfile_$$
 . $* 在一个变量中列出所有参数(IFS)隔开
 . $@ 列出参数列表，不使用IFS分隔

1.6.3 条件

 . 可以测试命令退出码，脚本exit命令重要
 . test 或 [ ; []
   . 字符串比较
     str1 = str2 ; 相同真
     str1 != str2 ; 不相同真
     -n str ; 非空串真
     -z str ; 空串真
     
   . 算术比较
     exp1 -eq exp2 ; 相等真 (exp1 == exp2)
     exp1 -ne exp2 ; 不相等真 (exp1 != exp2)
     exp1 -gt exp2 ; 大于真 (exp1 > exp2)
     exp1 -ge exp2 ; 大于等于真 (exp1 >= exp2)
     exp1 -lt exp2 ; 小于真 (exp1 < exp2)
     exp1 -le exp2 ; 小于等于真 (exp1 <= exp1)
     !exp ; 取反值 (!exp1)
     exp1 -a exp2 ; 同时真(exp1 && exp2)
     exp1 -o exp2 ; 或真(exp1 || exp2)
     
      -o OPTION      True if the shell option OPTION is enabled.
      -v VAR         True if the shell variable VAR is set.
      -R VAR         True if the shell variable VAR is set and is a name
                     reference.
   . 文件有关的条件测试
     -d file ; 目录真
     -e file ; 存在真(不可移植, 建议-f)
     -f file ; 普通文件真
     -g file ; set-group-id 被设置真
     -r file ; 可读真
     -s file ; 文件大小非0真
     -u file ; set-user-id被设置真
     -w file ; 可写真
     -x file ; 可执行真
      -a FILE        True if file exists.
      -b FILE        True if file is block special.
      -c FILE        True if file is character special.
      -d FILE        True if file is a directory.
      -e FILE        True if file exists.
      -f FILE        True if file exists and is a regular file.
      -g FILE        True if file is set-group-id.
      -h FILE        True if file is a symbolic link.
      -L FILE        True if file is a symbolic link.
      -k FILE        True if file has its `sticky' bit set.
      -p FILE        True if file is a named pipe.
      -r FILE        True if file is readable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -u FILE        True if the file is set-user-id.
      -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.

      FILE1 -nt FILE2  True if file1 is newer than file2 (according to
                       modification date).

      FILE1 -ot FILE2  True if file1 is older than file2.

      FILE1 -ef FILE2  True if file1 is a hard link to file2.

 if test -f fred.c
 then
 ...
 fi
 下面等价([ -f 必须有空格)
 if [ -f fred.c ]
 then
 ...
 fi
 下面等价(必须带;then)
 if [ -f fred.c ]; then
 ...
 fi

1.6.4 控制结构

 . if 语句
   if [ ... ]; then
     ...
   else/elif [ ... ]
     ...
   fi

   * if [ "$var" = str ] // 加""避免变量空错误
   * printf 替换 echo 去掉换行

 . for语句
   for var in values
   do
     ...
   done

   #!/bin/sh
   for foo in bar fud bus; do
   # for file in $(ls f*.sh); do
     echo $foo
   done
   exit 0
   #result bar\n fud\n buf\n

 . while语句
   while condition; do
     ...
   done

 . until语句
   until condition; do
    ...
   done

   until who | grep "$1" > /dev/null; do
     sleep 60
   done
   # now ring the bell and announce the expected user.
   echo '\a'
   echo ********* $1 has just logged in ***********
   exit 0

 . case 语句
   case var in
     pattern [ | pattern] ...) statement;;
     pattern [ | pattern] ...) statement;;
     ...
   esac

   #!/bin/sh
   echo "Is it morning? Please answer yes or no"
   read timeofday

   case "$timeofday" in
     yes) echo "Good Morning";;   # yes | y | Yes | YES)
     no ) echo "Good Afternoon";; # n* | N*) #[nN]*) ...;;
     y  ) echo "Good Morning";;   # *)
     n  ) echo "Good Afternoon";;
     *  ) echo "Sorry, answer not recognized";;
   esac
   exit 0

 . 命令列表
    && / ||

 . 语句块
   get_confirm && {
     grep -v "$cdcatnum" $stracks_file > $temp_file
     cat $temp_file > $stracks_file
     echo
     add_record_tracks
   }

 . 函数
   funcion_name(){
     statements
   }
   . local 声明局部变量

   yes_or_no(){
     echo "Is your name $* ?"
     while true; do
       echo -n "Enter yes or no: "
       read x
       case "$x" in
         [Yy] | [Yy][Ee][Ss] ) return 0;
	 [Nn]* ) return 1;
	 * ) echo "Answer yes or no"
       esac
     done
   }

   if yes_or_no "$1";
   then
     echo "Hi $1, nice name"
   else
     echo "Never mind"
   fi
   exit 0
   
1.6.5 命令
 内部命令、外部命令
 . break
   for file in fred* ; do
     if [ -d "$file" ]; then
       break;
     fi
   done

 . : #true别名，比true快
   :$(var:=value)

   rm -f fred
   if [ -f fred ]; then
     :
   else
     echo "file fred did not exist"
   fi

 . continue

 for file in fred*
 do
   if [ -d "$file" ]; then
      echo "skipping directory $file"
     continue
   fi
   echo "fis is $file"
 done

 . .
   #!/bin/sh
   version=classic
   PATH=...
   PS1="classic> "

   #!/bin/sh
   version=latest
   PATH=...
   PS1="latest version> "

   $ . ./classic_set
   $ . ./latest_set

 . eval
   foo=10
   x=foo
   y='$'$x         eval y='$'$x
   echo $y ; $foo  10

 . exec
   exec wall "Thanks for all the fish" ; wall 替换当前脚本
   exec 3< afile ; 修改当前文件描述符

 . exit n
   126 文件不可执行
   127 命令未找到
   >=128 出现一个信号

   if [ -f .profile];then
     exit 0
   fi
   exit 1

   [ -f .profile ] && exit 0 || exit 1
   
 . export 导处参数到子shell脚本

 . expr求值
   x=$(expr $x +1)
   x=`expr $x +1`
   expr1 |/&/=/>/>=/</<=/!=/+/-/*///% expr2

 . return
 . set
   echo the date is $(date)
   set $(date)
   echo The month is $2
   exit 0

 . shift
   参数左移一位，原$1丢弃，$0不变
   while [ "$1" != "" ]; do
     echo "$1"
     shift
   done

 . trap 接收到信号好执行命令
   trap command signal
   trap - signal ; 重置默认处理
   trap '' signal ; 忽略
   trap ;列出当前数组的信号及命令清单
   HUP(1) 挂起，终端掉线或用户退出
   INT(2) 中断，Ctl+C
   QUIT(3) 退出，Ctl+\
   ABRT(6) 中止，执行错误
   ALRM(14) 时钟超时
   TERM(15) 终止，系统关机

   #!/bin/sh
   trap 'rm -f /tmp/my_tmp_file_$$' INT
   echo creating file /tmp/my_tmp_file_$$
   date > /tmp/my_tmp_file_$$

   echo "press interrupt (CTRL-C) ..."
   while [ -f /tmp/my_tmp_file_$$ ]; do
     echo File exists
     sleep 1
   done

   echo The file no longer exists

   trap INT
   echo creating file /tmp/my_tmp_file_$$
   date > /tmp/my_tmp_file_$$

   echo "press interrupt (CTRL-C)..."
   while [ -f /tmp/my_tmp_file_$$ ]; do
     echo File exists
     sleep 1
   done

   echo we never get here
   exit 0

 . unset 删除变量或函数

 . find [paht] [options] [tests] [actions]命令
   # find / -mount -name test -print
     find /var /home 指定多个路径
     [options]
     -depth 查看目录本身前先搜索目录的内容
     -following 跟踪符号连接
     -maxdepths N 最大搜索N层陌路
     -mount 不搜索其他文件系统中的目录

     [tests]
     -atime N N天前被最后访问过
     -mtime N N天前被修改过
     -name pattern 文件名匹配pattern，引号括起
     -newer otherfile 比otherfile新
     -type c/d/f 文件类型
     -user username 指定用户
     !/-a/-o == -not/-and/-or \( ... \)
      \(-newer X -o -name "_*" \)

      [actions]
      -exec command\; 不提示用户确认直接执行
      -ok command\;  提示用户确认执行
      -print 打印文件名
      -ls 对当前文件使用ls-dils
      {} 被exec替换为文件路径
    $ find . -newer while2 -type f -exec ls -l {} \;

 . grep(General Regular Expression Parse)正则表达式解析器
   grep [options] PATTERN [FILES]

   [options]
   -c 输出匹配行的数目，而不输出匹配的行
   -E 启用扩展表达式
   -h 取消输出行的普通前缀
   -i 忽略大小写
   -l 只列出文件名，不输出匹配行
   -v 对匹配模式取反，搜索不匹配行

   grep -c -v in words.1 words.2

   [正则表达式]
   ^ ;指向一行的开头
   $ ;指向一行的结尾
   . ;任意单个字符
   [] ;字符范围
   [:alnum:] ;字母与数字
   [:alpha:] ;字母
   [:ascii:]
   [:blank:] ;空格或制表
   [:cntrl:] ;ASCII控制字符
   [:digit:] ;数字
   [:graph:] ;非控制非字符
   [:lower:] ;小写字母
   [:print:] ;可打印字符
   [:punct:] ;标点符号字符
   [:space:] ;空白包括垂直制表
   [:upper:] ;
   [::] ;16进制数字
   ? 最多匹配一次
   * 0或多次
   + 1或多次
   {n} 匹配n次
   {n,} n+次
   {n,m} n~m次

   $grep e$ words.2 ; 以e结尾的行
   $grep a[[:blank:]] words.2 ; 以a结尾的单词
   $grep Th.[[:space:]] word.2 ; 以Th大头的三字母单词
   $grep -E [a-z]\{10\} word.2 ; 10个小写字母的单词

 . 命令执行
   $(command)

 . 算术扩展
   $((...))
   x=0
   while [ "$x" -ne 10 ]; do
     echo $x
     x=$(($x+1))
   done

   ${param:-devault} ; 若param空，置default
   ${#param} ;param 长度
   ${param%word} ;从param尾部开始删除与word匹配的最小部分
   ${param%%word} ; 最长部分
   ${param#word} ; 开始 最小
   ${param##word} ; 开始 最长

   #!/bin/sh
   unset foo
   echo ${foo:-bar} ;bar

   foo=fud
   echo ${foo:-bar} ;bar

   foo=/usr/bin/X11/startx
   echo ${foo#*/} ;usr/bin/X11/startx
   echo ${foo##*/} ;startx

   bar=/usr/local/etc/local/networks
   echo ${bar%local*} ;/usr/local/etc
   echo ${bar%%local*} ;/usr
   exit 0

   cjpet image.gif > image.jpg
   for image in *.gif
   do
     cjpet $image > ${image%%gif}jpg
   done

 . here文档

   #!/bin/sh
   cat <<!FUNKY!
   hello
   this is a here
   document
   !FUNCKY!
   exit 0

   #!/bin/sh
   ed a_txt_file <<!FunckStuff!
   3
   d
   .,\$s/is/was/
   w
   q
   !FunckStuff!
   exit 0

 . 调试脚本程序
   sh -n <script> set -o noexec/-n 只检查不zhix
      -v                 vervbos/-v 执行前回显
      -x                 xtrace/-x      后
      -u                 nounset/-u  未定义变量出错
