
* shell 入门 
  http://blog.csdn.net/Z_YTTT/article/details/53020830
** 第一行&执行
   脚本文本的第一行，顶格：给出shebang，解释器程序文件的路径，
   用于指明解释运行当前脚本代码的解释器；
    #!/bin/bash
    #!/bin/tcsh
    #!/usr/bin/python3
    #!/usr/bin/perl

   $ chmod +x  /PATH/TO/SCRIPT_FILE
   $ /PATH/TO/SCRIPT_FILE

   #+BEGIN_SRC sh
   #!/bin/bash

   # This is my first shell script.
   echo "hello world!"
   #+END_SRC
** 变量
*** 定义变量(<var>=<value>)
    - *变量名和等号之间不能有空格*
    - *首个字符必须为字母(a-z，A-Z)*
    - 中间不能有空格，可以使用下划线 '_'
    - 不能使用标点符号
    - 不能使用bash里的关键字

    myUrl="http://zhaoyongtao.blog.51cto.com/"
    myNum=100
*** 使用变量(${<var>})
    #+BEGIN_SRC sh
    # 可以不加{}，但不能处理分割边界问题
    your_name="kim"
    echo $youre_name

    # 加{}，可以处理边问题
    fruit="apple"
    echo "I like ${fruit}s"
    # 不能得到预想结果, 无fruits变量定义
    echo "I like $fruits"
    #+END_SRC
*** 重新定义变量
    #+BEGIN_SRC sh
    myUrl="http://zhaoyongtao.blog.51cto.com"
    echo ${myUrl}

    myUrl="http://blog.51cto.com"
    echo ${myUrl}
    #+END_SRC
*** 只读变量(readonly <var>)
    #+BEGIN_SRC sh
    #!/bin/bash

    myUrl="http://zhaoyongtao.blog.51cto.com/"
    readonly myUrl
    myUrl="http://blog.51cto.com/"
    # 提示错误：/bin/sh: NAME: This variable is read only.
    #+END_SRC
*** 删除变量(unset <var>)
    #+BEGIN_SRC sh
    var="variable"
    echo "var: ${var}"

    unset var
    echo "var: ${var}"
    #+END_SRC
*** 变量类型
    - local
      局部变量在脚本或命令中定义，仅在当前shell实例中有效，
      其他shell启动的程序不能访问局部变量。
    - env
      必要的时候shell脚本也可以定义环境变量。
    - shell
      shell变量是由shell程序设置的特殊变量。
    - *特殊变量*
      |----------+-----------------------------------|
      | 特殊变量 | 含义                              |
      |----------+-----------------------------------|
      | $$       | 当前进程pid                       |
      | $#       | 脚本/函数参数个数                 |
      | $0       | 脚本名                            |
      | $<n>     | 脚步/函数的第<n>个参数            |
      | $*       | 所有参数  "$*" 整体 "$1 $2 ..."   |
      | $@       | 所有参数，"$@" 分开 "$1" "$2" ... |
      | $?       | 上一命了的推出状态/函数返回值     |
      |----------+-----------------------------------|

*** 命令行参数($<n> $@ $*)
    #+BEGIN_SRC sh
    #!/bin/bash
    echo "\$*=" $*
    echo "\"\$*\"=" "$*"

    echo "\$@=" $@
    echo "\"\$@\"=" "$@"

    echo "print each param from \$*"
    for var in $*
    do
    echo "$var"
    done

    echo "print each param from \$@"
    for var in $@
    do
    echo "$var"
    done

    echo "print each param from \"\$*\""
    for var in "$*"
    do
    echo "$var"
    done


    echo "print each param from \"\$@\""
    for var in "$@"
    do
    echo "$var"
    done
    #+END_SRC
    执行结果
    $ bash ./test.sh "a" "b" "c" "d"
    $*= a b c d
    "$*"= a b c d
    $@= a b c d
    "$@"= a b c d
    print each param from $*
    a
    b
    c
    d
    print each param from $@
    a
    b
    c
    d
    print each param from "$*"
    a b c d
    print each param from "$@"
    a
    b
    c
    d
*** 退出状态($?)
    大部分命令执行成功会返回 0，失败返回 1
    # bash ./test.sh aaa bbb
    # echo $?
    0
*** 转义字符(echo -e)
    转义字符	含义
    \\	反斜杠
    \a	警报，响铃
    \b	退格（删除键）
    \f	换页(FF)，将当前位置移到下页开头
    \n	换行
    \r	回车
    \t	水平制表符（tab键） 
    \v	垂直制表符
    #+BEGIN_SRC sh
    #!/bin/bash
    a=10

    # -e 对 \n进行转义
    echo -e "Value of a is $a \n"
    # => Value of a is 10

    echo "Value of a is $a \n"
    # => Value of a is 10\n 
    #+END_SRC
*** 命令替换(`<command>`)
    #+BEGIN_SRC sh
    DATE=`date`
    echo "Date is ${DATE}"

    USERS=`who | wc -l`
    echo "Logged in user are ${USERS}"

    UP=`date;uptime`
    echo "Uptime is ${UP}"
    #+END_SRC
*** 变量替换(${<var>:[-|=|?|+]})
    变量替换可以根据变量的状态
    （是否为空、是否定义等）来改变它的值。

    形式	            说明
    *${var}*	        变量本来的值
    *${var:-word}*	    如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。
    *${var:=word}*	    如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。
    *${var:?message}*	如果变量 var 为空或已被删除(unset)，那么将消息 message
                        送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。
                        若此替换出现在Shell脚本中，那么脚本将停止运行。
    *${var:+word}*	    如果变量 var 被定义，那么返回 word，但不改变 var 的值。

    *${#param}*         param 长度
    *${param%word}*     从param尾部开始删除与word匹配的最小部分
    *${param%%word}*    最长部分
    *${param#word}*     开始 最小
    *${param##word}*    开始 最长
    
    #+BEGIN_SRC sh
    unset foo
    echo ${foo:-bar}
    # => bar
    foo=fud
    echo ${foo:-bar}
    # => fud

    foo=/usr/bin/X11/startx
    echo ${foo#*/}
    # => usr/bin/X11/startx
    echo ${foo##*/}
    # => startx

    bar=/usr/local/etc/local/networks
    echo ${bar%local*}
    # => /usr/local/etc/
    echo ${bar%%local*}
    # => /usr/
    #+END_SRC

    #+BEGIN_SRC sh
    #!/bin/bash

    echo ${var:-"Variable is not set"}
    echo "1 - Value of var is ${var}"

    echo ${var:="Variable is not set"}
    echo "2 - Value of var is ${var}"

    unset var
    echo ${var:+"This is default value"}
    echo "3 - Value of var is $var"

    var="Prefix"
    echo ${var:+"This is default value"}
    echo "4 - Value of var is $var"

    echo ${var:?"Print this message"}
    echo "5 - Value of var is ${var}"
    #+END_SRC
** 运算符
*** 算术运算符(+,-,*,/,%,**)
    #+BEGIN_SRC sh
    #!/bin/bash
    
    #低效，需要启动信shell
    #val=`expr 2 + 2`
    #高效
    val=$((2 + 2))
    echo ${val}

    val=$(expr 2 + 2)
    echo ${val}

    a=10
    b=20
    val=`expr $a + $b`
    echo "a + b : $val"

    val=`expr $a - $b`
    echo "a - b : $val"

    val=`expr $a \* $b`
    echo "a * b : $val"

    val=`expr $b / $a`
    echo "b / a : $val"

    val=`expr $b % $a`
    echo "b % a : $val"

    if [ $a == $b ]
    then
       echo "a is equal to b"
    fi

    if [ $a != $b ]
    then
       echo "a is not equal to b"
    fi
    #+END_SRC
*** 算术运算格式(let <var>=<exp>)
    (1) let  VAR=算术表达式 
    (2) VAR=$[算术表达式]
    (3) VAR=$((算术表达式))
    (4) VAR=$(expr $ARG1 $OP $ARG2)
*** 关系运算符
    关系运算符只支持数字，不支持字符串，除非字符串的值是数字。
    运算符	说明	举例
    -eq	检测两个数是否相等，相等返回 true。	[ $a -eq $b ] 返回 true。
    -ne	检测两个数是否相等，不相等返回 true。	[ $a -ne $b ] 返回 true。
    -gt	检测左边的数是否大于右边的，如果是，则返回 true。	[ $a -gt $b ] 返回 false。
    -lt	检测左边的数是否小于右边的，如果是，则返回 true。	[ $a -lt $b ] 返回 true。
    -ge	检测左边的数是否大等于右边的，如果是，则返回 true。	[ $a -ge $b ] 返回 false。
    -le	检测左边的数是否小于等于右边的，如果是，则返回 true。	[ $a -le $b ] 返回 true。
*** bool运算
    运算符	说明	举例
    !	非运算，表达式为 true 则返回 false，否则返回 true。	[ ! false ] 返回 true。
    -o	或运算，有一个表达式为 true 则返回 true。	[ $a -lt 20 -o $b -gt 100 ] 返回 true。
    -a	与运算，两个表达式都为 true 才返回 true。	[ $a -lt 20 -a $b -gt 100 ] 返回 false。
    #+BEGIN_SRC sh
    #!/bin/sh

    a=10
    b=20

    if [ $a -lt 100 -a $b -gt 15 ]
    then
       echo "$a -lt 100 -a $b -gt 15 : returns true"
    else
       echo "$a -lt 100 -a $b -gt 15 : returns false"
    fi
    #+END_SRC
*** string运算
    运算符	说明	举例
    =	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
    !=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
    -z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
    -n	检测字符串长度是否为0，不为0返回 true。	[ -z $a ] 返回 true。
    str	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。
*** 文件测试
    操作符	说明	举例
    -b file	检测文件是否是块设备文件，如果是，则返回 true。	[ -b $file ] 返回 false。
    -c file	检测文件是否是字符设备文件，如果是，则返回 true。	[ -b $file ] 返回 false。
    -d file	检测文件是否是目录，如果是，则返回 true。	[ -d $file ] 返回 false。
    *-f* file	检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	
            [ -f $file ] 返回 true。
    -g file	检测文件是否设置了 SGID 位，如果是，则返回 true。	[ -g $file ] 返回 false。
    -k file	检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。	[ -k $file ] 返回 false。
    -p file	检测文件是否是具名管道，如果是，则返回 true。	[ -p $file ] 返回 false。
    -u file	检测文件是否设置了 SUID 位，如果是，则返回 true。	[ -u $file ] 返回 false。
    -r file	检测文件是否可读，如果是，则返回 true。	[ -r $file ] 返回 true。
    -w file	检测文件是否可写，如果是，则返回 true。	[ -w $file ] 返回 true。
    -x file	检测文件是否可执行，如果是，则返回 true。	[ -x $file ] 返回 true。
    *-s* file	检测文件是否为空（文件大小是否大于0），不为空返回 true。	[ -s $file ] 返回 true。
    *-e* file	检测文件（包括目录）是否存在，如果是，则返回 true。	[ -e $file ] 返回 true。
*** 单引号
    str='this is a string'
    单引号字符串的限制：
    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
    单引号字串中不能出现单引号（对单引号使用转义符后也不行）。
*** 双引号
    your_name='qinjx'str="Hello, I know your are \"$your_name\"! \n"
    双引号的优点：
    *双引号里可以有变量*
    *双引号里可以出现转义字符*
** 字符串操作
    #+BEGIN_SRC sh
    #拼接
    your_name="qinjx"
    greeting="hello, "$your_name" !"
    greeting_1="hello, ${your_name} !"
    echo $greeting $greeting_1

    # 获取长度
    string="abcd"
    echo ${#string}
    # => 4

    # 提取子串
    string="alibaba is a great company"
    echo ${string:1:4}
    # => liba

    # 查找子串
    echo `expr index "$string" is`
    #+END_SRC
** 数组
    #+BEGIN_SRC sh
    # () + 空格 包含
    array1=(v1 v2 v3)

    # 单独分量
    array2[0]=v1
    array2[1]=v2
    array3[3]=v3

    # 读取
    echo ${array1[0]}
    # => v2

    # 读取所有
    echo ${array1[*]}
    echo ${array2[@]}

    # 数组长度
    echo ${#array2[*]}
    #+END_SRC
** if-elif-else-fi
   #+BEGIN_SRC sh
   # 3种格式
   # if ... fi
   # if ... else ... fi
   # if ... elif ... else ... fi

   # if [ <expression> ]; then
   # <statements>
   # fi
   # 注意：expression 和方括号([ ])之间必须有空格，否则会有语法错误。

   a=10
   b=20

   if [ $a == $b ]; then
       echo "a is equal to b"
   else
       echo "a is not equal to b"
   fi
   #+END_SRC
** case-esac
   #+BEGIN_SRC sh
   option="${1}"
   case ${option} in
   -f) FILE="${2}"
   echo "File name is $FILE"
   ;;
   -d) DIR="${2}"
   echo "Dir name is $DIR"
   ;;
   ,*)
   echo "`basename ${0}`:usage: [-f file] | [-d directory]"
   exit 1 # Command to come out of the program with status 1
   ;;
   esac
   #+END_SRC
** 循环
*** for <var> in <list>\n do\n <body>\n done\n
    #+BEGIN_SRC sh
    # for <var> in <list>
    # do
    # <body>
    # done

    for loop in 1 2 3
    do
        echo "item: $loop"
    done

    # 输出参数
    for arg in $*
    do
        echo "arg: $arg"
    done

    # 输出字符串
    for str in 'this is a string' "second str"
    do
        echo "item: ${str}"
    done
    #+END_SRC
*** while [ <expresion> ]; do\n <body>\n done\n
    #+BEGIN_SRC sh
    COUNTER=0
    while [ $COUNTER -lt 5 ]; do
        # COUNTER=`expr $COUNTER + 1`
        COUNTER=$(expr $COUNTER + 1)
        echo $COUNTER
    done

    # 读取键盘输入
    echo 'type <CTRL-D> to terminate'
    echo -n 'enter your most liked film: '
    while read FILM
    do
        echo "Yeah! great film the $FILM"
    done
    #+END_SRC
*** until [ <expresion> ]; do\n <body>\n done\n
    #+BEGIN_SRC sh
    a=0
    until [ ! $a -lt 10 ]
    do
        echo $a
        a=`expr $a + 1`
    done
    #+END_SRC
*** break/continue
** 函数(<fun_name>(){<body>})
   #+BEGIN_SRC sh
   funWithParam(){
       echo "The value of the first parameter is $1 !"
       echo "The value of the second parameter is $2 !"
       echo "The value of the tenth parameter is $10 !" # 当n>=10时，需要使用${n}
       echo "The value of the tenth parameter is ${10} !"
       echo "The value of the eleventh parameter is ${11} !"
       echo "The amount of the parameters is $# !"  # 参数个数
       echo "The string of the parameters is $* !"  # 传递给函数的所有参数
   }
   funWithParam 1 2 3 4 5 6 7 8 9 34 73
   #+END_SRC
** 调用外部脚本(exec/source/./<direct-call>)
* 经典案例
** here文档
*** 输出多行文本
   cat 输出多行到文件，不使用echo
   #+BEGIN_SRC sh
   FILE="aaa.txt"
   # cat 更加简洁，自然
   cat << END >> ${FILE}
   cat 1
   cat 2
   cat 3
   END

   # echo 多行代码冗余
   echo "echo 1" >> ${FILE}
   echo "echo 2" >> ${FILE}
   echo "echo 3" >> ${FILE}
   #+END_SRC
*** 与ed交互编辑文本

** 脚本echo内容颜色
   #+BEGIN_SRC sh
   echo -e "\033[字背景颜色；文字颜色m字符串\033[0m"
   echo -e "\033[41;36m something here \033[0m"
   echo -e "\033[31m 红色字 \033[0m"
   echo -e "\033[34m 黄色字 \033[0m"
   echo -e "\033[41;33m 红底黄字 \033[0m"
   echo -e "\033[41;37m 红底白字 \033[0m"
   echo -e "\033[30m 黑色字 \033[0m"
   echo -e "\033[31m 红色字 \033[0m"
   echo -e "\033[32m 绿色字 \033[0m"
   echo -e "\033[33m 黄色字 \033[0m"
   echo -e "\033[34m 蓝色字 \033[0m"
   echo -e "\033[35m 紫色字 \033[0m"
   echo -e "\033[36m 天蓝字 \033[0m"
   echo -e "\033[37m 白色字 \033[0m"

   # \033[0m 关闭所有属性
   # \033[1m 设置高亮度
   # \033[4m 下划线
   # \033[5m 闪烁
   # \033[7m 反显
   # \033[8m 消隐
   # \033[30m — \033[37m 设置前景色
   # \033[40m — \033[47m 设置背景色
   # \033[nA 光标上移n行
   # \033[nB 光标下移n行
   # \033[nC 光标右移n行
   # \033[nD 光标左移n行
   # \033[y;xH设置光标位置
   # \033[2J 清屏
   # \033[K 清除从光标到行尾的内容
   # \033[s 保存光标位置
   # \033[u 恢复光标位置
   # \033[?25l 隐藏光标
   # \033[?25h 显示光标
   #+END_SRC

* shell 编程
** 什么是shell
   - 用户与linux系统间接口程序
   - 功能强大
     + & 重定向
     + | 管道输出
     + $(...) 获取子进程输出
** 管道和重定向
   - > 覆盖重定向
     set -/+o noclobber 阻止/允许重定向
     2> ;重定向错误输出
     ;标准输出到killout.txt，错误输出到killer.txt
     $ kill -HUP 1234 >killout.txt 2>killerr.txt
     ; 标准和错误输出都输出到killouterr.txt
     $ kill -l 1234 >killouterr.txt 2>&1
     $ kill -l 1234 >/dev/null 2>&1
   - >> 追加重定向
   - < 重定向标准输入
   - | ;管道
     $ ps | sort | more
     $ ps -xo comm | sort | uniq | grep -v sh | more ;所有允许进程的名字
     
** 创建脚步
   #+BEGIN_SRC sh
   #!bin/sh

   for FILE in *; do
       if grep -q POSIX $FILE; then
           echo $FILE
       fi
   done

   exit 0
   #+END_SRC
** 变量
   VAR=123 #定义变量
   ${VAR}  #引用变量
   "${VAR}" => 123
   '${VAR}' => ${VAR}
   #+BEGIN_SRC sh
   VAR="Hi there"

   echo '${VAR}' now equals ${VAR}

   exit 0
   #+END_SRC
** 条件
*** test / [ <cond> ]
**** 字符串比较
     str1 = str2
     str1 != str2
     -n string 非空串真
     -z string 空串真
**** 算术比较
     exp1 -eq/-ne/-gt/-ge/-lt/le exp2
     !exp
**** 文件测试
     -d/e/f/g/r/s/u/w/x file 
     #+BEGIN_SRC sh
     if [ -f /bin/bash ]; then
         echo "file /bin/bash exists"
     fi
     #+END_SRC
** for <var> in <values>; do ... done
   for file in $(ls f*.sh); do ... done
** case
   #+BEGIN_SRC sh
   #!/bin/sh

   echo "Is it norning? Please answer yes or no"
   read timeofday

   case "$timeofday" in
       yes) echo "Good Morning";;
       no) echo "Good Afternoon";;
       ,*) echo "Sorry, answer not recognized";;
   esac

   # 合并模式
   case "$timeofday" in
       yes | y | Yes | YES) echo "Good Morning";;
       n* | N*) echo "Good Afternoon";;
       ,*) echo "Sorry, answer not recognized";;
   esac

   case "$timeofday" in
       [yY] | [yY][eE][sS])
           echo "Good Morning"
           echo "The second command"
           ;;
       [nN]*)
           echo "Good Afternoon"
           ;;
       ,*)
           echo "Sorry, answer not recognized"
           exit 1
           ;;
   esac


   exit 0
   #+END_SRC
** 命令列表 && ||
   #+BEGIN_SRC sh
   #!bin/sh

   touch file_one
   rm -f file_two

   if [ -f file_one ] && echo "hello" && [ -f file_two ] && echo " there"; then
       echo "in if"
   else
       echo "in else"
   fi

   rm -f file_one

   if [ -f file_one ] || echo "hello" || echo " there"; then
       echo "in if"
   else
       echo "in else"
   fi

   # 技巧
   [ -f file_one ] && echo "file_one exists" || echo "file_one not exists"

   # 语句块技巧
   get_confirm && {
       grep -v "$cdcatnum" $tracks_file > $temp_file
       cat $temp_file > $tracks_file
       echo
       add_record_tracks
   }
   exit 0
   #+END_SRC
** 函数
   #+BEGIN_SRC sh
   # func_name() { ... }
   # $* $@ $# $1 $2 ... 被替换成函数参数
   foo(){
       echo "function foo is excuting"
   }

   echo 'script starting'
   foo
   echo 'script ended'

   # 局部变量
   sample_text="global var"
   bar(){
       local sample_text="local var"
       echo "bar is run"
       echo "$sample_text"
   #    return 0
   }

   bar

   # yes_or_no()

   yes_or_no(){
       echo "is your name $* ?"
       while true; do
           echo -n "Enter yes or no: "
           read x
           case "${x}" in
               y | yes) return 0;;
               n | no) return 1;;
               ,*) echo "answer yes or no"
           esac
       done
   }

   echo "original parameters are $*"
   if yes_or_no "$1"; then
       echo "Hi $1, nice name"
   else
       echo "Never mind"
   fi

   exit 0
   #+END_SRC
** 命令
    - *break;*
    - *:* 空命令，内置命令比true快
      #等价 while true; do
      while : ;do
      ...
      done

      : ${var:=value} #条件设置
    - *continue;*
    - *.* 在当前shell中执行，不起子shell
      . ./shell_script ;相当于include

      设置不同的环境变量
      #+BEGIN_SRC sh
      #!/bin/sh
      # classic_set.sh
      version=classic
      PATH+=/usr/local/old_bin
      PS1="classic>"

      #======================
      #!/bin/sh
      # lastest
      PATH+=/usr/local/new_bin
      PS1="latest>"

      # 设置老版本环境
      # . ./classic_set
      #  设置新版本环境
      # . ./latest_set
      #+END_SRC
    - *echo*
      echo -n "string to output"   ; 去掉换行符
      echo -e "string to output\c" ; 去掉换行符
    - *eval* 对参数求值
      foo=10
      x=foo
      y='$'$x
      echo $y
      eval z='$'$x
      echo $z
    - *exec* 
      # 替换当前shell
      exec wall "Thanks for all the fish"
      # 修改但钱文件描述符
      exec 3< afile
    - *exit <0~125>* 脚本返回值
      [ -f .profile ] && exit 0 || exit 1
    - *export* 变量导出
      set -a / set -allexport ;导出所有变量
      # exp2.sh
      #!/bin/sh
      echo "${foo}"
      echo "${bar}"
      # exp1.sh
      #!/bin/sh
      foo="the first"
      exprot bar="the second"
      # 单独开子进程
      exp2.sh
      # 不单独开子进程
      #. ./exp2.sh
    - *expr /`expr ...`/ $(expr ...)/ $((...))* 表达式求值
      expr1 |/&/=/>/>=/</<=/!=/+/-/*///% expr2
    - *printf*
      \"/a/b/c/f/n/r/t/v/ooo/xHH
      $ printf "%s\n" hello
    - *return* 函数返回
    - *set* 
      # 获取参数列表值
      set $(date)
      echo The month is $2
      # 跟踪显示执行的命令
      set -x
    - *unset* 删除变量
    - *shift* 左移一位
      while [ "$1" != """]; do
          echo "$1"
          shift
      done
    - *trap <command/-/''> <signal>* 接收信号
      trap ;列出当前信号和行动清单
      
      trap 'rm -f /tmp/my_tmp_file_$$' INT
      echo "creating file /tmp/my_tmp_file$$"
      date > /tmp/my_tmp_file_$$
      echo "pres interrupt (CTRL-C) to interupt ..."
      while [ -f /tmp/my_tmp_file_$$ ]; do
          echo "File exists"
          sleep 1
      done
      echo the file no longer exists
      
      trap INT
    - *find* 文件搜索
      | options          | description                        |
      |------------------+------------------------------------|
      | -depth           | 在查看目录本身之前先搜索目录的内容 |
      | -follow          | 跟随符号连接                       |
      | -maxdepths N     | 最多搜索N层目录                    |
      | -mount           | 不搜索挂在目录                     |
      |------------------+------------------------------------|
      | testing          | ok:do faile:next-file              |
      |------------------+------------------------------------|
      | -atime N         | N天前被访问                        |
      | -mtime N         | N天前被修改                        |
      | -name parrern    | 文件名                             |
      | -newer otherfile | 文件比otherfile文件要新            |
      | -type c/d/f      | 字符/目录/普通文件                 |
      | -user username   | 拥有者为username                   |
      |------------------+------------------------------------|
      | logic operate    | <test1> -o \(<test2> -a <test3>\)  |
      |------------------+------------------------------------|
      | !/-not           | 取反                               |
      | -a/-and          | and                                |
      | -o/-or           | or                                 |
      |------------------+------------------------------------|
      | operator         | {}表示当前文件                       |
      |------------------+------------------------------------|
      | -exec <cmd>      | 执行一条命令                       |
      | -ok  <cmd>       | 提升用户确认后执行命令             |
      | -print           | 打印文件名                         |
      | -ls              | ls-dils                            |
      |                  |                                    |
      find [paths] [options] [tests] [actions]
      find / -name test -print ; 搜索test文件，包括挂载盘
      find / -mount -name test -print ; 搜索test文件，不包括包括挂载盘
      find / \( -newer aaa.c -o -name "_*" \) -print
      find . -type f -exec ls -l {} \;
    - *grep* Gernral Regular Expression Parser
      正则表达式解析器
      grep [options] PATTERN [FILES]
      | options | description                  |
      |---------+------------------------------|
      | -c      | 输出匹配行的数目，不是行内容 |
      | -E      | 启用扩展模式                 |
      | -h      | 取消普通前缀                 |
      | -i      | 忽略大小写                   |
      | -l      | 只输出文件名                 |
      | -v      | 取反匹配模式                 |
      |         |                              | 
      
      grep "#include" srs_app_http_api.cpp    ; #include <...> ...
      grep -c "#include" srs_app_http_api.cpp ;22 #include行数量
      grep -cv "#include" srs_app_http_api.cpp ; 1450 非#include行数量
      
      | 正则表达式 | description        | sample                        |
      | ^          | 一行的开头         | grep e^ aaa.txt ; 以e开头     |
      | $          | 一行的结尾         | grep e$ aaa.txt ; 以e结尾     |
      | .          | 任意单个字符       | grep Th.[ [:space:]] ;Th?单词 |
      | [...]      | 包含字符范围       |                               |
      | [^...]     | 字符范围取反       |                               |
      | [:alnum:]  | 字母+数字          |                               |
      | [:alpha:]  | 字母               |                               |
      | [:ascii:]  | ASCII              |                               |
      | [:black:]  | 空格或制表符       |                               |
      | [:cntrl:]  | 控制符             |                               |
      | [:digit:]  | 数字               |                               |
      | [:graph:]  | 非控制非空格字符   |                               |
      | [:lower:]  | 小写字母           |                               |
      | [:print:]  | 可打印字符         |                               |
      | [:punct:]  | 标点符号           |                               |
      | [:space:]  | 空白符包括垂直制表 |                               |
      | [:upper:]  | 大写字母           |                               |
      | [:xdigit:] | 16进制数字         |                               |
      |------------+--------------------+-------------------------------|
      | -E         |                    |                               |
      |------------+--------------------+-------------------------------|
      | ?          | 最多匹配一次       |                               |
      | *          | 必须匹配0+次       |                               |
      | +          | 必须匹配1+次       |                               |
      | {n}        | 必须匹配n次        |                               |
      | {n,}       | 必须匹配n+次       |                               |
      | {n,m}      | 匹配n~m次          |                               |

      grep e$ word2.txt ; 以e结尾的行
      grep a[ [:blank:] ] words2.txt ; 以a结尾的单纯
      grep Th.[ [:space:] ] words2.txt ;
      grep -E [a-z]\{10\} words2.txt ; 10字符串的小写字母单词
*** 命令执行
**** $(cmd)
    $(cmd) / `cmd`
    $(who)
    xargs
    set
    
**** expr/$(()) 算术扩展 
     expr 调用新shell，慢
     x=0
     while [ "$x" -ne 10 ]; do
         echio $x
         x=$(($x + 1))
     done

     字符串查找
     str="aaa bbb ccc ddd"
     echo `expr index "$str" "bb"` => 5
     [ [ "$str" =~ "bb" ]] && echo "find ok"

**** ${} 参数扩展
     i=aaa
     b=${i}_tmp
     zpath="/usr/local/etc/local/networks"
     | 扩展              | desc                   | sample                   | result              |
     |-------------------+------------------------+--------------------------+---------------------|
     | ${param:-default} | param空则设置为default | ${var:-xxx}              | xxx                 |
     | ${#param}         | 给出param长度          | ${#zpath}                | 29                  |
     | ${param%word}     | 删除尾部最小配部分     | echo "${zpath%/local*}"  | /usr/local/etc      |
     | ${param%%word}    | 删除尾部最大配部分     | echo "${zpath%%/local*}" | /usr                |
     | ${param#word}     | 删除头部最小配部分     | echo "${zpath#*/local}"  | /etc/local/networks |
     | ${param##word}    | 删除头部最大配部分     | echo "${zpath##*/local}" | /networks           |
     |                   |                        |                          |                     |

     for image in *.gif; do
         cjpeg $image > ${image%%gif}jpg  ; aaa.gif => aaa.jpg
     done
** here 文档
   支持输出大量文本，避免echo
   #!/bin/sh
   cat <<!FUNKY! > here.txt
   hello
   this is a here
   document
   !FUNKY!
** 脚步调试
   |----------------+------------------+----------------------------|
   | 命令行选项     | set 选项         | description                |
   |----------------+------------------+----------------------------|
   | sh -n <script> | set -o noexecute | 只检查不执行               |
   |                | set -n           |                            |
   | sh -v <script> | set -o verbose   | 执行命令前回显             |
   |                | set -v           |                            |
   | sh -x <script> | set -o xtrace    | 执行命令后回显             |
   |                | set -x           | 开启                         |
   |                | set +x           | 关闭                         |
   | sh -u <script> | set -o nounset   | 如果使用了未定义变量就出错 |
   |                | set -u           |                            |
   |----------------+------------------+----------------------------|


* sed
主要用于脚本修改配置文件

sed [选项] [动作]

选项与参数：
-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
-e ：直接在命令列模式上进行 sed 的动作编辑；
-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；
-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
-i ：直接修改读取的文件内容，而不是输出到终端。

function：
a ：新增行， a 的后面可以是字串，而这些字串会在新的一行出现(目前的下一行)
c ：取代行， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行
d ：删除行，因为是删除，所以 d 后面通常不接任何参数，直接删除地址表示的行；
i ：插入行， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行
s ：替换，可以直接进行替换的工作,通常这个 s 的动作可以搭配正规表示法，例如 1,20s/old/new/g 一般是替换符合条件的字符串而不是整行

一般function的前面会有一个地址的限制，例如 [地址]function，表示我们的动作要操作的行。下面我们通过具体的例子直观的看看sed的使用方法。

删除行

//test.txt 内容如下
11 aa
22 bb
33 cc
23 dd
55 2e

sed '1,2d' test.xx

输出：

33 cc
23 dd
55 2e

其中1,2d中的d表示删除，而d前面的表示删除的行的地址，而1,2表示一个地址范围，也就是删除第1行和第2行。地址范围的表示一般是  m,n 表示对m和n行之间的所有行进行操作，也包含第m行和第n行。sed的地址寻址中可以使用$表示最后一行，例如 m,$ 表示对m行以及其后面的所有行进行操作，包括最后一样。m,$d就是删除m行以及其后面的所有行内容。当然我们还可以对某一行进行操作，例如2d表示仅仅删除第2行。除了使用数字范围 m,n 表示多行区间，以及m表示单行以外，我们还可以使用正则表达式选出符合条件的行，并对这些行进行操作，同样的是上面的文件：

sed '/2/d' test.txt

输出：

11 aa
33 cc

上面的命令中　/2/ 是一个正则表达式，在sed中正则表达式是写在 /.../ 两个斜杠中间的，这个正则的意思是寻找所有包含2的行，执行相应的操作，也就是删除所有包含2的行，如果我们只想删除以2开头的行呢，只需要修改一下正则表达式就可以了：

sed '/^2/d' test.txt

输出：

11 aa
33 cc
55 2e

新增行

sed '1a hello world' test.txt

输出：

11 aa
hello world
22 bb
33 cc
23 dd
55 2e

其中a命令表示在指定行的后面附加一行，1a则是在第一行的后面添加一行，添加的内容就是a后面的内容，如果a的前面没有地址限定则在所有行的后面都会添加指定的字符串

sed '1i hello world' test.txt

输出：

hello world
11 aa
22 bb
33 cc
23 dd
55 2e

命令i表示在指定的行的前面插入一行，插入的内容为其后面的字符串

替换行

sed '1c hello world' test.txt

输出：

hello world
22 bb
33 cc
23 dd
55 2e

命令c会替换指定的行的所有内容，替换成其后面的字符串，所有的新增，删除，替换行，这些命令前面的地址修饰都可以指定地址空间，也都可以使用正则表达式，命令会应用在选出的符合地址条件的所有行上面，例如：

sed '/^2/c hello world' test.txt

输出：

11 aa
hello world
33 cc
hello world
55 2e

替换以2开头的行，其内容是c命令后面的字符串

替换部分字符串而不是整行

sed中除了上面的命令是针对整行进行操作的之外，还提供一个替换命令，该命令对某一行中的部分字符串进行操作，下面举一个简单的例子，还是同样的文本内容，执行下面的命令：

sed 's/aa/AA/' test.txt

输出：

11 AA
22 bb
33 cc
23 dd
55 2e

我们这里说的就是s命令，执行的结果是我们文件中的 aa 被替换成 AA ，我们看一下s命令后面接的是3个斜杠分隔的两串字符串，其含义是   s/待替换的字符串/新字符串/ 也就是说使用后面的 AA 替换文件中出现的前面的 aa 。实际上这里的替换仅仅替换每一行遇到的第一个aa，我们修改一下文件的内容：

//test.txt
11 aa
22 bb
33 cc
23 dd
55 2e
66 aaff ccaa
zz ggaa

sed 's/aa/AA/' test.txt

输出：

11 AA
22 bb
33 cc
23 dd
55 2e
66 AAff ccaa
zz ggAA

可以看到第6行的ccaa中的aa是没有被替换的，也就是说此时仅仅替换了每一行搜索到的第一个aa字符串进行操作，那么如果要对一行里面的所有的符合条件的字符串都做替换操作呢，我们可以使用参数g，例如修改命令如下：

sed 's/aa/AA/g' test.txt

输出：

11 AA
22 bb
33 cc
23 dd
55 2e
66 AAff ccAA
zz ggAA

在最后一个斜杠后面加上g选项之后，表示进行全局替换，也就是说一行中所有符合条件的旧字符串都会被替换成新字符串，而不仅仅是第一个。与其他针对行的操作一样，s命令也可以进行地址选择，其地址使用方法与我们之前的一样，也就是在s的前面加上地址空间限定，例如：

sed '1s/aa/AA/g' test.txt

输出：

11 AA
22 bb
33 cc
23 dd
55 2e
66 aaff ccaa
zz ggaa

可以看到仅仅对第一行进行了替换操作，其他的地址限定方法同样也是可以使用的，我们可以使用m,n的限定，例如：

sed '5,$s/aa/AA/g' test.txt

输出：

11 aa
22 bb
33 cc
23 dd
55 2e
66 AAff ccAA
zz ggAA

表示对第5行直到文件末尾的所有行进行搜索替换操作，同样s命令的地址限定也支持使用正则表达式限定符合条件的行，然后在这些行中进行字符串的搜索替换操作，例如：

sed '/^[0-9]/s/aa/AA/g' test.txt

输出：

11 AA
22 bb
33 cc
23 dd
55 2e
66 AAff ccAA
zz ggaa

我们在s命令前面添加了 /^[0-9]/ 这个修饰，该正则表达式表示对所有以数字开头的行，执行s操作

搜索并输出行内容

sed还提供一个p命令用于搜索符合条件的行，并输出该行的内容，而不做其他的任何修改，例如：

//test.txt
11 aa
22 bb
33 cc
23 dd

sed '2p' test.txt

输出：

11 aa
22 bb
22 bb
33 cc
23 dd

可以看到第二行被输出来了，但是sed好像将文件的所有内容输出了一遍，而第2行则多输出了一次，实际上sed默认情况下是会将所有标准输入的数据又重新输出到标准输出的，我们可以加上 -n 选项让sed仅仅是输出经过处理之后的那些行，而不是输出之前从标准输入中获取到的所有行内容，例如：

sed -n '2p' test.txt

输出：

22 bb

这样仅仅会输出p命令的处理结果了，-n 选项一般是与p命令联合使用的，其他的增加，删除，替换行的命令是不需要 -n 选项的

将修改应用到文件中

我们之前做的所有实验，实际上都没有修改test.txt文件的内容，也就是说我们看到的修改结果仅仅输出到控制台上，而文件test.txt的内容是没有修改的，我们可以使用 -i 选项告诉sed直接修改文件的内容，而不是将修改结果输出到终端上，例如：

sed -i '2d' test.txt

命令运行之后，我们发现test.txt的第2行没有了

sed正则中的元字符

我们知道sed中的命令前面可以使用地址范围进行限制，表示对文件的某些符合条件的行执行相应的操作，其中我们可以使用正则表达式选出要操作的行，而sed中正则的语法可能与我们其他命令的正则语法有一些不同，这里我们有必要列出sed中常用的正则元字符：

$ 表示行尾 
^ 表示行首
[a-z0-9]表示字符范围
[^]表示除了字符集中的字符以外的字符

sed的正则中  \(\)  和 \{m,n\} 需要转义

 . 表示任意字符  
 * 表示零个或者多个  
 \+ 一次或多次　　
 \? 零次或一次    
 \| 表示或语法
