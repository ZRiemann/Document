#+STARTUP: indent
* document
  https://docs.python.org/zh-cn/3/tutorial/controlflow.html
** [[file:samples/c4_controlflow.py][控制流程]]
** 5. [[file:samples/c5_datastrucures.py][数据结构]]
** 6. [[file:samples/c6_modules.py][模块]]
   #+BEGIN_SRC python
   # 包引入
   import fibo # 引入整个模块,不建议
   import fibo as fib # 包别名,可用于缩短包名
   from fibo import fib as fibonacci # 指定输出,建议方案
   from fibo import * # 不要这么写, 会覆盖以定义的对象
   fibo.reload() # 测试时重新加载被修改的模块

   # 以脚本方式执行模块
   # 在文件尾部添加如下代码
   if __name__ == "__main__":
       import sys
       fib(int(sys.arg[1]))
   #+END_SRC
*** 6.1.2 模块搜索路径
    1. 内置模块
    2. sys.path
       1. 当前目录
       2. PYTHONPATH
       3. 安装默认设置
*** 6.4 包
#+BEGIN_SRC python
import sound.effects.echo       # 包引入
from sound.efects import echo   # 缩短包前缀
from sound.effects.echo import echofilter # 直接引入函数

# __all__
from sound.effects import *
# sound/effects/__init_.py
__all__ = ["echo", "surround", "reverse"]

# 子包参考
from . import echo
from .. import formats
from ..filters import equalizer

#+END_SRC
目录结构:
sound/                          Top-level package
      __init__.py               Initialize the sound package; 指明sound作为python包,可以空
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
** 7. [[file:samples/c5_inputoutput.py][输入输出]]
** 8. [[file:samples/c8_errors.py][异常处理]]
** 9. [[file:samples/c9_classes.py][类]]
** 10. [[file:samples/c10_stdlib.py][标准库简介]]
** extending(扩展)
*** extend(python调用C/C++)
*** embedding(C/C++嵌入python)
#+BEGIN_SRC C
Py_Initialize();

PyRun_SimpleString();
/*
2. PyRun_SimpleFile();
3. call the lower-level operations described in the previous chapters 
to construct and use Python objects.
*/
#+END_SRC

#+BEGIN_SRC C
#define PY_SSIZE_T_CLEAN
#include <Python.h>

int
main(int argc, char *argv[])
{
    wchar_t *program = Py_DecodeLocale(argv[0], NULL);
    if (program == NULL) {
        fprintf(stderr, "Fatal error: cannot decode argv[0]\n");
        exit(1);
    }
    Py_SetProgramName(program);  /* optional but recommended */
    Py_Initialize();
    PyRun_SimpleString("from time import time,ctime\n"
                       "print('Today is', ctime(time()))\n");
    if (Py_FinalizeEx() < 0) {
        exit(120);
    }
    PyMem_RawFree(program);
    return 0;
}
#+END_SRC

python3-config --cflags
-I/usr/include/python3.6m -I/usr/include/python3.6m  
-Wno-unused-result -Wsign-compare 
-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG 
-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv

python3-config --ldflags
-L/usr/lib64 -lpython3.6m -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic
