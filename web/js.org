#+STARTUP: indent
* js全栈
  https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000
  https://developer.mozilla.org/en-US/docs/Web/JavaScript
** 快速入门
   一般放在html <head>中
   <head><script>alert('Hello, world');</script></head>
   放到.js文件中
   <head><script src="/static/js/abc.js"></script></head>
   *调试* chrom 开发者工具-> console
*** 基本语法
    *不强制语句结尾加;* 建议一定要加;
    *{}包含语句块* 支持语句块嵌套
    *// 行注释* 块注释同C
    *区分大小写* 
*** 数据类型
    - *Number* 不区分整数、浮点
      123; 0.456; 1.2345e3; 
      NaN; // Not a Number
      Infinity; // 无穷大
    - *字符串* "abc"/'abc'
      var str = 'I\'m \"OK\"!'; // \ 转义
      var A='\x41' ; // A
      var multi_line = `line 1
      line 2
      line3`;
      var append = str + 'append' + multi_line; // 字符串拼接
      str.length; // 获取字符串长度

    - *boolean* true;false;2>1;true && true;true || false;! true;
      false == 0; // true
      false === 0; // false, 不进行自动转换
      NaN === NaN; // false
      isNaN(NaN); // true
      1 / 3 === (1 - 2 / 3); // false
      Math.abs(1 / 3 - (1 - 2 / 3)) < 0.00001; //true
    - *null/undefined*
    - *数组*
      var arr = [1, 2, 3.14, 'Hello', null, true];
      arr[idx];
      arr.slice(0,3); // [1, 2, 3.14]
    - *对象* key-value 无序集合
      var person = {name:'bob', age:20, tags:['aaa', 'bbb','ccc']};
      person.name;
    - *变量* var <key>=<value>;
    - *strict* 'use strict'; 强制变量声明var
    - *Map/Set*
      var m = new map();
      m.set('aaa', 123);
      m.get('aaa');
      var s = new set();
      for(var x of m){console.log(x);}
*** 控制结构
    - if(){}else if(){}else{}
      var height = parseFloat(prompt("aaa")); // 提示获取输入
    - var i; for(i=1; i<=1000; ++i){x = x + i;}
      var arr = ['apple', 'google', 'microsoft'];
      for(i=0; i<var.length; i++){console.log(var[i]);}
      for(var key in o){console.log(key);}
      *while(){}*
      *do{}while();
** 函数
    *function abs(x){if(x>=0){return x;}return -x;}*
    *var abs = function(x){...};*
    *typeof <var>* 
    var x = 1;
    typeof x; // 'number'
    *arguments* 参数数组
    *function foo(a, b, ...rest){...}*
    *变量作用域* 同C
    *名字空间* 全局对象window；
    var nsapp={};
    nsapp.foo = function(){return 'foo';}
    *let局部作用域*
    *const常量*
    *解构赋值* var [x,y,z] = ['hello', 123, 3.14];
    var x=1,y=2;
    [x,y]=[y,x]
    var {hostname:domain, pathname:path}=location;
    function buildDate({year, month, day, hour=0, minute=0, second=0}) {
    return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);
    }
    buildDate({ year: 2017, month: 1, day: 1 });
    *方法(成员函数)*
    var person={
    name:'aaa',
    birth:1990,
    age:function(){
      var y = new Date().getFullYear();
      return y - this.birth;
    },
    age1:function(){
      var that = this;
      function getAgeFromBirth(){
        var y = new Date().getFullYear();
        return y - that.birth;
      }
      return getAgeFromBirth();
    },
    age2:getAgr()
    };
    function getAge(){this.birth;}
    getAge.apply(person,[]);
    getAge.call(person);
    Math.max.call(null,3,5,4);
    Math.max.apply(null, [3,5,4]);
** 高阶函数
    函数作为参数，函数参数称为高阶函数；
    function add(x,y,f){
      return f(x) + f(y); // f为高阶函数
    }
    - *map/reduce*
      function pow(x) {
        return x * x;
      }
      var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
      console.log(results);
      arr.reduce(function (x, y) {
      return x + y;
      }); // 45
    - *filter*
      arr.filter(function (x){return x % 2 !== 0;});
      arr.filter(function (element, index, self){
        ...
        return true;
      });
    - *sort*
      arr.sort(function (x,y){...});
    - *闭包*
      把函数作为结果返回值；
      function lazy_sum(arr) {
        var sum = function () {
          return arr.reduce(function (x, y) {
            return x + y;
          });
        }
        return sum;
      }
      var f = lazy_sum([1,2,3,4,5]);
      f();
    - *箭头函数* 修复this问题
      fn = x => x * x
      function fn(x){return x * x;}
      var obj = {
        ...,
        getAge:function(){
          var fn = () => new Date().getFullYear - this.birth;
        }
      }
    - *generator* 生成器
      function* foo(x){
        yield x + 1;
        yield x + 2;
        return x + 3;
      }
      function fib(max) {
        var
          t,
          a = 0,
          b = 1,
        arr = [0, 1];
        while (arr.length < max) {
          [a, b] = [b, a + b];
          arr.push(b);
        }
      return arr;
      }

      function* fib(max) {
        var
        t,
        a = 0,
        b = 1,
        n = 0;
        while (n < max) {
        yield a; // 重点
        [a, b] = [b, a + b];
        n ++;
        }
      return;
      }
      var f = fib(5);
      f.next();
      for(var x of fib(10)){console.log(x);)
** 标准对象
    typeof 123; // 'number'
    typeof NaN; // 'number'
    typeof 'str'; // 'string'
    typeof true; // 'boolean'
    typeof undefined; // 'undefined'
    typeof Math.abs; // 'function'
    typeof null; // 'object'
    typeof []; // 'object'
    typeof {}; // 'object'
    - *包装对象*
      typeof new Number(123); // object
      var n = Number('123'); // parseInt()
      typeof n; // number
      arr.isArray(); // 判断是否数组
      123..toString();
      (123).toString();
    - *Date*
      var now = new Data();
      var d = new Date(2015, 5, 19, 20, 15, 30, 123);
      var d = Date.parse('2015-06-24T19:49:22.875+08:00');
      var d = new Date(1435146562875);
      d.toLocalString();
      d.toUTCString();
    - *RegExp*
      | key           | description    | sample                  |
      |---------------+----------------+-------------------------|
      | \d            | 匹配一个数字   | 00\d ->007 ok; 00A fail |
      | \w            | 一个字母或数字 |                         |
      | .             | 任意一个字符   |                         |
      | *             | 0~n            |                         |
      | +             | 1~n            |                         |
      | ?             | 0-1            |                         |
      | {n}           | nnnnn          |                         |
      | {n,m}         | n~m字符        |                         |
      | \s            | 空白符         | \d{3}\s+\d{3,8}         |
      | [0-9a-zA-Z\_] |                |                         |
      | ^             | 开头           |                         |
      | $             | 结尾           |                         |
      |---------------+----------------+-------------------------|
      
      /表达式/
      new RegExp('表达式')
      var re = /^\d{3}\-\d{3,8}$/;
      *test 测试*
      re.test('010-12345');
      'a b   c'.split(' '); // a,b, , ,c
      'a b   c'.split(/\s+/); // a,b,c
      'a,b;; c  d'.split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd']
      *exec + () 分组，提取字符串*
      var re = /^(\d{3})-(\d{3,8})$/;
      re.exec('010-12345'); // ['010-12345', '010', '12345']
      re.exec('010 12345'); // null
      *非贪婪匹配*
      var re = /^(\d+)(0*)$/;
      re.exec('102300'); // ['102300', '102300', '']
      var re = /^(\d+?)(0*)$/;
      re.exec('102300'); // ['102300', '1023', '00']
      */^(\d+)/g* g 表示全局匹配
      var r2 = new RegExp('test','g');
    - *json*
      JSON.parse();
      toJSON:function(){...}
** 面向对象编程
    - *prototype*
      var robot = {
        name:'robot',
        height:1.6,
        run:function(){console.log(this.name + ' is running');}
      };
      xiaoming.__proto__ = robot;
      #+BEGIN_SRC javascript
      // 原型对象:
      var Student = {
          name: 'Robot',
          height: 1.2,
          run: function () {
              console.log(this.name + ' is running...');
          }
      };

      function createStudent(name) {
          // 基于Student原型创建一个新对象:
          var s = Object.create(Student);
          // 初始化新对象:
          s.name = name;
          return s;
      }

      var xiaoming = createStudent('小明');
      xiaoming.run(); // 小明 is running...
      xiaoming.__proto__ === Student; // true

      function Student(name) {
          this.name = name;
          this.hello = function () {
              alert('Hello, ' + this.name + '!');
          }
      }
      var xiaoming = new Student('小明');
      xiaoming.name; // '小明'
      xiaoming.hello(); // Hello, 小明!


      // 原型继承
      // PrimaryStudent构造函数:
      function PrimaryStudent(props) {
          Student.call(this, props);
          this.grade = props.grade || 1;
      }

      // 空函数F:
      function F() {
      }

      // 把F的原型指向Student.prototype:
      F.prototype = Student.prototype;

      // 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:
      PrimaryStudent.prototype = new F();

      // 把PrimaryStudent原型的构造函数修复为PrimaryStudent:
      PrimaryStudent.prototype.constructor = PrimaryStudent;

      // 继续在PrimaryStudent原型（就是new F()对象）上定义方法：
      PrimaryStudent.prototype.getGrade = function () {
          return this.grade;
      };

      // 创建xiaoming:
      var xiaoming = new PrimaryStudent({
          name: '小明',
          grade: 2
      });
      xiaoming.name; // '小明'
      xiaoming.grade; // 2

      // 验证原型:
      xiaoming.__proto__ === PrimaryStudent.prototype; // true
      xiaoming.__proto__.__proto__ === Student.prototype; // true

      // 验证继承关系:
      xiaoming instanceof PrimaryStudent; // true
      xiaoming instanceof Student; // true

      // class 继承
      class Student {
          constructor(name) {
              this.name = name;
          }

          hello() {
              alert('Hello, ' + this.name + '!');
          }
      }

      var xiaoming = new Student('小明');
      xiaoming.hello();

      class PrimaryStudent extends Student {
          constructor(name, grade) {
              super(name); // 记得用super调用父类的构造方法!
              this.grade = grade;
          }

          myGrade() {
              alert('I am at grade ' + this.grade);
          }
      }
      #+END_SRC
      
** 浏览器
   - *window*
     充当全局作用于，同时表示浏览器窗口；
     *innerWidth/Height*
   - *navigator*
     *appName* 浏览器名称
   - *screen* 屏幕信息
   - *location* 当前页的URL
   - *document* 当前页面
     document.cookie;
   - *history* 
** Node.js
   后端web
   - *npm -v* 
   - *mode.exports = <name>* // 导出模块
   - *var greet = require('./hello');* // 引入模块
*** 基本模块
    - *global*
      global.console;
    - *process* global.process;
**** fs 负责文件读写
     $.getJSON('http://example.com/ajax', function (data){})
     var fs = require('fs');
     fs.readFile('sample.txt', 'utf-8', function(err, data){
       if(err){console.log(err);}else{console.log(data);}
     });
     fs.stat('sample.txt', function(err, stat){});
**** stream
     var rs = fs.createReadStream('sample.txt', 'utf-8');
     rs.on('data', function(chunk){...});
     rs.on('end',function(){...});
**** pipe
     rs.pipe(ws);
     readable.pipe(writable, {end:false});
*** Web开发
**** koa     
* MDN
  https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript
  - javascript root
    -
** What is JavaScript
*** A hight-level definition
 - API
   - 浏览器API
     - DOM API
     - Geolocation API
     - Canvas/WebGL API
     - HTMLMediaElement/WebRTC API
   - 第三方API
     - Twitter API
     - Google Maps API
 - Browser security
 - Server/Client side
   - client
     javascript
   - server
     php,python,ruby,javascript(node.js)
 - How do you add JavaScript to your page?
   - internal javascript
     #+BEGIN_SRC html
     <head>
       <script>
         // javascript codes
       </script>
     </head>
     #+END_SRC
   - enternal javascript
     1. script.js
     2. index.html -> <script src="script.js"></script>
   - inline javaScript handler
     #+BEGIN_SRC html
     function createParagraph() {
       let para = document.createElement('p');
       para.textContent = 'You clicked the button!';
       document.body.appendChild(para);
     }
     <button onclick="createParagraph()">Click me!</button>
     #+END_SRC
*** Troubleshooting javascript
- Types of error
  - syntax error
  - logic error
- An erronous example
- Fixing syntax errors
*** Variables - Storing the information you need
- Declaring a variable
  - var/let
    var myName;
    let myAge;
  - var type
    - number
    - string
    - boolean
    - array
      var myNameArray = ['Chris', 'bob', 'Jim'];
    - Object
      var dog = {name:'Spot', bleed:'Dalmatian'};
  - typeof <var-name>
*** 数组
** 面向对象
   constructor.prototype
   Object.create(obj);

** JSON
   - parse() ; string -> json
   - stringify(); json -> strong();
     #+BEGIN_SRC javascript
     var myJson = {'name': 'chris', 'age': 38};
     var myString = JSON.stringify(myJson);
     #+END_SRC
** Web API
 - Browser API
   - DOM
     - window
       - innerWidth/innerHeight
       - 操作载入窗口的文档
       - 存储客户端上文档的特殊数据
       - 为当前窗口绑定event handler
         - window.onresize = function(){...}
     - navigator
       navigator表示浏览器存在于web上的状态和标识（即用户代理）
       用户摄像头的地理信息、用户偏爱的语言、多媒体流等等。
     - document
       在浏览器中用DOM表示,是载入窗口的实际页面
       - node
         - element node
         - root node
         - child node
         - descendant node
         - parent node
         - sibling node
         - text node
       - APIs
         - document.querySelector();  匹配第一个
         - document.querySelectorAll(); 匹配所有存储到array中
         - document.createElement(); 创建元素
         - <node>.appendChild(<node>); 追加元素
         - document.createTextNode('some text') ;
         - <node>.cloneNode(); 创建副本
         - <node>.removeChild(<child-node>); 删除子节点

         - document.stylesheets ; return CSSStyleSheet array;
         - <element>.style.<attr> = <value>;
         - <element>.setAttribute('class', 'highlight');
   - Ajax(XMLHttpRequest/Fetch)
     - XMLHttpRequest(XHR)
     - Fetch
       替代XMLHTTPRequest
       #+BEGIN_SRC javascript
       fetch(url).then(function(response){
           response.text().then(function(text){
               poemDisplay.textContent = text;
           });
       })
       #+END_SRC
   - Canvas/WebGL
     - SVG(Scalable Vector Graphic)
     - canvas
       #+BEGIN_SRC html
       <div>
         <canvas id="first-canvas" width="320" height="240">This is canvas, but your browser not support</canvas>
       </div>
       #+END_SRC
       #+BEGIN_SRC javascript
       
       #+END_SRC
     - WebGL
   - HTMLMediaElement/WebAudio/WebRTC
   - Notafications/Vibration
   - Web Storage/IndexedDB
 - Third-party API
   - introduction
     1. 首先需要您通过一个 <script> 元素连接到第三方服务器所开放的JavaScript库
     2. 调用库api
   - Twitter
   - Google Maps
   - Facebook suite
   - YouTube
   - Twilio

** Object
- class (ECMAScript6)
  - 'use strict';
  - class
  - constructor
  - static
  - extends
  - super
  - 性能
    - <object>.hasOwnProperty('<property-name>');
      只查询自己的属性，不追溯原型链；（提高性能）
    - Object.keys();
  - 注意
    - 检查属性是否undefined还不够。该属性可能存在，但其值恰好设置为undefined。
    - 不要扩展Object.prototype
** TypedArray
   #+BEGIN_SRC js
   'use strict';

   var buffer = new ArrayBuffer(16);

   if(buffer.byteLength === 16){
       console.log('Yes, it\'s 16 bytes');
   }else{
       console.log('Oh no, it\' the wrong size!');
   }

   var int32View = new Int32Array(buffer);

   for(var i = 0; i < int32View.length; i++){
       int32View[i] = 2 * i;
   }

   console.log(int32View);

   var int16View = new Int16Array(buffer);
   console.log(int16View);

   /* C structure accesser
   struct some_struct{
      unsigned long id;
      char username[16];
      float amount_due;
   };
    ,*/
   var buffer = new ArrayBuffer(24);
   var idView = new Uint32Array(buffer, 0, 1);
   var usernameView = new Uint8Array(buffer, 4, 16);
   var amountDueView = new Float32Array(buffer, 20, 1);
   #+END_SRC
** Memory Manager
   - alloc
     - init value
     - call function
       #+BEGIN_SRC js
       var d = new Date();
       var e = document.createElement('div');
       #+END_SRC
   - release
     - reference count
       #+BEGIN_SRC js
       function f(){
           var o = {};
           var o1 = {};
           o.a = o1;
           o1.a = o;
           /* o, o1 引用计数不能递减到 0，无法回收
              除非对象循环递减内部对象的引用；
           */
       }
       f();
       #+END_SRC
     - 标记-清除算法
       解决循环引用的问题，收集不在root中的对象，避免引用计数；

** concurrency model and event loop
   - run time
     - stack
       函数堆栈
     - heap
       数据堆
     - queue
       消息队列
   - event loop
     #+BEGIN_SRC js
     while(queue.waitForMessage()){
         queue.precessNextMessage();
     }
     #+END_SRC
     - add message
       #+BEGIN_SRC js
       const s = new Date().getSeconds();
       setTimeout(function(){
           console.log('Ran after' + (new Date().getSeconds()  -s) + 'sedonds') ;
       }, 500);

       /* 阻止了 500ms 超时回调 */
       while(true){
           if(new Date().getSeconds - s >= 2){
               console.log('good, loop for 2 seconds');
               break;
           }
       }

       /* 0 延时，将消息插到队列最后，不表示立刻执行；
        ,*/
       #+END_SRC
** Working with objects
 - 遍历所有属性
   1. for...in
   2. Object.keys(o)
   3. Object.getOwnPropertyNames(o)
 - getter/setter
   #+BEGIN_SRC js
   var o = {
     a: 7,
     get b() { 
       return this.a + 1;
     },
     set c(x) {
       this.a = x / 2
     }
   };

   console.log(o.a); // 7
   console.log(o.b); // 8
   o.c = 50;
   console.log(o.a); // 25
   #+END_SRC
** Details of the object model
** Promises
 - example
   #+BEGIN_SRC js
   doSomething(function(result){
       doSomethingElse(result, function(newResult){
           doThirdThing(newResult, function(finalResult){
               console.log(`Get the final result ${finalResult}`);
           });
       });
   });

   // use Promises
   doSomething().then(function(result){
       return doSomeThingElse(result);
   }).then(function(newResult){
       return doThirdThing(newResult);
   }).then(function(finalResult){
       console.log(`Got the final result ${fainalResult}`);
   }).catch(failCallback);

   // arrow function for Promises
   doSomething()
       .then(result => doSomething(result))
       .then(newResult => doThirdThing(newResult))
       .then(finalResult => {
           console.log(`Got the final result: ${finalResult}`);
       })
       .catch(failureCallback);
   // catch 后续操作
   new Promise((resolve, reject)=>{
       console.log('Initial');
       resolve();
   }).then(()=>{
       throw new Error('Something failed');
       console.log('Do this');
   }).catch(()=>{
       console.log('Do that');
   }).then(()=>{
       console.log('Do this whatever happen before');
   })
   #+END_SRC
** iterators and generators
** Meta programming
   - Proxy
     #+BEGIN_SRC js
     let handler = {
       get: function(target, name){
         return name in target ? target[name] : 42;
     }};

     let p = new Proxy({}, handler);
     p.a = 1;

     console.log(p.a, p.b); // 1, 42
     #+END_SRC
   - Reflect
     #+BEGIN_SRC js
     Reflect.has(Object, 'assign'); // true
     Function.prototype.apply.call(Math.floor, undefined, [1.75]);
     Reflect.apply(Math.floor, undefined, [1.75]); 
     #+END_SRC
* node.js
** nvm
   node.js 版本管理
   nvm install 10.15.0
   nvm use 10.15.0
** npm
*** node.js 包管理
   - 快速下载
     npm install --global smart-npm --registry=https://registry.npm.taobao.org/
     - npm install <package-name> --save ; 保存到package.json
     - npm install <package-name> --save-dev ; 保存到package.json,开发依赖，用户无需安装
   - packages
     - lint
       1. npm install -g eslint
          eslint --init
       2. npm install eslint --save-dev ;保存到测试依赖
       3. 修改配置
          #+BEGIN_SRC json
          {
              "scripts":{
                  "lint": "eslint src/js"
              }
          }
          #+END_SRC
       4. npm run lint
     - express-generator
       sudo npm install express-generator -g
     - nodemon
       npm install --save-dev nodemon
       #+BEGIN_SRC json
       "scripts":{
           "start": "node ./bin/www",
           "devstart": "nodemon ./bin/www"
       }
       #+END_SRC
       $ DEBUG=<epxress-project>:* npm run devstart
     - 
*** ZeroMQ 客户端自动重连       
#+BEGIN_SRC js
const zmq = require("zeromq")
const detailProcess= require("./detailProcess")

async function run() {
  let sock;
  while(true){
    /* MUST config heartbeat and reconnect.
     ,*/
    sock = new zmq.Pull({heartbeatInterval: 1000, heartbeatTimeToLive: 2000, heartbeatTimeout: 3000, reconnectInterval: 3000})
    sock.connect("tcp://127.0.0.1:3000")
    console.log("Worker connected to port 3000")

    try{
      for await (const [msg] of sock) {
        console.log("work: %s", msg.toString())
      }
    }catch(e){
      console.log(e)
      sock.close()
    }
  }

  console.log("done")
}

run()

/* server side
 ,*/

const zmq = require("zeromq")

async function run() {
  const sock = new zmq.Push

  await sock.bind("tcp://127.0.0.1:3000")
  console.log("Producer bound to port 3000")
  while (true) {
    await sock.send("message")
    await new Promise(resolve => setTimeout(resolve, 3000))
    }
}

run()
#+END_SRC
** node
** javascript
*** promise
*** WebSocket
[[file:test-js/ws_client.js][client]] [[file:test-js/ws_server.js][server]]
ws://example.com:80/some/path
#+BEGIN_SRC text
GET / HTTP/1.1
Connection: Upgrade
Upgrade: websocket
Host: example.com
Origin: null
Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==
Sec-WebSocket-Version: 13

HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Upgrade: websocket
Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=
Sec-WebSocket-Origin: null
Sec-WebSocket-Location: ws://example.com/
#+END_SRC
** deployment
 - 设置 NODE_ENV 为 'production'
 - Log appropriately
   npm install debug
 - 使用 gzip/deflate 压缩响应文件
   对于生产中流量较大的网站，您不会使用此中间件。相反，你会使用像 Nginx 这样的反向代理。
   npm install compression
   #+BEGIN_SRC javascript
   var catalogRouter = require('./routes/catalog'); //Import routes for "catalog" area of site
   var compression = require('compression');

   // Create the Express application object
   var app = express();

   ...

   app.use(compression()); //Compress all routes

   app.use(express.static(path.join(__dirname, 'public')));

   app.use('/', indexRouter);
   app.use('/users', usersRouter);
   app.use('/catalog', catalogRouter);  // Add catalog routes to middleware chain.

   ...
   #+END_SRC
 - 使用 Helmet 避免被常见漏洞侵袭
   https://helmetjs.github.io/docs/
   npm install helmet
   #+BEGIN_SRC js
   var compression = require('compression');
   var helmet = require('helmet');

   // Create the Express application object
   var app = express();

   app.use(helmet());
   ...
   #+END_SRC
 - Paas
   https://www.heroku.com/pricing
   #+BEGIN_SRC text
   heroku help
   heroku create
   git push heroku master
   heroku open
   heroku config:set NODE_ENV='production'
   heroku config:set MONGODB_URI='mongodb://your_user:your_password@ds139278.mlab.com:39278/local_library_production'
   heroku config
   heroku logs  # Show current logs
   heroku logs --tail # Show current logs and keep updating with any new results
   heroku ps   #Display dyno status
   #+END_SRC
 - 设置 node 版本
   #+BEGIN_SRC json
   {
     "name": "express-locallibrary-tutorial",
     "version": "0.0.0",
     "engines": {
       "node": "8.9.1"
     },
       "private": true,
   }
   #+END_SRC
 - 数据库配置
   var mongoDB = process.env.MONGODB_URI || 'mongodb://your_user_id:your_password@ds119748.mlab.com:19748/local_library';
* jQuery
** downloading jQuery
   $ npm install jquery
   $ git clone git://github.com/jquery/jquery.git
   <script src="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js">
** 语法
- $(selector).action()
  #+BEGIN_SRC js
  $(document).ready(function(){
     $(this).hide();
      $('p').hide(); 
  });

  // js entry
  window.onload = function(){
      //...
  }
  #+END_SRC
** 效果
- 现实/隐藏
  - $('p').hide(spped, callback)
  - $('p').show()
  - $('p').toggle()
- Fading(衰退)
  - *.fadeIn(speed, callback)
  - *.fadeOut()
  - *.fadeToggle()
  - *.fadeTo()
- slide(滑动)
  - slideDown(speed, callback)
  - slideUp()
  - slideToggle()
- animate(动画)
  - animate({<attr>: value, ...})
- 停止效果渲染过程
  - stop()
- callback()
- Chaining()
  <selector>.<action1>().<action2>()...
** HTML(DOM)
- 获取/设置内容
  - text()
  - html()
  - val()
- 获取/设置属性
  - attr('<attr-name>')
- 回调(获取旧值，返回新值)
  #+BEGIN_SRC js
  $('#btn').attr('href', function(i, orig){
      return orig + 'new value';
  })
  #+END_SRC
- 添加元素
  - append()
    在被选元素的结尾插入内容
  - prepend()
    在被选元素的开头插入内容
  - after()
    在被选元素之后插入内容
  - before()
    在被选元素之前插入内容
- 删除元素
  - remove()
    删除被选元素（及其子元素）
  - empty()
    从被选元素中删除子元素
- CSS类
  - addClass()
  - removeClass()
  - toggleClass()
  - css
- css()
  - css('propertyname', 'value')
- 尺寸
  - width()
  - height()
  - innerWidth()
  - innerHeight()
  - outerWidht()
  - outerWidth(true)
** 遍历
- parents
  - parent()
  - parents()
  - parentsUntil()
- childs
  - childred()
  - find()
- siblings
  - siblings()
  - next()
  - nextAll()
  - nextUntil()
  - prev()
  - prevAll()
  - prevUntil()
- filter
  - first()
  - last()
  - eq()
  - filter()
  - not()
** AJAX
- load()
** others
- noConflict()
  #+BEGIN_SRC js
  $.noConflict();
  jQuery(document).ready(function(){
      jQuery('button') .click(function(){
          jQuery('p').text('jQuery still working');
      });
  });
  #+END_SRC
* js 面试题
** 什么是闭包，闭包的特性？
   1. 函数嵌套，形成一个闭包。
   2. 闭包拥有外部函数独立的环境和变量，当外部环境释放时，闭包依然保留外部环境和变量；

** auguments对象用途, 及访问？
 函数的实际参数会被保存在一个类似数组的arguments对象中;
 arguments[i];
 arguments.length;
#+BEGIN_SRC js
function myConcat(separator){
    let result = '';
    let i;
    for(i = 1; i < arguments.length; i++){
        result += arguments[i] + separator;
    }
    return result;
}
console.log(myConcat(',', 'red','orange','blue'));
#+END_SRC
** 默认参数，剩余参数
#+BEGIN_SRC js
function multiply(multiplier, ...theArgs) {
  return theArgs.map(x => multiplier * x);
}

var arr = multiply(2, 1, 2, 3);
console.log(arr); // [2, 4, 6]
#+END_SRC
** 箭头函数
 捕捉闭包上下文的this；
** 写一个对象打印函数，输出
** 枚举对象属性的3种方法
 - for...in
 - Object.keys(0)
 - Object.getOwnPropertyNames(o)
