* tutorial
  https://docs.python.org/3.7/tutorial
** 3. An Informal Introduction to Python
 - 3.1.Using Python as a Calculator
   - 3.1.1.Numbers
     |-----------+-------------+---------+--------|
     | operate   | description | example | return |
     |-----------+-------------+---------+--------|
     | +,-,*,/,% |             |         |        |
     | //        | 整除        | 17//3   |      5 |
     | **        | 幂          | 5**2    |     25 |
     | =         | 赋值        | x=20    |        |
     |-----------+-------------+---------+--------|
   - 3.1.2.Strings
     - 'string',"string"
     - \ 逃逸符
     - print()
       #+BEGIN_SRC python
       print('C:\some\name') # here \n neans newline!
       print(r'C:\some\name') # note the r(raw) before the quote

       #使用 """/''' 打印多行
       print('''\
       Usage: thingy [OPTIONS]
       -h            Display this usage message
       -H hostname   Hostname to connect to
       ''')

       # it handles multiple arguments
       i = 256 ** 2
       print('The value of i is', i) #=>The value of i is 65536

       # keywords arguments <end> can be used to avoid newline after output
       a, b = 0, 1
       while a < 1000:
           print(a, end=',')
           a, b = b, a+b
       #=> 0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
       #+END_SRC
     - +(concatenated), *(repeated)
       #+BEGIN_SRC python
       3 * 'un' + 'ium' #=> 'unununiym'
       'Py' 'thon' #=> 'Python'

       text = ('first '
               'second')

       # index
       # +---+---+---+---+---+---+
       # | P | y | t | h | o | n |
       # +---+---+---+---+---+---+
       # 0   1   2   3   4   5   6
       # -6  -5  -4  -3  -2  -1
       word = 'Python'
       word[0] #=> 'P'
       word[-1] #=> 'n'
       word[0:2] #=> 'Py'
       word[2:] #=> 'thon'
       #+END_SRC
   - 3.1.3.Lists
     - [1,2,...]
     - <list>[<begin>:<end>]
     - <list>.append(<item>)
     - next lists
       #+BEGIN_SRC python
       a = [1,2,3]
       n = ['x','y','z']
       x = [a, n]
       #+END_SRC
 - 3.2.First Steps Towards Programming
   #+BEGIN_SRC python
   # Fibonacci series:
   # the sum of two elements defines the next
   a, b = 0, 1 # multiple assigment
   while a < 10:
       print(a) # body of the loop is indented
       a, b = b, a+b
   #+END_SRC
** 4. More Control Flow Tools
 - 4.1 if Statements
   #+BEGIN_SRC python
   x = int(input('Please enter an integer'))
   if x < 0:
       x = 0
       print('Negative changed to zero')
   elif x == 0:
       print('Zero')
   elif x == 1:
       print('Single')
   else:
       print('More')
   #+END_SRC
 - 4.2. for Statements
   #+BEGIN_SRC python
   words = ['cat', 'window', 'defenestrate']
   for w in words:
       print(w, len(w))
   #+END_SRC
 - 4.3 The range() Function
   range(<begin>, <end>, <steps>)
   #+BEGIN_SRC python
   for i in range(5):
       print(i)
   #+END_SRC
   - iterable object
     range()
 - 4.4. break and continue Statements, and else Clauses on Loops
   #+BEGIN_SRC python
   for n in range(2, 10):
       for x in range(2, n):
           if n % x == 0:
               print(n, 'equals', x, '*', n//x)
               break
       else:
           # loop fell through without finding a factor
           print(n, 'is a prime number')
   #+END_SRC
 - 4.5. pass Statements
   The pass statement does nothing.
   相当于C的空函数体{}
   #+BEGIN_SRC python
   while True:
       pass # Busy-wait for keyboard interrupt(Ctrl+C)

   class MyEmptyClass:
       pass

   def initlog(*args):
       pass # Remember to implement this!
   #+END_SRC
 - 4.6.Define Functions
   - syntax: def <fun-name>:
               <body>
   - 函数名是函数对象，可以被赋值
   - return 返回函数值
   #+BEGIN_SRC python
   def fib(n):
   ''' Print a Fibonacci series up to n.''' # docstring
   a, b = 0, 1
   while a < n:
   print(a, end=' ')
   a, b = b, a+b
   print()
   fib(2000)
   #+END_SRC
 - 4.7.More on Defining Functions
   - 4.7.1.Default Argument Values
     #+BEGIN_SRC python
     def ask_ok(prompt, retries=4, reminder='Please try again!'):
         while True:
             ok = input(prompt)
             if ok in ('y', 'ye', 'yes'):
                 return True
             if ok in ('n', 'no', 'nop', 'nope'):
                 return False
             retries = retries - 1
             if retries < 0:
                 raise ValueError('invalid user response')
             print(reminder)

     def f(a, L=None):
         if L is None:
             L = []
         L.append(a)
         return L
     #+END_SRC

   - 4.7.2.Keyword Arguments
     指定参数值
     #+BEGIN_SRC python
     def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
         print("-- This parrot wouldn't", action, end=' ')
         print("if you put", voltage, "volts through it.")
         print("-- Lovely plumage, the", type)
         print("-- It's", state, "!")

     parrot(1000)                                          # 1 positional argument
     parrot(voltage=1000)                                  # 1 keyword argument
     parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
     parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
     parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
     parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword
     #+END_SRC

   - 4.7.3.Arbitrary Argument Lists(可变参数)
     #+BEGIN_SRC python
     def write_mutiple_items(file, separator, *args):
         file.write(separator.join(args))

     def concat(*args, sep="/"):
         return sep.join(args)
     concat('earth', 'mars', 'venus')
     #=> 'earth/mars/venus'
     #+END_SRC

   - 4.7.4.Unpacking Argument Lists
     #+BEGIN_SRC python
     list(range(3, 6))            # normal call with separate arguments

     args = [3, 6]
     list(range(*args))            # call with arguments unpacked from a list
     #+END_SRC

   - 4.7.5.Lambda Expression
     - syntax
       lambda <args>: <body>
     #+BEGIN_SRC python
     def make_incrementor(n):
     return lambda x: x + n

     f = make_incrementor(42)
     f(0)
     f(1)
     #+END_SRC
   - 4.7.6.Documentation Strings
     #+BEGIN_SRC python
     def my_function():
         """Do nothing, but document it.

         No, really, it doesn't do anything.
         """
         pass

     print(my_function.__doc__)
     #+END_SRC
   - 4.7.7.Function Annotations
     #+BEGIN_SRC python
     def f(ham: str, eggs: str = 'eggs') -> str:
         print("Annotations:", f.__annotations__)
         print("Arguments:", ham, eggs)
         return ham + ' and ' + eggs

     f('spam')
     # =>
     # Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
     # Arguments: spam eggs
     # 'spam and eggs'
     #+END_SRC
** 5. Data Structures
 - 5.1.More on Lists
   - funs
     - list.append(x)
       a[len(a):] = [x]
     - list.extend(interable)
       a[len(a):] = iterable
     - lit.insert(i,x)
     - list.remove(x)
     - list.pop([i])
     - list.clear()
     - list.index(x[, start[, end]])
     - list.count(x)
     - list.sort(key=None, reverse=False)
     - list.reverse()
     - list.copy()
     - list.del(index)
   - 5.1.1. Using List as Stacks
     #+BEGIN_SRC python
     stack = [3, 4, 5]
     stack.append(6)
     stack.append(7)
     stack

     stack.pop()

     stack

     stack.pop()

     stack.pop()

     stack
     #+END_SRC
   - 5.1.2. Using Lists as Queues
     #+BEGIN_SRC python
     from collections import deque
     queue = deque(["Eric", "John", "Michael"])
     queue.append("Terry")           # Terry arrives
     queue.append("Graham")          # Graham arrives
     queue.popleft()                 # The first to arrive now leaves

     queue.popleft()                 # The second to arrive now leaves

     queue                           # Remaining queue in order of arrival
     #+END_SRC
   - 5.1.3.List Comprehensions
     #+BEGIN_SRC python
     # 1. normal
     squares = []
     for x in range(10):
         squares.append(x**2)

     squares

     # 2. lambda
     squares = list(map(lambda x: x**2, range(10)))
     # 3. concise
     squares = [x**2 for x in range(10)]

     # example
     [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
     #=> [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

     from math import pi
     [str(round(pi, i)) for i in range(1, 6)]
     #=> ['3.1', '3.14', '3.142', '3.1416', '3.14159']
     #+END_SRC
   - 5.1.4.Nested List Comprehensions
     #+BEGIN_SRC python
     matrix = [
         [1, 2, 3, 4],
         [5, 6, 7, 8],
         [9, 10, 11, 12],
     ]

     [[row[i] for row in matrix] for i in range(4)]
     #+END_SRC
 - 5.2.The del statement
   remove an item form a list given its index instead of its value
   list.del(index)
   del(list)
 - 5.3. Tuples and Sequences
   #+BEGIN_SRC python
   t = 12345, 54321, 'hello!'
   t[0]

   t

   # Tuples may be nested:
   u = t, (1, 2, 3, 4, 5)
   u

   # Tuples are immutable:
   t[0] = 88888


   # but they can contain mutable objects:
   v = ([1, 2, 3], [3, 2, 1])
   v
   #+END_SRC
 - 5.4.Sets
   #+BEGIN_SRC python
   basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
   print(basket)                      # show that duplicates have been removed

   'orange' in basket                 # fast membership testing

   'crabgrass' in basket


   # Demonstrate set operations on unique letters from two words

   a = set('abracadabra')
   b = set('alacazam')
   a                                  # unique letters in a

   a - b                              # letters in a but not in b

   a | b                              # letters in a or b or both

   a & b                              # letters in both a and b

   a ^ b                              # letters in a or b but not both
   #+END_SRC
 - 5.5. Dictionaries
   #+BEGIN_SRC python
   tel = {'jack': 4098, 'sape': 4139}
   tel['guido'] = 4127
   tel

   tel['jack']

   del tel['sape']
   tel['irv'] = 4127
   tel

   list(tel)

   sorted(tel)

   'guido' in tel

   'jack' not in tel
   #+END_SRC
 - 5.6.Looping Techniques
   #+BEGIN_SRC python
   knights = {'gallahad': 'the pure', 'robin': 'the brave'}
   for k, v in knights.items():
       print(k, v)

   for i, v in enumerate(['tic', 'tac', 'toe']):
       print(i, v)

   questions = ['name', 'quest', 'favorite color']
   answers = ['lancelot', 'the holy grail', 'blue']
   for q, a in zip(questions, answers):
       print('What is your {0}?  It is {1}.'.format(q, a))

   for i in reversed(range(1, 10, 2)):
       print(i)

   basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
   for f in sorted(set(basket)):
       print(f)

   import math
   raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
   filtered_data = []
   for value in raw_data:
       if not math.isnan(value):
           filtered_data.append(value)

   filtered_data
   #+END_SRC
 - 5.7.More on Conditions
   #+BEGIN_SRC python
   string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
   non_null = string1 or string2 or string3
   non_null
   #+END_SRC
 - 5.8. Comparing Sequences and Other Types
   #+BEGIN_SRC python
   (1, 2, 3)              < (1, 2, 4)
   [1, 2, 3]              < [1, 2, 4]
   'ABC' < 'C' < 'Pascal' < 'Python'
   (1, 2, 3, 4)           < (1, 2, 4)
   (1, 2)                 < (1, 2, -1)
   (1, 2, 3)             == (1.0, 2.0, 3.0)
   (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)
   #+END_SRC
** 6. Modules
 - summary
   - <file>.py
     __name__ -> <file.py>
   - example
     #+BEGIN_SRC sh
     touch fibo.py

     echo '
     # Fibonacci numbers module

     def fib(n):    # write Fibonacci series up to n
         a, b = 0, 1
         while a < n:
             print(a, end=' ')
             a, b = b, a+b
         print()

     def fib2(n):   # return Fibonacci series up to n
         result = []
         a, b = 0, 1
         while a < n:
             result.append(a)
             a, b = b, a+b
         return result
     ' >> fibo.py

     python
     import fibo
     fibo.fib(1000)
     fibo.__name
     #+END_SRC
 - 6.1.More on Modules
   #+BEGIN_SRC python
   from fibo import fib, fib2
   from fibo import *
   fib(500)

   # 2.
   import fibo as fib
   fib.fib(500)

   #3.
   from fibo import fib as fibonacci
   #+END_SRC
   - 6.1.1.Executing modules as scripts
     #+BEGIN_SRC sh
     python fibo.py <arguments>
     #+END_SRC
     #+BEGIN_SRC python
     # ...
     if __name__ == "__main__":
         import sys
         fib(int(sys.argv[1]))
     #+END_SRC

   - 6.1.2.The Module Search Path
     1. built-in module
     2. <module>.py from sys.path
        1. current directory
        2. PYTHONPATH
   - 6.1.3."Compiled" Python files
     __pycache__/spam.cpython-33.pyc
 - 6.2.Standard Modules
   #+BEGIN_SRC text
   >>> import sys
   >>> sys.ps1
   '>>> '
   >>> sys.ps2
   '... '
   >>> sys.ps1 = 'C> '
   C> print('Yuck!')
   Yuck!
   C>
   >>> import sys
   >>> sys.path.append('/ufs/guido/lib/python')
   #+END_SRC
 - 6.3. The dir() Function
   列出所有的模块定义
 - 6.4. Packages(module namespace)
   - __init__.py
     #+BEGIN_SRC text
     sound/                          Top-level package
           __init__.py               Initialize the sound package
           formats/                  Subpackage for file format conversions
                   __init__.py
                   wavread.py
                   wavwrite.py
                   aiffread.py
                   aiffwrite.py
                   auread.py
                   auwrite.py
                   ...
           effects/                  Subpackage for sound effects
                   __init__.py  ;__all__ = ["echo", "surround", "reverse"]
                   echo.py
                   surround.py
                   reverse.py
                   ...
           filters/                  Subpackage for filters
                   __init__.py
                   equalizer.py
                   vocoder.py
                   karaoke.py
                   ...
     #+END_SRC
     #+BEGIN_SRC python
     import sound.effects.echo
     sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)

     from sound.effects import echo
     echo.echofilter(input, output, delay=0.7, atten=4)

     from sound.effects.echo import echofilter
     echofilter(input, output, delay=0.7, atten=4)
     #+END_SRC
   - 6.4.2. Intra-package References
     #+BEGIN_SRC python
     #intra-package References
     from . import echo
     from .. import formats
     from ..filters import equalizer
     #+END_SRC
   - 6.4.3. Packages in Multiple Directories
     __path__

** 7. Input and Output
 - 7.1. Fancier Output Formatting
   - formatted string literals
     #+BEGIN_SRC python
     year = 2016
     event = 'Referendum'
     f'Result of the {year} {event}'
     #=>'Results of the 2016 Referendum'

     yes_votes = 42_572_654
     no_votes = 43_132_495
     percentage = yes_votes / (yes_votes + no_votes)
     '{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)
     ' 42572654 YES votes  49.67%'
     #+END_SRC
 - 7.2. Reading and Writing Files
   - open(fname, mode=[w|r|r+])
   - file.close()
   - examples
     #+BEGIN_SRC python
     with open('workfile') as f:
         read_data = f.read()

     f.closed
     #=> True
     #+END_SRC
   - 7.2.1. Methods of File Objects
     - f.read()
     - f.readline()
     - f.write()
     - f.seek()
   - 7.2.2. Saving structured data with json
     #+BEGIN_SRC python
     import json

     # 输出字符串
     json.dumps([1, 'simple', 'list'])

     # 输出到文件
     json.dump(json, fname)

     # 加载文件
     x = json.load(fname)
     #+END_SRC
** 8. Errors and Exceptions
 - 8.1. Syntax Errors
 - 8.2. Exceptions
 - 8.3. Handling Exceptinos
   #+BEGIN_SRC python
   while True:
       try:
           x = int(input("Please enter a number: "))
           break
       except ValueError:
           print("Oops!  That was no valid number.  Try again...")
   #+END_SRC
 - 8.4. Raising Exceptions
   - syntax raise *Error('message')
 - 8.5. User-defined Exceptions
   #+BEGIN_SRC python
   class Error(Exception):
       """Base class for exceptions in this module."""
       pass

   class InputError(Error):
       """Exception raised for errors in the input.

       Attributes:
           expression -- input expression in which the error occurred
           message -- explanation of the error
       """

       def __init__(self, expression, message):
           self.expression = expression
           self.message = message

   class TransitionError(Error):
       """Raised when an operation attempts a state transition that's not
       allowed.

       Attributes:
           previous -- state at beginning of transition
           next -- attempted new state
           message -- explanation of why the specific transition is not allowed
       """

       def __init__(self, previous, next, message):
           self.previous = previous
           self.next = next
           self.message = message
   #+END_SRC
 - 8.6. Define Clean-up Actions
   - finally

 - 8.7. Predefined Clean-up Actions
   - with

** 9. Classes
 - 9.1. A word about Names and Objects
 - 9.2. Python Scopes and Namespaces
   #+BEGIN_SRC python
   def scope_test():
       def do_local():
           spam = "local spam"

       def do_nonlocal():
           nonlocal spam
           spam = "nonlocal spam"

       def do_global():
           global spam
           spam = "global spam"

       spam = "test spam"
       do_local()
       print("After local assignment:", spam)
       do_nonlocal()
       print("After nonlocal assignment:", spam)
       do_global()
       print("After global assignment:", spam)

   scope_test()
   print("In global scope:", spam)

   # =>
   # After local assignment: test spam
   # After nonlocal assignment: nonlocal spam
   # After global assignment: nonlocal spam
   # In global scope: global spam
   #+END_SRC
 - 9.3. A First Look at Classes
   - 9.3.1. Class Definition Syntax
     #+BEGIN_SRC python
     class ClassName:
         '''
         <statment-1>
         .
         .
         .
         <statment-N>
         '''
     #+END_SRC

   - 9.3.2. Class Objects
     #+BEGIN_SRC python
     class MyClass:
         ''' A simple example class'''
         i = 12345
         def f(self):
             return 'hello world'

     x = MyClass()

     class Complex:
         def __init__(self, realport, imagpart):
             self.r = realpart
             self.i = imagpart

     x = Complex(3.0, -4.5)
     x.r, x.i

     # 9.3.3 Class Objects
     x.counter = 1
     while x.counter < 10:
         x.counter = x.counter * 2
         print(x.counter)

     del x.counter

     # 9.3.4
     xf = x.f
     while True:
         print(xf())
     #+END_SRC

   - 9.3.5. Class and instance Variables
     #+BEGIN_SRC python
     class Dog:
         kind = 'canine'
         # tricks = [] ; 静态成员
         def __init__(self, name):
             self.name = name
             self.tricks = []
         def add_trick(self, trick):
             self.tricks.append(trick)

     d = Dog('Fido')
     e = Dob('Buddy')
     d.kind, e.kind, d.name, e.name
     #=> ('canine', 'canine', 'Fido', 'Buddy')

     d.add_trick('roll over')
     e.add_trick('play dead')
     #+END_SRC
 - 9.4. Random Remarks
 - 9.5. Inheritance
   - isinstance()
   - issubclass()
   #+BEGIN_SRC python
   class DerivedClassName(BaseClassName):
   pass
   #+END_SRC
   - 9.5.1. Multiple Inheritance
     class DerivedClassName(base1,base2,...):
     - super()
 - 9.6. Private Variables
 - 9.7. Odds and Ends
 - 9.8. Iterators
   #+BEGIN_SRC python
   s = 'abc'
   it = iter(s)
   it
   next(it)

   class Reverse:
       '''Iterator for looping over a sequence backwords.'''
       def __init__(self, data):
           self.data = data
           self.index = len(data)
       def __iter__(self):
           return self
       def __next__(self):
           if self.index == 0:
               raise StopIteration
           self.index = self.index -1
           return self.data[self.index]

   rev = Reverse('spam')
   iter(rev)
   for char in rev:
       print(char, end=', ')
   #=> m, a, p, s
   #+END_SRC
 - 9.9. Generators
   #+BEGIN_SRC python
   def reverse(data):
       for index in range(len(data)-1, -1, -1):
           yield data[index]

   for char in reverse('golf'):
       print(char)
   #+END_SRC
** 10. Brief Tour of the Standard Library
 - 10.1. Operating System Interface
   #+BEGIN_SRC python
   import os
   os.getcwd()

   import shutil
   shutil.copyfile('data.db', 'archive.db')
   shutil.move('/build/executables', 'installdir')

   dir()
   help()
   #+END_SRC

 - 10.2. File wildcards
   #+BEGIN_SRC python
   import glob

   glob.glog('*.py')
   #+END_SRC

 - 10.3. Command Line Arugments
   #+BEGIN_SRC python
   import sys
   print(sys.argv)
   #=> ['demo.py', 'one', 'two']
   #+END_SRC

 - 10.4. Error Output Redirection and Program Termination
   sys.stderr.write('strings descriptions')

 - 10.5. String Pattern Matching
   #+BEGIN_SRC python
   import re
   re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
   # ['foot', 'fell', 'fastest']
   #+END_SRC

 - 10.6. Mathematics
   #+BEGIN_SRC python
   import math
   math.cos(math.pi / 4)

   import random
   random.choice(['apple', 'pear', 'banana'])
   random.sample(range(100), 10)
   random.random()
   random.randrange(6)

   import statistics
   data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
   statistics.mean(data)

   statistics.median(data)

   statistics.variance(data)
   #+END_SRC

 - 10.7. Internet Access
   #+BEGIN_SRC python
   from urllib.request import urlopen
   with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as response:
       for line in response:
           line = line.decode('utf-8')  # Decoding the binary data to text.
           if 'EST' in line or 'EDT' in line:  # look for Eastern Time
               print(line)



   import smtplib
   server = smtplib.SMTP('localhost')
   server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
   """To: jcaesar@example.org
   From: soothsayer@example.org

   Beware the Ides of March.
   """)
   server.quit()
   #+END_SRC

 - 10.8. Dates and Times
   #+BEGIN_SRC python
   # dates are easily constructed and formatted
   from datetime import date
   now = date.today()
   now

   now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")


   # dates support calendar arithmetic
   birthday = date(1964, 7, 31)
   age = now - birthday
   age.days
   #+END_SRC

 - 10.9. Data Compression
   #+BEGIN_SRC python
   import zlib
   # zlib, gzip, bz2, lzma, zipfile and tarfile.
   s = b'witch which has which witches wrist watch'
   len(s)

   t = zlib.compress(s)
   len(t)

   zlib.decompress(t)

   zlib.crc32(s)
   #+END_SRC

 - 10.10. Performance Measurement
   #+BEGIN_SRC python
   from timeit import Timer
   Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()

   Timer('a,b = b,a', 'a=1; b=2').timeit()
   #+END_SRC

 - 10.11. Quality Control
   #+BEGIN_SRC python
   def average(values):
       """Computes the arithmetic mean of a list of numbers.

       >>> print(average([20, 30, 70]))
       40.0
       """
       return sum(values) / len(values)

   import doctest
   doctest.testmod()   # automatically validate the embedded tests

   import unittest

   class TestStatisticalFunctions(unittest.TestCase):

       def test_average(self):
           self.assertEqual(average([20, 30, 70]), 40.0)
           self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
           with self.assertRaises(ZeroDivisionError):
               average([])
           with self.assertRaises(TypeError):
               average(20, 30, 70)

   unittest.main()  # Calling from the command line invokes all tests
   #+END_SRC

 - 10.12. Batteries Included
   - xmlrpc.client/xmlrpc.server
   - email
   - json
   - sqlite3
   - gettext/locale/codecs
** 11. Breif Tour of the Standard Library -- Part II
 - 11.1. Output Formatting
   #+BEGIN_SRC python
   # 11.1. Output Formatting

   import reprlib
   reprlib.repr(set('supercalifragilisticexpialidocious'))
   #"{'a', 'c', 'd', 'e', 'f', 'g', ...}"

   import pprint
   t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
       'yellow'], 'blue']]]

   pprint.pprint(t, width=30)
   #=>
   '''
   [[[['black', 'cyan'],
      'white',
      ['green', 'red']],
     [['magenta', 'yellow'],
      'blue']]]
   '''
   #------------------------------------
   import textwrap
   doc = """The wrap() method is just like fill() except that it returns
   a list of strings instead of one big string with newlines to separate
   the wrapped lines."""

   print(textwrap.fill(doc, width=40))

   #-----------------------------------------
   import locale
   locale.setlocale(locale.LC_ALL, 'English_United States.1252')

   conv = locale.localeconv()          # get a mapping of conventions
   x = 1234567.8
   locale.format("%d", x, grouping=True)

   locale.format_string("%s%.*f", (conv['currency_symbol'],
                        conv['frac_digits'], x), grouping=True)
   #+END_SRC

 - 11.2. Templating
   #+BEGIN_SRC python
   from string import Template
   t = Template('${village}folk send $$10 to $cause.')
   t.substitute(village='Nottingham', cause='the ditch fund')
   #'Nottinghamfolk send $10 to the ditch fund.'

   t = Template('Return the $item to $owner.')
   d = dict(item='unladen swallow')
   t.substitute(d)

     

   t.safe_substitute(d)


   import time, os.path
   photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
   class BatchRename(Template):
       delimiter = '%'
   fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')


   t = BatchRename(fmt)
   date = time.strftime('%d%b%y')
   for i, filename in enumerate(photofiles):
       base, ext = os.path.splitext(filename)
       newname = t.substitute(d=date, n=i, f=ext)
       print('{0} --> {1}'.format(filename, newname))
   #+END_SRC

 - 11.3. Workding with Binary Data Record Layouts
   #+BEGIN_SRC python
   import struct

   with open('myfile.zip', 'rb') as f:
       data = f.read()

   start = 0
   for i in range(3):                      # show the first 3 file headers
       start += 14
       fields = struct.unpack('<IIIHH', data[start:start+16])
       crc32, comp_size, uncomp_size, filenamesize, extra_size = fields

       start += 16
       filename = data[start:start+filenamesize]
       start += filenamesize
       extra = data[start:start+extra_size]
       print(filename, hex(crc32), comp_size, uncomp_size)

       start += extra_size + comp_size     # skip to the next header
   #+END_SRC

 - 11.4. Multi-threading
   #+BEGIN_SRC python
   import threading, zipfile

   class AsyncZip(threading.Thread):
       def __init__(self, infile, outfile):
           threading.Thread.__init__(self)
           self.infile = infile
           self.outfile = outfile

       def run(self):
           f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
           f.write(self.infile)
           f.close()
           print('Finished background zip of:', self.infile)

   background = AsyncZip('mydata.txt', 'myarchive.zip')
   background.start()
   print('The main program continues to run in foreground.')

   background.join()    # Wait for the background task to finish
   print('Main program waited until background was done.')
   #+END_SRC

 - 11.5. Logging
   #+BEGIN_SRC python
   import logging
   logging.debug('Debugging information')
   logging.info('Informational message')
   logging.warning('Warning:config file %s not found', 'server.conf')
   logging.error('Error occurred')
   logging.critical('Critical error -- shutting down')
   #+END_SRC

 - 11.6. Weak Reference
   #+BEGIN_SRC python
   import weakref, gc
   class A:
       def __init__(self, value):
           self.value = value
       def __repr__(self):
           return str(self.value)

   a = A(10)                   # create a reference
   d = weakref.WeakValueDictionary()
   d['primary'] = a            # does not create a reference
   d['primary']                # fetch the object if it is still alive

   del a                       # remove the one reference
   gc.collect()                # run garbage collection right away

   d['primary']                # entry was automatically removed
   #+END_SRC

 - 11.7. Tools for Working with Lists
   #+BEGIN_SRC python
   from array import array
   a = array('H', [4000, 10, 700, 22222])
   sum(a)

   a[1:3]
   #+END_SRC

** summary
 - functions
   | syntax                            | description          | example        |
   |-----------------------------------+----------------------+----------------|
   | range(begin, end, steps)          | 范围 iterable object |                |
   | len(var)                          | 参数长度             |                |
   | print(var0, var1, ... [end='\n']) | 打印                 |                |
   | enumerate()                       |                      |                |
   | list(iterable-object)             | iterator             | list(range(5)) |
   |                                   |                      |                |
* more
** 执行Shell脚本
   os标准库下直接有相应的方法
   #+BEGIN_SRC python
   # 执行并等待脚本结束
   child = subprocess.Popen(["ping","-c","5","leehao.me"])
   child.wait()
   print 'parent finish'
   # 获取脚本输出
   def subprocess_cmd(command):
       process = subprocess.Popen(command,stdout=subprocess.PIPE, shell=True)
       proc_stdout = process.communicate()[0].strip()
       print proc_stdout

   subprocess_cmd('echo leehao.me; echo www.leehao.me')
   #+END_SRC
   #+BEGIN_SRC python
   from datetime import datetime
   import subprocess


   def safe_int(s):
       try:
           n = int(s)
       except Exception, ex:
           n = 0
       return n


   def run():
       print 'begin to monitor task num, time: %s' % datetime.now()
       child = subprocess.Popen('grep "socket进入队列" /home/lihao/logs/ksb.txt | tail -n 1 | cut -d "：" -f 3',
                                shell=True, stdout=subprocess.PIPE)
       out = child.communicate()[0]
       out = out.strip()
       print(out)
       num = safe_int(out)
       if num > 5:
           print 'task num is over limit, num: %s, time: %s' % (num, datetime.now())
           msg = '%s, 193 task num is over limit, task num: %s' % (datetime.now(), num)
           cmd = ['/home/soft/SendMsg/SendMsg', '1', '13800138000', msg]
           print cmd
           child = subprocess.Popen(cmd, cwd="/home/soft/SendMsg")
           child.wait()
       else:
           print 'task num is ok, num: %s, time: %s' % (num, datetime.now())


   if __name__ == '__main__':
       run()
   #+END_SRC