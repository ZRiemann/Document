* w3schools
  https://www.w3schools.com

  |--------------------+--------------------------------------------|
  | tag                | description                                |
  |--------------------+--------------------------------------------|
  | <quote>            |                                            |
  | <blockquote>       |                                            |
  | <abbr>             | 缩写，鼠标移动到上面会探出提示             |
  | <address>          | 地址                                       |
  | <cite>             | 引用工作标题 - 斜体                        |
  | <bdo>              | bi-directional override ; 方向重写         |
  |--------------------+--------------------------------------------|
  | Images             | 图片相关标签                               |
  |--------------------+--------------------------------------------|
  | <img>              | 图片标签                                   |
  | <map>              | 图片内容映射 <img ... usemap="#map"        |
  | <area>             | 图片区域, <map name="map"><area ...>       |
  | <picture>          | 不同页面大小适配不同的图片                 |
  |--------------------+--------------------------------------------|
  | Tables             | 表格标签                                   |
  |--------------------+--------------------------------------------|
  | <table>            | 表格                                       |
  | <tr>               | table row 行                               |
  | <th>               | table header 表头, 默认粗体居中            |
  | <td>               | table data/cell 表项                       |
  | <caption>          | 表标题                                     |
  |--------------------+--------------------------------------------|
  | style              |                                            |
  | border             | table, th, td{border:1px solid black;}     |
  |                    | 边框有重复                                 |
  | collapsed borders  | table{...;border-collapse: collapse;}      |
  |                    | 解决边框重复问题                           |
  | Cell padding       | th,td{...; padding:15px;}                  |
  |                    | 控制表项留白大小                           |
  | text-align         | th{ text-align: center;}                   |
  |                    | 控制表项内字符对齐方式                     |
  | boarder-spaceing   | table{border-spacing:5px;}                 |
  |                    | 控制表项间距                               |
  | colspan            | <th colspan="2">Tele</th>                  |
  |                    | 将表项拆分成2列                            |
  | rowspan            | <th rowspan="2">                           |
  |                    | 将表项拆分成2行                            |
  |--------------------+--------------------------------------------|
  | Lists              | 列表                                       |
  |--------------------+--------------------------------------------|
  | <ul>               | Unordered List; 无序列表                   |
  | <ol>               | Ordered List ; 有序列表                    |
  | <li>               | list item ; 列表项                         |
  | <dl>               | description list ; 描述列表                |
  | <dt>               | description term ; 描述项                  |
  | <dd>               | description data ; 描述数据                |
  |--------------------+--------------------------------------------|
  | attributes         | 列表属性                                   |
  | <ol type="*">      | 控制列表计数类型，1,A,a,I,i                |
  | <ol start="50">    | 控制列表开始计数                           |
  |--------------------+--------------------------------------------|
  | style              | 列表样式                                   |
  | "list-style-type:" | <ul style="list-style-type:disc">          |
  |                    | disc/cricle/square/none                    |
  | CSS more           |                                            |
  |--------------------+--------------------------------------------|
  | Grouping Tags      |                                            |
  |--------------------+--------------------------------------------|
  | Blocks             | 块                                         |
  |                    | <address/article/aside/blockquote/         |
  |                    | canvas/dd/div/dl/dt/filedset/figure/       |
  |                    | figcaption/footer/form/h1-h6/header/       |
  |                    | hr/li/main/nav/noscript/ol/output/p/       |
  |                    | pre/section/table/tfoot/ul/video>          |
  | inline             | 内联                                       |
  |                    | <a/abbr/acronym/b/bdo/big/br/botton/       |
  |                    | cite/code/dfn/em/i/img/input/kbd/label/    |
  |                    | map/object/q/samp/script/select/small/span |
  |                    | strong/sub/sup/textarea/time/tt/var>       |
  |--------------------+--------------------------------------------|
  | <div>              | <html> elements container ; html元素容器   |
  | <span>             | a container for some text ; 文本容器       |
  |                    |                                            |

** 1. HTML Introduction
*** 1.1 What is HTML?
    一种网页标记语言
    HTML stands for Hyper Text Markup Language
    使用标记描述网页解构 ; HTML describes the structure of web pages using Markup
    HTML 元素是网页块 ; HTML *elements* are the building blocks of HTML pages
    HTML 使用标签(tag)呈现 ; HTML elements are-represented by *tags*
    HTML 标签使用 head/paragraph/table 等标识 ; HTML tags label pieces of content such as heading , and so on
    网页不显示标签，但是使用标签渲染页面；(将标签转化为渲染指令执行) ; Browsers do not display the HTML tags but use them to render the content of page
*** 1.2 A Simple HTML Document
    #+BEGIN_SRC html
    <!--(MAST)declaration defines the document to be HTML5 -->
    <!DOCTYPE html>
    <!--The <html> elements is the root element of an HTML page-->
    <html>
      <!--The <head> element contains meta infomation(元信息) about the document-->
      <head>
        <!--specifies a title of the document ; 指定文档标题-->
        <title>Page Title</title>
      </head>
      <!--contains the visible page content ; body 包含可视内容-->
      <body>
        <!--(h1~h6六层级标题)element defines a large heading ; 定义一个大号头部-->
        <h1>My First Heading</h1>
        <!--element defines a paragraph-->
        <p>My first paragraph</p>
      </body>
    </html>
    #+END_SRC
*** 1.3 HTML tags
    HTML tags are-element names surrounded by angle brackets ; HTML 标记是使用尖括号包围的元素名称
    <tagname>content goes here...</tagname>
    HTML tags normally come in paires like <p> and </p> ; HTML标记通常是配对的，如<p>...</p>
    The first tag in a pair is the *start tag*, the second tag is the *end tag*. ; 第一个是 *开始标签*, 第二个是 *结束标签*
    The end tag is-written like the start tag, but with a *forward slash(斜杠)* inserted before the tag name. ; 结束标签在标签名前加斜杠
**** 1.3.1 Web Browsers (网页浏览器)
    The purpose of a web broser(Chrome, IE, Firefox, Safari) is to read HTML documents and display them.
    浏览器的一个目的是读取HTML文档然后显式该文档；
    The browser does not display the HTML tags, but uses them to determine how to display the document(render).
    浏览器不显示HTML标签，但使用标签来决定如何渲染页面；
**** 1.3.2 HTML Page Structure (页面结构)
     html(root)
      +- head
      +- body
     Only the content inside <body> section is-displayed in a browser.
**** 1.3.3 The <!DOCTYPE> Declaration
     The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.
     <!DOCTYPE>声明了文档类型，并帮助浏览器正确的显示页面
     It mast only appear once, at the topof the page(before any HTML tags).
     它必须出现一次，在页面的顶部(所有标签的上面)
     The <!DOCTYPE> declaration is not case sensitive(大小写无关);
     The <!DOCTYPE> declaration for *HTML5 is：<!DOCTYPE html>*
**** 1.3.4 HTML Versions
     |-----------+------|
     | Version   | Year |
     |-----------+------|
     | HTML      | 1991 |
     | HTML 2.0  | 1995 |
     | HTML 3.2  | 1997 |
     | HTML 4.01 | 1999 |
     | XHTML     | 2000 |
     | HTML5     | 2014 |
     |-----------+------|

*** 1.4 HTML Editors(编辑器)
   Notepad/TextEdit/emacs/vim
*** 1.5 HTML basic(基础)
    - *HTML Headings(标题)* <h1>heading content</h1> ~ <h6>...</h6>
    - *HTML Paragraphs(段落)* <p>paragraph content</p>
    - *HTML Links(连接)* <a href="https://www.w3schools.com">This is a link</a>
      The link's destination is-specified in the *href attribute*.
      *Attributes* are-used to provide additional infomation about HTML elements.
      *属性* 被用来给 *元素* 提供更多地信息。
    - *HTML Images(图片)* <img src="w3schools.jpg" alt="W3schools.com" with="104" height="142">
    - *HTML Bottons(按钮)* <botton>Click me</button>
    - *HTML List <ul>|<ol>* <ul><li>...</li><li>...</li></ul>

** 2. HTML Elements(元素)
   An HTML element ususlly consists of a tart tag and end tag, with the content inserted in between:
   <tagname>Content goes here...</tagname>
   HTML element with no content are-called *empty elements*.
   *Empty elements* do not have a end tag, such as the <br> element(which indicates a *line break*)
*** 2.1 Nested HTML Elements(嵌套元素)
    HTML elements can be-nested(elements can contain elements).
    ALL HTML documents consists of(组成) hested HTML elements. ; 文档由元素组成，元素内部可以包含元素
    The <html> element defines the *whole document*
    The element *content* is tow other HTML elements(<h1> and <p>)
*** 2.2 Empty Elements(空标签)
    <br> or <br />
*** 2.3 Use Lowercase Tags
    HTML tags are-not case sensitive: <P> means the same as <p>.

** 3. HTML Attributes(属性)
   - ALL HTML elements can have attribute
   - Attributes provide *additional information* about an element
   - Attributes are-always *specified in the start tag*
   - Attributes usually come in name/value paires like *name=value*
   - A complete list of all attributes for each HTML element.
     https://www.w3schools.com/tags/ref_attributes.asp
     |----------------+-------------+-----------------------------------------------------|
     | Attribute      | Belongs to  | Description                                         |
     |----------------+-------------+-----------------------------------------------------|
     | href           | 连接        | <a href="http://www.w3school.com">w2school</a>      |
     | src            | 资源        | <img src="girl.jpg" with="500" height="600">        |
     | alt            | 替代字符串  | <img src="not_exist.jpg" alt="image not exists"     |
     | style          | 样式        | <p style="color:red">I am red text</p>              |
     | lang           | 语言<html>  | <html lang="en-US"                                  |
     | title          | tooltip提示 | <p title="tooltip">paragraph with tooltip</p>       |
     | id             | 元素id      |                                                     |
     | disabled       | 元素去使能  |                                                     |
     |----------------+-------------+-----------------------------------------------------|
     | accept         | <input>     | Specifies the tyeps of file that the servre accepts |
     | accept-charset | <form>      | Specifies the character encodings                   |
     | accesskey      | Global      | Specifies a shortcut key to active/focus an element |
     | action         | <from>      |                                                     |
*** The href Attribute
    HTML links are define with the <a> tag, The link address is-specifed in href attribute:
    <a href="https://www.w2shools.com">w3schools</a>
*** The src/width/height Attribure
    HTML images are define with the <img> tag.
    The filename of the image sourece is specifie/d in the *src* attribute:
    <img src "img_girl.jpg" width="500" height="600">
*** The alt Attribute
    The *alt* attribute specifies an *alternative()* text to be-used, when an image cannot be display\ed.
    The value of the attribute can be rea\d by screen read.
    This way, someone "listening" to the webpage, e.g. a blind person, can "hear" the element.
    The *alt* attribute is also useful if the image does not exist
    <img src="img_girl.jpg" alt="Girl with a jacket">
*** The style Attribute
    The style attribute is use/d to specify the styling of an element, like color,font,size etc.
    <p style="color:red">I am a paragraph with red color</p>
    see: CSS Tutoral
*** The lang Attribute
    The language of the document can be declare in the <html> tag.
    Declaring a language is important for accessibility applications(screen readers) and search engines
    <html lang="en-US">
    The first two letters specify the language(en).
    If There is a dialect(方言), use tow letter(US).
*** The title Attribute
    Here, a *title* attribute is-added to the <p>/<head>... element.
    The value of the title attribute will be-displayed as a *tooltip* when you mouse over the content.
    <p title="I'm a tooltip">This is a paragraph</p>
*** We suggest
    - use lower case atribute ; 使用小写字母
    - quote attribute values; 使用双引号
*** Single or Double Quotes
    Double quotes around attribute values are the most common in HTML, but single quotes can also bu used.
    In some situations, when the attribute value itself contains double quotes, 
    it's nesscessary to use single quetes.
    <p title='John "ShotGun" Nelson'>
    <p title="Join 'ShotGun' Nelson">

** 4. Headings(标题)
    <h1~6><h1~6>
**** Headings Are Important
     *Search engines* use the head headings to index the structure and content of you web pages.
     Users *skim(略读)* your pages by its headings.
     It's important to use headings to show *the document structure*.
     Use HTML headings for headings only. *Don't* use heading to make text *BIG* or *bold*.

     Each HTML heading has a default size. However, you can specify the szie for any heading with
     *style* attribute, using the CSS *font-size* property
     *<h1 sytle="font-size:60px;">Heading 1 with 60 pixe</h1>*
**** HTML Horizontal Rules(水平分割线)
     The <hr> tag defines a thematic break in an HTML page,
     and is most often displayed as a horizontal rule.
     The <hr> element is use/d to separate(or define a change) in an HTML page
     <h1>This is heading 1</h1>
     <p>This is some text.</p>
     <hr>
     <h2>This is heading 2</h2>
     <p>This is some other text.</p>
     <hr>

**** The HTML <head> Element
     The HTML <head> element has nothing to do with HTML headings.
     The <head> element is a container for metadata.
     HTML metadata is data about the HTML document.
     Metadata is not displayed.
     The <head> element is place/d between <html> tag and <body> tag.
     <html>
     <head>
     <title>My First HTML</title>
     <meta charset="UTF-8">
     </head>
     <body></body>
     </html>
**** How to View HTML Source
     
** 5. Paragraphs(段落)
   Browsers atomatically add some white space before and after a paragraph.
*** HTML Display
    The browser will remove any extra spaces and extra lines when the page is displaye/d
    浏览器忽略所有多余的空格和换行,要换行使用<br> 或 <pre>
*** HTML Line Breaks <br>
    The HTML <br> element defines a *line break*.
*** The Poem Problem, use <pre>
    The HTML <pre> element defines *preformatted* text.
    <pre>
    My Bonnie lies over the ocean.
    
    My Bonnie lies over the sea.
    
    ...
    </pre>

** 6. Styles(样式)
   Setting the sytle of an HTML element, can be don/e with the style attribute.
   The HTML style attribute has the following *syntax*:
   <tagname style="CSSproperty:CSSvalue;">
   #+BEGIN_SRC html
   <!-- Background color -->
   <body style="background-color:powderblue;">
     <h1 style="color:blue;font-family:verdana;font-size:300%">This is a heading</h1>
     <p style="color:red;font-familly:courier">This is a paragrapf.</p>
     <p style="text-align:center;">Centered paragraph</p>
   </body>
   #+END_SRC
** 7. Text Formatting(字体格式)
   HTML also defines speccial elements for defining text with a special meaning.
   
   Browsers display <strong> as <b>, and <em> as <i>. However, there is a difference
   in the meaning of thest tags:<b> and <i> defines bold and etalic text, 
   but <strong> and <em> means that the text is "important".
   |------------+---------------------------------|
   | tag        | desciption                      |
   |------------+---------------------------------|
   | <b>...</b> | Bold text ;粗体字               |
   | <strong>   | Important text; 重点<b>         |
   | <i>        | Italic text; 斜体               |
   | <em>       | Emphasized text ; 强调<i>       |
   | <mark>     | Marked text ; 标记-字符背景黄色 |
   | <small>    | Small text ; 小 字体相对变小    |
   | <del>      | Deleted text ; 删除-中划线      |
   | <ins>      | Inserted text ; 插入-下划线     |
   | <sub>      | Subscript ;下标                 |
   | <sup>      | Superscrpt ; 上标               |
   |------------+---------------------------------|
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <p><b>This text is bold</b></p>
   <p><i>This text is italic</i></p>
   <p>This is<sub> subscript</sub> and <sup>superscript</sup></p>
   <p><strong>This text is strong.</strong></p>
   <p><em>This text is-emphasized.</em></p>
   <h2>HTML <mark>Marked</mark> Formatting</h2>
   <h2>HTML <small>Small</small> Formatting</h2>
   <p>My favorite color is <del>blue</del> red.</p>
   <p>My favorite <ins>color</ins> is red.</p>
   </body>
   </html>

   #+END_SRC
   
** 8. HTML Quotation and Citation Elements(引用)   
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <!-- blockquote -->
   <p>Here is a quote from WWF's website:</p>
   <blockquote cite="http://www.worldwildlife.org/who/index.html">
   For 50 years, WWF has been protecting the future of nature.
   The world's leading conservation organization,
   WWF works in 100 countries and is supported by
   1.2 million members in the United States and
   close to 5 million globally.
   </blockquote>
   <!-- abbr -->
   <p>The <abbr title="World Health Organization">WHO</abbr> was founde/d in 1948.</p>
   <!-- address -->
   <address>
   Written by John Doe.<br> 
   Visit us at:<br>
   Example.com<br>
   Box 564, Disneyland<br>
   USA
   </address>
   <!-- cite -->
   <img src="img_the_scream.jpg" width="220" height="277" alt="The Scream">
   <p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>
   <!-- bdo -->
   <bdo dir="rtl">This line will be-written from right to left</bdo>
   </body>
   </html>
   #+END_SRC
** 9. HTML Comments(批注)
   Comments are-not displayed by the browser, but they can 
   help document your HTML source code. ; 有助文档月的，调试
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <!-- This is a comment -->
   <p>This is a paragraph.</p>
   <!-- Comments are not displayed in the browser -->
   <!-- Do not display this at the moment
   <img border="0" src="pic_trulli.jpg" alt="Trulli">
   -->
   </body>
   </html>
   #+END_SRC
** 10. HTML Colors(颜色)
   HTML colors are specifie/d using predifined color names, or RGB,HEX,HSL,RGBA,HSLA values.
   https://www.w3schools.com/colors/colors_names.asp
   - background-color:Tormato;   背景色
   - color:DodgerBlue;           字体色
   - Border:2px solid Tomato;    边框色
   + hsl(hue, saturation, lightness)
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <!-- background-color -->
   <h1 style="background-color:Tomato;">Tomato</h1>
   <h1 style="background-color:Orange;">Orange</h1>
   <h1 style="background-color:DodgerBlue;">DodgerBlue</h1>
   <h1 style="background-color:MediumSeaGreen;">MediumSeaGreen</h1>
   <h1 style="background-color:Gray;">Gray</h1>
   <h1 style="background-color:SlateBlue;">SlateBlue</h1>
   <h1 style="background-color:Violet;">Violet</h1>
   <h1 style="background-color:LightGray;">LightGray</h1>
   <!-- 字体颜色 -->
   <h1 style="color:Tomato;">Hello World</h1>
   <p style="color:DodgerBlue;">Lorem ipsum...</p>
   <p style="color:MediumSeaGreen;">Ut wisi enim...</p>
   <!-- 边框颜色 -->
   <h1 style="border:2px solid Tomato;">Hello World</h1>
   <h1 style="border:2px solid DodgerBlue;">Hello World</h1>
   <h1 style="border:2px solid Violet;">Hello World</h1>
   <!-- 数值表示颜色 -->
   <h1 style="background-color:rgb(255, 99, 71);">...</h1>
   <h1 style="background-color:#ff6347;">...</h1>
   <h1 style="background-color:hsl(9, 100%, 64%);">...</h1>

   <h1 style="background-color:rgba(255, 99, 71, 0.5);">...</h1>
   <h1 style="background-color:hsla(9, 100%, 64%, 0.5);">...</h1>
   </body>
   </html>
   #+END_SRC
** 11. HTML Styles-CSS(层叠样式单)
   CSS stands for Cascading Style Sheets.
   CSS describes how HTML elements are t be displaye/d on schreen, paper, or in other media.
   CSS saves a lo/t of work. It can control the layout of multiple web pages all at once.
   CSS can be edde/d to HTML elements in 3 ways:
   - inline - by using the style attribute in HTML elements
     <h1 style="color:blue;">This is a Blue Heading</h1>
   - internal - by using a <style> element in the <head> section
     #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
     <head>
     <style>
     body {background-color: powderblue;}
     h1   {color: blue;}
     p    {color: red;}
     </style>
     </head>
     <body>

     <h1>This is a heading</h1>
     <p>This is a paragraph.</p>

     </body>
     </html>
     #+END_SRC
   - external - by using an external CSS file(most common way to add CSS)
     #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
     <head>
       <link rel="stylesheet" href="styles.css">
     </head>
     <body>

     <h1>This is a heading</h1>
     <p>This is a paragraph.</p>

     </body>
     </html>
     #+END_SRC
     
     styles.css
     border:1px solid powderblue - 边框
     padding: 30 px -边框内衬垫
     margin:50px - 边框外边缘
     #+BEGIN_SRC css
     body {
         background-color: powderblue;
     }
     h1 {
         color: blue;
     }
     p {
         color: red;
         border: 1px solid powderblue;
         padding: 30px;
     }
     #+END_SRC
   + <id> 单指一个element
   + <class> 指一类element

   表单解决模板化问题，
   <id> and <class> 解决表单模板特例问题；

*** The id Attribute
    To define a specific style for one special element, and an <id> attribute to the element:
    <p id="p01">I am different</p>
    
    Then define a style for the element with specific id:
    #p01 {
      color: blue;
    }
*** The class Attribute
    To define a style for special types of element, add a <class> attribute to the element:
    <p class="error">I am different</p>
    then define a style for the element with the specific class:
    p.error{
      color:red;
    }
*** External References(外部关联)
    <link rel="stylesheet" href="https://aaa.com/styles.css">
** 12. HTML Links(链接)
   Links allow users to click their way from page to page. ; 叶面跳转
*** Hyperlinks
    You can click on a link and jump to another document.
    A link does not have to be text. It can be an image or any other html element.
*** Syntax(语法)
    <a href="url">link text</a>
    The *href* attribute specifies the destination address
    The *link text* is the visible part
    Clicking on the *link text* will send yu to the specified address.
*** Local Links
    A Local link is specifie/d with a relative URL(without http://www...)
*** Link Colors
    An unvisited link is underline/d and blue
    A visited link is underline/d and purple
    An active link is underline and red
    you can change it, by using CSS:
    a:hover{} -鼠标指针悬浮在连接上
    a:active{} -鼠标按下，但未弹开
    #+BEGIN_SRC css
    <style>
    a:link {
        color: green; 
        background-color: transparent; 
        text-decoration: none;
    }

    a:visited {
        color: pink;
        background-color: transparent;
        text-decoration: none;
    }

    a:hover {
        color: red;
        background-color: transparent;
        text-decoration: underline;
    }

    a:active {
        color: yellow;
        background-color: transparent;
        text-decoration: underline;
    }
    </style>
    #+END_SRC
*** The target Attribute
    The target attribute specifies where to open the linked document.
    <a ... target="_blank">link</a>
    - _blank - Opens the linked document in a new window or tab
    - _self - Opens ... in the same window/tab as it was clicke/d (default)
    - _parent -Opens ... in the parent frame
    - _top -Opens ... in the full body of the body(break out of the frame)
    - framename -Opens ... in a named frame
*** Image as Link
    #+BEGIN_SRC html
    <a href="default.asp">
      <img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;border:0;">
    </a>
    #+END_SRC
*** Link Titles
    连接内容提示
    #+BEGIN_SRC html
    <a href="https://www.w3schools.com/html/" title="Go to W3Schools HTML section">Visit our HTML Tutorial</a>
    #+END_SRC
*** Create a Bookmark
    HTML bookmarks are use/d to allow reader to jump to specific parts of a web page.
    Bookmark can be useful if your webpage is very long.
    To make a bookmark, you mast first create the bookmark, and then add a link to it.
    <h2 id="C4">Chapter 4</h2>
    <a href="#C4">Jump to Chapter4</a>
    <a href="html_demo.html#C4">Jump to C4 from another page</a>
*** External Paths
    <a href="https://www.w3schools.com/html/default.asp">HTML tutorial</a>
** 13. HTML Images(图片)
   Images can improve the design and appearance of a web page.
*** Syntax
    <img src="url">
*** The alt Attribute
    <img src="url" alt="Flowers in Chania">
*** Image Size - Width and Height
    <img src="img_girl.jpg" alt="Girl in a jacket" style="width:500px;height:600px;">
    <img src="img_girl.jpg" alt="Girl in a jacket" width="500" height="600">
*** Images in Another Folder
    <img src="/images/html5.gif">
*** Images on Another Server
    <img src="https://aaa/images/w3school_green.jpg">
*** Animated Images
    <img src="programming.gif">
*** Image as a Link
    <a href="sss.html"><img src="aaa.jpg"></a>
*** Image Floating
    loat:right
    <style="float:right;width:32px;height:42px;">
    #+BEGIN_SRC html
    <p>
    <img src="smiley.gif" alt="Smiley face" style="float:right;width:42px;height:42px;">
    A paragraph with a floating image. A paragraph with a floating image. A paragraph with a floating image.
    </p>
    #+END_SRC
*** Image Maps
    The <map> tag defines an image-map.
    An image-map is an image with clickable areas.
    允许点击图片内部的区域，跳转到某连接
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html>
    <body>

    <h2>Image Maps</h2>
    <p>Click on the computer, the phone, or the cup of coffee to go to a new page and read more about the topic:</p>

    <img src="workplace.jpg" alt="Workplace" usemap="#workmap" width="400" height="379">

    <map name="workmap">
      <area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
      <area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
      <area shape="circle" coords="337,300,44" alt="Cup of coffee" href="coffee.htm">
    </map>

    </body>
    </html>
    #+END_SRC

*** Background Image
    To add a background image on an HTML element, use CSS property:
    background-image:
    #+BEGIN_SRC html
    <body style="background-image:url('clouds.jpg')">
    <h2>Background Image</h2>
    </body>
    #+END_SRC
*** The <picture> Element
    HTML5 introduced the <picture> element to add more flexibility when sepcifying
    image resources.
    The <picture> element contains a number of <source> elements, each referring to 
    different image sources. This way the browser can choose the image that best fits
    the current view and/or device.
    Each <source> element have attributes describing when their image is the most suitable.
    The browser will use the first <source> element with matching attribute values, 
    and ignore an following <source> elements.
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html>
    <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>

    <h2>The picture Element</h2>

    <picture>
      <source media="(min-width: 650px)" srcset="img_pink_flowers.jpg">
      <source media="(min-width: 465px)" srcset="img_white_flower.jpg">
      <img src="img_orange_flowers.jpg" alt="Flowers" style="width:auto;">
    </picture>

    <p>Resize the browser to see different versions of the picture loading at different viewport sizes.
    The browser looks for the first source element where the media query matches the user's current viewport width,
    and fetches the image specified in the srcset attribute.</p>

    <p>The img element is required as the last child tag of the picture declaration block.
    The img element is used to provide backward compatibility for browsers that do not support the picture element, or if none of the source tags matched.
    </p>

    <p><strong>Note:</strong> The picture element is not supported in IE12 and earlier or Safari 9.0 and earlier.</p>

    </body>
    </html>
    #+END_SRC
*** HTML Screen Readers
    Screen reader is a software program that reads the HTML code, converts the text
    and allows the user to "linten" to the content. Screen readers are useful for
    people who are blind, visually impaired, or learning disabled.

** 14. HTML Tables(表格)
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <head>
   <style>
   table {
       font-family: arial, sans-serif;
       border-collapse: collapse;
       width: 100%;
   }

   td, th {
       border: 1px solid #dddddd;
       text-align: left;
       padding: 8px;
   }

   tr:nth-child(even) {
       background-color: #dddddd;
   }
   </style>
   </head>
   <body>

   <h2>HTML Table</h2>

   <table>
     <tr>
       <th>Company</th>
       <th>Contact</th>
       <th>Country</th>
     </tr>
     <tr>
       <td>Alfreds Futterkiste</td>
       <td>Maria Anders</td>
       <td>Germany</td>
     </tr>
     <tr>
       <td>Centro comercial Moctezuma</td>
       <td>Francisco Chang</td>
       <td>Mexico</td>
     </tr>
     <tr>
       <td>Ernst Handel</td>
       <td>Roland Mendel</td>
       <td>Austria</td>
     </tr>
     <tr>
       <td>Island Trading</td>
       <td>Helen Bennett</td>
       <td>UK</td>
     </tr>
     <tr>
       <td>Laughing Bacchus Winecellars</td>
       <td>Yoshi Tannamuri</td>
       <td>Canada</td>
     </tr>
     <tr>
       <td>Magazzini Alimentari Riuniti</td>
       <td>Giovanni Rovelli</td>
       <td>Italy</td>
     </tr>
   </table>

   </body>
   </html>
   #+END_SRC
*** Defining an HTML Table
    An HTML table is define/d with the <table> tag.
    Each table row is define/d with the <tr> tag.
    A table header is define/d with the <th> tag.
    By default, table heading are hold and centered.
    A table data/cell is define/d with the <td> tag.
*** Adding a Border(边界)
    If you do not specify a border for the table, it will be displaye/d without borders.
    A border is se/t using the CSS border property
    每个表项都有一个边界框，导致重复边框；
    #+BEGIN_SRC css
    table, th, td {
        border: 1px solid black;
    }
    #+END_SRC
*** Collapsed Borders(折叠边界)
    将重复边框折叠成单一边框。
    If you want the borders to collapse into one border, add the CSS *border-collapse* property
    (特性/属性)
    #+BEGIN_SRC css
    table, th, td{
        border: 1px solid black;
        border-collapse: collapse;
    }
    #+END_SRC
*** Adding Cell Padding(添加表项衬垫)
    Cell padding specifies the space between the cell contennt and its borders.
    (内容与边框之间的空白部衬垫-内边距)
    If you do not specify a padding, the table cells will be displaye/d without padding.
    To set the padding, use the CSS padding property:
    #+BEGIN_SRC css
    th, td{
        padding: 15px;
    }
    #+END_SRC
*** Left-align Headings(表头左对齐)
    By default, table headings are bold and centered.(标题居中、加粗)
    To left-align the table headings, use CSS text-align property:
    #+BEGIN_SRC css
    th{
        text-align: left;
    }
    #+END_SRC
*** Add Border Spacing(边框间距)
    与collapse特性冲突
    Border spacing specifies the space between the cells.
    To set the border spacing for a table, use the CSS border-spacing property:
    *Note: If the table has collapse borders, the border-spacing has not effect.*
    #+BEGIN_SRC css
    table{
        border-spacing: 15px;
    }
    #+END_SRC

*** Cells That Span Many Columns(列合并)
    To make a cell span more than one column, use the *colspan* attribute:
    #+BEGIN_SRC css
    <table style="width:100%">
      <tr>
        <th>Name</th>
        <th colspan="2">Telephone</th>
      </tr>
      <tr>
        <td>Bill Gates</td>
        <td>55577854</td>
        <td>55577855</td>
      </tr>
    </table>
    #+END_SRC
*** Cells That Span Many Rows(行合并)
    To make a cell span more then one row, use the *rowspan* attribute:
    #+BEGIN_SRC css
    <table style="width:100%">
      <tr>
        <th>Name:</th>
        <td>Bill Gates</td>
      </tr>
      <tr>
        <th rowspan="2">Telephone:</th>
        <td>55577854</td>
      </tr>
      <tr>
        <td>55577855</td>
      </tr>
    </table>
    #+END_SRC
*** Adding a Caption(表标题)
    To add a caption, use the *<caption>* tag:
    #+BEGIN_SRC html
    <table style="width:100%">
      <caption>Monthly savings</caption>
      <tr>
        <th>Month</th>
        <th>Savings</th>
      </tr>
      <tr>
        <td>January</td>
        <td>$100</td>
      </tr>
      <tr>
        <td>February</td>
        <td>$50</td>
      </tr>
    </table>
    #+END_SRC
** 15. HTML Lists(列表)
*** Unordered HTML List(无序列表)
    An unordered list starts with the *<ul>* tag.
    Each *list item* start with the *<li>* tag.
    The list items will be marke/d with bullets(small black circles) by default:
    #+BEGIN_SRC html
    <ul>
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    </ul>
    #+END_SRC
**** Choose List Item Marker
     The CSS *list-style-type* property is use/d to define the style of the list item marker:
     |--------+------------------------------------------------|
     | value  | description                                    |
     |--------+------------------------------------------------|
     | disc   | Sets the list item marker to a bullet(default) |
     | circle | ... to a circle                                |
     | square | ... to a square                                |
     | none   | The list item will not be marked               |
     |--------+------------------------------------------------|
     #+BEGIN_SRC html
     <ul style="list-style-type:disc">
       <li>Coffee</li>
       <li>Tea</li>
       <li>Milk</li>
     </ul>
     #+END_SRC
     
*** Ordered HTML List(有序列表)
    An ordered list starts with the *<ol>* tag.
    Each list item starts with the *<li>* tag.
**** The Type Attribute
     The *type* attribute of the *<ol>* tag, define the type of the list item marker:
     |----------+------------------------------------------------------|
     | Type     | Description                                          |
     |----------+------------------------------------------------------|
     | type="1" | The list items will be numbered with number(default) |
     | type="A" | ... with uppercase letters                           |
     | type="a" | ... with lowercase letters                           |
     | type="I" | ... with uppercase roman numbers                     |
     | type="i" | ... with lowercase roman numbers                     |
     |----------+------------------------------------------------------|
          
*** Description Lists(描述列表)
    A descrition list is a list of terms, with a description of each term.
    The *<dl>* tag defines the description list, the *<dt>* tag defines 
    the term(name), and the *<dd>* tag describes each term:
    #+BEGIN_SRC html
    <dl>
      <dt>Coffee</dt>
      <dd>- black hot drink</dd>
      <dt>Milk</dt>
      <dd>- white cold drink</dd>
    </dl>
    #+END_SRC

*** Nested HTML Lists(列表嵌套)
    List items can contain new list, and other HTML elements, like images and links, etc.
    #+BEGIN_SRC html
    <ul>
      <li>Coffee</li>
      <li>Tea
        <ul>
          <li>Black tea</li>
          <li>Green tea</li>
        </ul>
      </li>
      <li>Milk</li>
    </ul>
    #+END_SRC
*** Control List Counting(控制列表计数)
    By default, an order list will start counting from 1. If you want to start counting
    from a specified number, you can use the *start* attribute:
    #+BEGIN_SRC html
    <ol start="50">
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    </ol>
    #+END_SRC

*** Horizontal List with CSS
    HTML list can be style/d in many different ways with CSS.
    One popular way is to style a list horizontally, to create a navigation menu:
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html>
    <head>
    <style>
    ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #333333;
    }

    li {
        float: left;
    }

    li a {
        display: block;
        color: white;
        text-align: center;
        padding: 16px;
        text-decoration: none;
    }

    li a:hover {
        background-color: #111111;
    }
    </style>
    </head>
    <body>

    <h2>Navigation Menu</h2>
    <p>In this example, we use CSS to style the list horizontally, to create a navigation menu:</p>

    <ul>
      <li><a href="#home">Home</a></li>
      <li><a href="#news">News</a></li>
      <li><a href="#contact">Contact</a></li>
      <li><a href="#about">About</a></li>
    </ul>

    </body>
    </html>
    #+END_SRC
** 16. HTML Blocks(块)
   Every HTML element has a default *display value* depending on what type of element it is.
   The default value for most elements is *block* or *line*.
*** Block-level Elements(块层级元素)
    A block-level element always starts on a new line and takes up the full width
    available(stretches out to the left and right as far as it can).
    The *<div>* element is a block-level element.
    
*** Inline Elements(内联元素)
    An inline element does not start on a new line and only takes up 
    as mutch width as nesscessary. 
    This is an inline *<span>* element inside a paragraph.
    
*** The <div> Element
    The *<div>* element is often used *as a container of other HTML elements*.
    The <div> element has no require attributes, but *style,class,id* are common.
    When used target with CSS, the <div> element can be use/d to *style blocks of content*:
    #+BEGIN_SRC html
    <div style="background-color:black;color:white;padding:20px;">
      <h2>London</h2>
      <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>
    </div>
    #+END_SRC
*** The <span> Element
    主要用于控制文本的CSS
    The <span> element is often used as a container for some text.
    When used target with CSS, the <span> elemnt can be use/d to *sytle part of text*:
    <h1>My <span style="color:red">Important</span> Heading</h1>
    
* 2 HTML 
** 2.1 标签和元素
 - 标签(tag)
   <标签名></标签名> ; 容器
   <br><hr> ; 不配对，空标签
 - 元素(item)
   标签中嵌套的内容就是元素
 - 属性(attribute)
   <attr>="value"
   空格分开多个标签
   属性可使用(推荐)"" 或 ''
 - 颜色
   bgcolor="#00ff00"
 - 注释
   <!-- 注释 -->
 - 字符实体
   &lt;
   &#60;
   |------+------+----------+--------|
   | 显示 | 描述 | 实体名称 | ascii  |
   |------+------+----------+--------|
   |      | 空格 | &nbsp;   | &#160; |
   | <    |      | &lt;     |        |
   | >    |      | &gt;     |        |
   | &    |      | &amp;    |        |
   | "    |      | &quot;   |        |
   | `    |      | &apos;   |        |
   |      | 商标 | &reg;    |        |
   |      | 章节 | &sect    |        |
   |      | 版权 | &copy    |        |
   |      | 乘号 | &times   |        |
   |      | 除号 | &divide  |        |
   |------+------+----------+--------|
** 2.2 主体结构
   <!DOCTYPE html>
   <html>     ; 代表html
     <head>   ; html 头
      <title>必须有标题</title>
      <base href="URL" target="WINDOW_NAME"/>
      <link rel="stylesheet" type="text/css" href="style.css"/>
      <meta name="keywords" content="meta keywords"/>
      <meta name="description" content="meta description"/>
      <object></object>
      <style></style>
      <script></script>
      
     </head>
     <body>   ; html 体
     </body>
   </html>
 - <head>
   如上；
 - <body>
   常用属性
   |--------------+--------------------------|
   | text         | 页面文字颜色             |
   | bgcolor      | 页面背景颜色             |
   | background   | 页面背景图像             |
   | bgproperties | 背景图像固定             |
   | link         | 默认链接颜色             |
   | alink        | 鼠标单击链接时的链接颜色 |
   | vlink        | 访问后链接文字颜色       |
   | topmargin    | 上边距                   |
   | leftmargin   | 左边距                   |
   |              |                          |
   | id           | 设定标签ID               |
   | name         | 标签名称                 |
   | class        | 类选择器                 |
   | style        | 样式属性                 |
   |              |                          |
** 2.3 格式标签
   | 标签     | 描述       | description  |
   |----------+------------+--------------|
   | <br>     | 换行       |              |
   | <p>      | 换段落     | paragraph    |
   | <center> | 居中       | center       |
   | <pre>    | 预格式化   | pre          |
   | <li>     | 列表       | list         |
   | <ul>     | 无序列表   | unorded list |
   | <ol>     | 有序列表   | orded list   |
   | <hr>     | 水平分割线 |              |
   |          |            |              |
** 2.4 文本标签
   | 标签    | 描述         |
   |---------+--------------|
   | <hn>    | 标题字标记   |
   | <b>     | 粗体字       |
   | <i>     | 斜体字       |
   | <u>     | 下划线       |
   | <sub>   | 文字下标字体 |
   | <sup>   | 文字上标字体 |
   | <font>  | 字体         |
   | <tt>    | 打字机文字   |
   | <cite>  | 引证、举例   |
   | <em>    | 强调斜体     |
   | <stong> | 强调粗体     |
   | <small> | 小型字体     |
   | <bit>   | 大型字体     |
   |         |              |
** 2.5 图像和链接
 - 插入图片
   <img src=URL alt=text width=num height=num border=num/>
   + alt 提示文字
   + border 边框宽度 border="2"
   + width 图片宽度
   + height 图片高度
 - 建立锚点和超链接
   <a href=URL name="name" target="target">链接文字</a>
   + target 
     _self ;default 当前窗口打开
     _blank ; 新窗口打开
     _parent ; 父窗口打开
     _top ; 顶层窗口打开
** 2.6 使用HTML表格
   | 表格        | 描述                 |
   |-------------+----------------------|
   | <table>     | 开始表格             |
   | <caption>   | 表格名称             |
   | <tr>        | 行标记               |
   | <th>/<td>   | 单元格标记           |
   |             |                      |
   | 属性        | 描述                 |
   | align       | 对齐                 |
   | border      | 外边框宽度           |
   | width       | 表格宽度             |
   | height      | 高度                 |
   | cellspacing | 单元格之间的间距(2)  |
   | cellpadding | 内容与边框之间的间距 |
   |             |                      |
   | 列属性      |                      |
   | width/he..  |                      |
   | avalign     | 水平对齐             |
   | valign      | 垂直对齐             |
   | rowspan     | 跨越行数             |
   | colspan     | 跨越列数             |
** 2.7 框架结构
   - <frameset> 划分框架
     + cols 
     + rows %分隔上下框
     + frameborder 0-无边框 1-有边框
     + border 边框粗细 5
   - <frame> 子窗口
     + src 指定文件地址
     + name 框架窗口名称
     + noresize 标记不能调整窗口大小
     + scroling auto自动 Yes有 No无
     + frameborder
     + border
** 2.8 表单设计
   - <form> 表单
     + <input>
       <input type="text" name="field_name" value="field_value" size="n" maxlength="n">
       <input type="password" name="field_name" value="field_value" size="n" maxlength="n">
       <input type="submit" name="fname" value="fvalue">
       <input type="reset" name="" value="">
       <input type="button" name="" value="">
       <input type="radio" name="" value="" checked>
       <input type="checkbox" name="" value="" checked>
       <input type="hidden" name="" value="">"
     + <select>
       <select name="" size="" multiple>
         <option value="value" selected>选项A</option>
         <option value="value" selected>选项B</option>
       </select>
     + <textarea>
       <textarea name="" rows="" cols="" value="">
       </textarea>
     + 属性
       <form action="login.php" method="post">
       - method GET(default)/POST
       - action URL(处理程序名)
       - enctype 表单编码方式
       - target 指定目标窗口或目标帧 

* 3 CSS 层叠样式表
** 3.1 简介
   Cascading Style Sheet 
   - 精确定位
   - 分离内容和格式
   - <style> 内嵌到HTML 或 单独保存
     <style>
       p{
         font-size:30px;
         color:yellow;
         border:2px solid blue;
         text-align:center;
         background:green
       }
     </style>
** 3.2 规则
   选择器 + 声明
   <h1 style="font-size:x-large;color:red">一级标题</h1>
   - 长度单位
   - 颜色单位
     #rrggbb
     rgb(r,g,b)
     rgb(r%,g%,b%)
   - 链接到外部样式表
     <link rel="StyleSheet" href="style.css" type="text/css">
** 3.4 选择器
 - HTML选择器
   p{text-ident:3em}
   h1{color:red}
 - 类选择器
   p.dart-row{background-color:#EAEAEA;}
   p.light-row{background-color:#F8F8F8;}
   <p class="dark-row">第一段</p>
   <p class="light-row">第二段</p>
 - ID选择器
   #main{text-ident:3em}
   <p id="main">文本缩进3em</p>
 - 关联选择器
   table a {color:red} /*只有在表格<table> 内的 <a> 样式改变*/
 - 组合选择器
   h1,h2,h3,h4{color:red;font-family:sans-serif}
 - 伪元素选择器
   a:link{color:red}
   a:hover{color:yellow;font-size:125%;}
   a:active{color:blue;}
   a:visited{color:blue;}
** 3.5 属性和值
 - 字体属性
 - 颜色
 - 背景
 - 文本
 - 边框
   border-style:solid;
 - 光标
   p{cursor:pointer/hand/crosshair/text/wait/help;}
 - 列表
* 4 DIV+CSS
  div/span 
* PHP 基础篇
** 5 搭建PHP开发环境
  ubuntu:
  $ sudo apt-
** 6 PHP基础语法
 - 服务器端语言
   前端语言：HTML/CSS/JavaScript 
   服务器端: PHP
 - 嵌入到HTML
   CSS/JavaScript可浏览器解析;
   PHP服务器端解析；
 - 脚本语言
 - PHP功能
   Wab开发服务器端脚本程序；
   + 收集表单数据
   + 生成动态页面
   + 字符串处理
   + 动态输出图像
   + 处理服务器段文件系统
   + 数据库支持
   + 会话跟踪
   + MXL处理
   + 支持大量网络协议
   + 其他操作
 - 第一个脚本
 - 变量
   $<name> = <value>
   $int = 100;
   $str = "string";
   $bool = true;
   $double = 99.99
   $var = $var1 = $int
   
   unset(); // 释放变量
   isset(); // 测试变量
   empty(); // 测试变量空

   变量名区分大小写；
   内置函数不区分大小写；
   不能以数字打头；
   不能带空格；

   + 可变变量
     $hi = "hello";
     $$hi = "world";
     echo "$hi $hello<br>";
     echo "$hi ${$hi}<br>"; // hello world

   + 变量总是传值赋值；

   + &引用赋值；
     $foo = "bob";
     $bar = &$foo;
     $bar = "My name is bob";
     echo $bar<br>;
     echo $foo<br>;

   + 变量类型(php 根据程序上下文确定)
     var_dump();
     - 标准类型
       + boolean
       + integer
       + float
       + string 
         $foo=123
         "$foo" // 输出变量值 123
         '$foo' // 输出变量名 $foo
         <<<EOT
           multiline
           多行文本
         EOT;
     - 复合类型
       array 

       $arr = array("foo"=>"bar", 12=>true);
       print_r($arr);
       echo $arr["foo"];
       echo $arr[12];

       object 
       
       class Persion{
       var $name;
       function say(){
       echo "$name Doing foo.";
       }
       }
       $p = new Person;
       $p->name = "Tom";
       $p->say();
     - 特殊类型
       resource 
       保存到外部资源的一个引用;
       文件、数据库链接、画布区域等特殊句柄；
       $file_handle = fopen("info.txt", "w");
       var_dump($file_handle); // resource(3) of type (stream)

       NULL
       $a=NULL;
       $b;
       $c="ccc";
       unset($
     - 伪类型
       mixed
         gettype();str_replace();
       number integer/float
       callback 除array(),echo(),empty(),eval(),exit(),isset(),list(),print(),unset();
     - 类型转换
       自然转换
       强制类型转换
       $foo=10;
       $bar=(boolean)$foo;
     - 类型测试函数
       is_bool/int/float/string/array/object/resource();
       is_null/scalar/number/callable();
     - 常量(只能是标量: boolean/integer/float/string)
       boolean define(string name, mixed value, [, bool case_insensitive]);
       define("CON_INT", 100);
       if(defined("CON_INT")){
       echo CON_INT;}
       | 预定义常量         | 常量值     | 说明 |
       |--------------------+------------+------|
       | PHP_OS             | UNIX/WINNT |      |
       | PHP_VERSION        |            |      |
       | TRUE/FALSE         |            |      |
       | DIRECTORY_SPARATOR | \or/       |      |
       | PATH_SEPARATOR     | ;or:       |      |
       | E_ERROR            | 1          |      |
       | E_WARNING          | 2          |      |
       | EPARSE             |            |      |
       | E_NOTICE           |            |      |
       | M_PI               | 3.1415926  | pi   |
       | __FILE__           |            |      |
       | __LINE__           |            |      |
       | __FUNCTION__       |            |      |
       | __CLASS__          |            |      |
       | __METHOD__         |            |      |
     - 运算符
       +、-、*、/、%、++、--
       str1.str2
       =/+=/-=/*=//=/%=/.=
       > < >= <= == === <> != !==
       and && or || not ! xor
       & | ^ ~ <(<) (>)>
       ?:
       `` ; `ls -la`
       @ $sum=100/0 ; 忽略除0错误
 - 流程控制
   + 条件控制
     if(exp){}elseif{}else{}
     switch(exp){
     case val1:
     //...
     break;
     devault:
     //...
     }
   + 循环
     while(exp){}
     do{}while(exp);
     for(;;){}
     break;
     continue;
     exit;
 - 函数定义
   + 声明
     function <name>([arg1, arg2, ... ,argn]){
       // body 
       static $a=0; // 静态变量
       return value;
     }

   + 默认参数、可变参数
     func_num_args();
     func_get_arg($i);

   + 回调函数 
     mixed funName(callback arg)
     call_user_func_array() // 自定义回调函数
     静态函数和对象方法回调

   + include()/requare()
     include() lazy load;
     requare() preload;
 - 数组和数据结构
   + indexed 索引数组
   + associatev 关联数组
   + 多维数组
     array{
       array{},
     };
   + 遍历
     mysql_fetch_row();
     for($i=0; $i<count($arr);$i++){
     echo $arr[$i];
     }
     foreach(arr as $value){
       // body
     }
     list()/each()/while()
   + 数组指针控制函数
     current();
     key();
     next();
     prev();
     end();
     reset();
   + 预定义数据 
     $_SERVER
     $_ENV 
     $_GET 
     $_POST 
     $_REQUEST 
     $_FILES 
     $_COOKIE 
     $_SESSION 
     $GLOBALS
   + 数组操作函数
     ...
 - 面向对象程序设计 
   + 类声明
     [abstract|final] class Person{
     function __construct($name=""){
       $this->name=$name;
     }
     function __destruct(){
       echo 'bye '.$this->name.'<br>';
     }
     function say(){
     echo 'my name is'.$this->name.'<br';
     }
     var $name;
     public $pub_val;
     private $pri_val;
     static $s_val;
     }

     class Student extends Person{
     function __construct($name, $school){
       parent::__construct($name);
       self::$count++;
       $this->school = $school;
     }
     function __clone(){
       $this->name = "I'am clone of ".$that->name;
     }
     public __toString(){
       return $this->name;
     }
     function __call($fun, $args){
       // 调用不存在方法是自动进入该方法
     echo 'function '.$fun.'not exists <br>';
     print_r($args);
     }
     function __sleep(){
     $arr=array("name");
     return($arr);
     }
     function __wakeup(){
     $this->name="aaa"; // 可对对象重新赋值;
     }
     static $count;
     const CONSTANT='constant value';
     public $school;
     }

     $man = new Student;
     if($msn instanceof Person){
       echo "$man is Person";
     }
     $man1 = clone $man;

     function __autoload($className){
     include(strtolower($className).'.class.php');
     }

     <?php 
     // serialize.php
     require "person.class.php";
     $person = new Person("name");
     $person_string = serialize($person);
     file_put_contents("file.txt", $person_string);
     ?>
     <?php
     // unserialize.pnp
     require "person.class.php";
     $person_string = file_get_contents("file.txt");
     $person = unserialize($person_string);
     $person->say();
     ?>
   + 预定义方法
     __set(name, value);
     __get();
     __call();
     __toString();
     __autoload();
   + 接口技术
     interface <name>{
     const CONSTANT = "CONSTANT value";
     // member 
     // function 
     }
     class Cname implements Iname1, Iname2, Iname3{}
 - 字符串处理
 - 正则表达式
   preg_match/match_all/replace/split/grep/replace_callback();
   '/<a.*?(?:|\\t|\\r|\\n)?href=[\'""]
** 7 PHP常用功能模块
*** 7.1 错误异常处理 
*** 7.2 日期时间
*** 7.3 文件系统
 - 文件管理
    filetype('/etc/passwd');
    // Block/Char/Dir/Fifo/File/Link/Unknow
    file_exists()
    file_size()
    is_readable()
    is_wiritable()
    is_executable()
    file[c|n|a]time()
    stat()
    
    basename();
    dirname();
    pathinfo();

    opendir()
    readdir()
    closedir()
    rewinddir()
    
    mkdir()
    rmdir()
    unlink()
    
    copy()
    
    fopen()
    fclose();
    fwrite();
    ftell()
    fseek()
    frewind()
    flock(handle, LOCK_SH/EX/UN/NB)

    allow_url_fopen 
 - 文件上传
   <form action='upload.php' method='post' enctype='multipart/form-data'>
   <input type='hidden' name="MAX_FILE_SIZE" value='1000000'>
   选择文件:<input type='file' name='myfile'>
   <input type='submit' value='上传文件'>
   </form>
   
   is/move_uploaded_file()
   <?php
   $allowtype=array("gif", "png", "jpg", "cpp", "c", "h", "hpp"); // 设置允许上传类型
   $size=2*1024*1024;
   $path="./uploads";
   if($_FILES['myfile']['error']>0){
   echo '上传错误';
   }
   $hz = array_pop(expload(".", $_FILES['myfile']['name']));
   if(!in_array($hz, $allowtype)){
   die("not allow file type <b>($hz)</b>")
   }
   $filename = date("YmdHis").rand(100,999).".".$hz;
   if(is_uploaded_file($_FILES['myfile']['tmp_name'])){
   if(!move_upload_file($_FILES['myfile']['tmp_name'], $path."/".$filename)){
   die("不能移动文件到指定目录");
   }
   }
   ?>

   文件下载
   <a href="http://path/book.rar">下载文件</a>
 - 动态图片处理
   GD图片库
 - 数据库开发
   
*** 高级开发
 - memcache
 - 会话控制
 - 模板引擎
 - MVC模式

* www进化论
本文旨在向广场舞大妈(外行)了解网站原理；
假设你是一个70年代的天才科学家，突然厌倦了看报纸，想自自己的电脑上看报纸；
电脑上看报纸那怎么搞呢？
报纸首先得有纸呀！
于是吃包泡面功夫你做了张纸就叫浏览器(browser)。
现在有纸了得有印刷机在上面印字呀！
于是吃包泡面功夫你做了印刷机叫浏览器内核引擎。
有了印刷机，但他不知道怎么排版！
又吃包泡面，你发明了HTML(超文本标记语言)来告诉打印机怎么排版。
但大妈很好学，很想知道HTML是怎么告诉打印机排版的。
于是大妈默默的递给你一碗泡面，于是你感动了。
一张报纸的内容，在电脑里叫一份文档(document)名字如index.html
报纸的名称在文档里写作<head><title>钱江晚报</title></head>
报纸里面有篇报道(element)西湖第一朵荷花开了，
报道的(heading)大标题叫<h1>西湖第一朵荷花开了</h1>
报道的内容(paragraph)叫段落<p>真每的荷花啊...</p>