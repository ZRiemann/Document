* https://developer.mozilla.org
  https://github.com/mdn
  https://pages.github.com/
** HTML
 - HTML: Hypertext Markup Language
   - elements
     - <tags>
       tags is used for creating an element
       <p>My cat is very grumpy</p>
       - Opening tag
         <p>
         - Attribute
           syntax: <key>="value"
           example: <p class="editor-note"> ... </p>
           - <attr-name>
           - disabled
       - content
         My cat is very grumpy.
         - nesting element
           <p>My cat is <strong>very</strong> grumpy.</p>
         - empty element
           <img src="images/firefox-icon.png" alt="My test image">
       - closing tag
         </p>
     - defined-elements
       - Marking up text
         - Headings(段落标题)
           <h1>...<h6>
         - Paragraphs(段落)
           <p>段落</p>
         - [[Lists]](列表)
           - List item(列表项)
             - tag: <li>
           - Unorded lists(无序)
             - tag: <ul></ul>
           - Ordered lists(有序)
             - tag: <ol><ol>
           - [[Description lists]](描述列表)
           - example
             #+BEGIN_SRC html
             <p>At Mozilla, we’re a global community of technologists, thinkers, and builders working together ... </p>

             <!-- use list -->
             <p>At Mozilla, we’re a global community of</p>
                 
             <ul> 
               <li>technologists</li>
               <li>thinkers</li>
               <li>builders</li>
             </ul>

             <p>working together ... </p>
             #+END_SRC
         - [[Links]](链接)
           - tag: <a> ;anchor
           - attrs
             - href="<url>" ; hypertext reference
             - title="The Moilla homepage" ; 鼠标悬停提示
             - target="_blank" ; 打开方式，新标签叶连接
           - example
             #+BEGIN_SRC html
             <a href="www.example.org">example.org</a>
             #+END_SRC
       - Multimedia and embedding
         - <img>
           <img src="<url>" [alt="desc" width="" height="" ...]>
           - attrs:
             - alt: alternative
               - alt="" ; 装饰
               - "descripton" ; 内容
               - 连接
             - src
             - width/height ; 避免使用，用CSS替代
             - title ; 鼠标悬停内容提示
         - <figure><figcaption>
           - instruction
             图片语义容器
       - Heading elements
         - <title> ; html标题，书签
         - <meta> ; 元数据
           #+BEGIN_SRC html
           <meta charset="utf-8">
           <!-- 方便联系管理员 -->
           <meta name="author" content="Chris Mills">
           <!-- 搜索引擎获取该描述 -->
           <meta name="descriptoin" content="The MDN Learning ...">

           <!-- 元数据协议 -->
           <meta property="og:image" content="https://developer.cdn.mozilla.net/static/img/opengraph-logo.dc4e08e2f6af.png">
           <meta property="og:description" content="The Mozilla Developer Network (MDN) provides
           information about Open Web technologies including HTML, CSS, and APIs for both Web sites
           and HTML5 Apps. It also documents Mozilla products, like Firefox OS.">
           <meta property="og:title" content="Mozilla Developer Network">
           #+END_SRC
         - <link> ; 连接外部资源
           #+BEGIN_SRC html
           <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
           <link rel="stylesheet" href="my-css-file.css">
           #+END_SRC
         - <script> ; 引入javascript资源
           #+BEGIN_SRC html
           <script src="my-js-file.js"></script>
           #+END_SRC
         - <head> ; html 头
           #+BEGIN_SRC html
           <!-- lang属性1.有助搜索 2. 有助发音-->
           <html lang="en-US"></html>
           #+END_SRC
   - document
     - Entity reference
       - < &lt;
       - > &gt;
       - " &quot;
       - ' &apos;
       - & &amp;
     - comments ; <!-- some ting else -->
     - structure
       - <!DOCTYPE html>
       - <html>
         - <head>
           - introduction
             不显示在页面中，包含一些页面的元数据。
         - <body>
     - example
       how individual elements are combined to form an entire HTML page.
       #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
         <head>
           <meta charset="utf-8">
           <title>My test page</title>
         </head>
         <body>
           <img src="images/firefox-icon.png" alt="My test image">
         </body>
       </html>
       #+END_SRC
   - CSS(Cascading Style Sheets层叠样式表)
     - introduction 控制网页样式，如字体、颜色、背景
     - syntax
       - Selector(选择器)
         - 分类
           - Element
             All HTML elements of the specified type
           - ID
             The element on the page with the specified ID.
             #+BEGIN_SRC css
             #my-id {
                 color: red;
             }
             #+END_SRC
             #+BEGIN_SRC html
             <p id="my-id">paragraph with id:my-id</p>
             <a id="my-aid">arcon with the id:my-id</a>
             #+END_SRC
           - Class
             The element on the page with the specified class
             #+BEGIN_SRC css
             .my-class {
                 color: red;
             }
             #+END_SRC
             #+BEGIN_SRC html
             <p class="my-class">paragraph wit the class: my-class</p>
             #+END_SRC
           - Attribute
             img[src]
             Selects <img src="myimage.png"> but not <img>
           - Pseudo-class
             a:hover
             Select <a>, 
             but only when the mouse pointer is hovering over the link.
       - Declaration(声明)
         指定了你想要添加样式元素的属性。 用{...}
         color: red;
         <propertie>: <value>;
         - Properties
         - Properties value
     - example
       控制段落颜色,保存到sytles/style.css
       #+BEGIN_SRC css
       p {
           color: red;
           width: 500px;
           border: 1px solid black;
           font-size: 16px;
           line-height: 2;
           letter-spacing: 1px;
       }
       p, li, h1 {
           color: red;
       }

       html{
           font-size: 10px; /* 字体大小 10 像素*/
           font-family: 'Open Sans', sans-serif; /* 使用Open Sans字体*/
           background-color: #00539f;
       }

       body{
           width: 600px;
           margin: 0 auto;
           background-color: #FF9500;
           padding: 0 20px 20px 20px;
           border: 5px solid black;
       }
       h1{
           font-size: 60px;
           text-align: center; /* 居中 */
           margin: 0;
           padding: 20 0;
           color: #00539f;
           /* 1. 水平对齐
            ,* 2. 垂直对齐
            ,* 3. 模糊半径
            ,* 4. 阴影基色
            ,*/
           text-shadow: 3px 3px 1px black;
       }
       img{
           display: block;
           margin: 0 auto; /* 居中图像 */
       }
       #+END_SRC
       index.html 调用样式表styles/style.css
       #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
         <head>
           <link href="styles/styles.css" rel="stylesheet" type="text/css">
           <link href="http://fonts.googleepis.com/css?family=Open+Sans" rel="stylesheet" type="text/css">
         </head>
       </html>
       #+END_SRC
     - layout(box布局)
       - properties
         - padding(内边距) ;around paragraph text
         - border(边框) ；the solid line that sits just outside the padding
         - margin(外边距) ; the space around the outside of element
         - width(宽度)
         - background-color(背景色)
         - color(前景色，通常字体颜色)
         - text-shadow(文本阴影)
         - display(显示模式)
       - level 级别
         - block ; 块级别
         - inline ; 内联级别
           css:display: block; 内联级别升级到块级别
   - JavaScript
     - introduction
       - program language
         add interactive to your website(like games)
       - Browser APIs
         #+BEGIN_SRC javascript
         /* scripts/main.js
          ,*/
         var myHeading = document.querySelector('h1');
         myHeading.textContent = 'Hello world!';
         #+END_SRC
         #+BEGIN_SRC html
         <body>
           <script src="scripts/main.js"></script>
         </body>
         #+END_SRC
       - Third-party APIs
       - Third-party frameworks/libs
     - variable
       - syntax
         var vname;
       - type
         - string
         - number
         - boolean
         - array
         - object
     - comments /**/
     - Operators
       - +,-,*,/
       - = ;赋值
       - === ; 比较
       - !   ; 非
       - !== ; 不等于
     - control
       #+BEGIN_SRC javascript
       var iceCream = 'chocolate';
       if(iceCream === 'chocolate'){
           alert('Yay, I love chocolate ice cream!');
       }else{
           alert('Awww, but chocolate is my favorite...');
       }
       #+END_SRC
     - function
       #+BEGIN_SRC javascript
       function mutiply(num1, num2){
           var result = num1 * num2;
           return result;
       }
       #+END_SRC
     - events
       #+BEGIN_SRC javascript
       document.querySelector('html').onclick = function(){
           alert('Ouch! Stop poking me!');
       }
       #+END_SRC
     - examples
       - 图片切换
         #+BEGIN_SRC javascript
         var myImage = document.querySelector('img');
         myImage.onclick = function(){
             var mySrc = myImage.getAttribute('src');
             if(mySrc === 'images/firefox-icon.png'){
                 myImage.setAttribute('src', 'images/firefox2.png');
             }else{
                 myImage.setAttribute('src', 'images/firefox-icon.png');
             }
         }
         #+END_SRC
       - 个性化欢迎
         Web Storage API
         #+BEGIN_SRC html
         </body>
         <button>Change user</button>
         <script src="scripts/main.js"><script>
         <body>
         #+END_SRC
         #+BEGIN_SRC javascript
         var myButton = document.querySelector('button');
         var myHeading = document.querySelector('h1');

         function setUserName(){
             var myName = prompt('please enter your name.');
             localStorage.setItem('name', myName);
             myHeading.textContent = 'Mozilla is cool,' + myName;
         }

         if(!localStorage.getItem('name')){
             setUserName();
         }else{
             myHeading.textContent = 'Mozilla is cool,' + localStorage.getItem('name');
         }
         #+END_SRC
*** Text fundamentals(文本基础)
 - Implementing structural hierarchy
   #+BEGIN_SRC html
   <h1>The Crushing Bore</h1>

   <p>By Chris Mills</p>

   <h2>Chapter 1: The Dark Night</h2>

   <p>It was a dark night. Somewhere, an owl hooted. The rain lashed down on the ...</p>

   <h2>Chapter 2: The eternal silence</h2>

   <p>Our protagonist could not so much as a whisper out of the shadowy figure ...</p>

   <h3>The specter speaks</h3>

   <p>Several more hours had passed, when all of a sudden the specter sat bolt upright and exclaimed, "Please have mercy on my soul!"</p>
   #+END_SRC
   - 建议
     - <h1> 是顶级标题，每个页面调用一次
     - <h1><h2><h3>...顺序使用标题
     - 适当控制级别深度
 - Why do we need structure?
   - 突出重点
   - 有利搜索引擎检索关键字
   - 视力障碍者，通过屏幕阅读器快速定位文本内容
   - CSS，javascript控制更加精细
 - Why do we need semantics?
   - <h1> 是一个语意元素，语意值将被多种方式使用如：标题、搜索优化、屏幕阅读
   - <span> 不是语意元素
 - Lists
   #<<Lists>>
   - Unordered
     #+BEGIN_SRC html
     <ul>
       <li>牛奶</li>
       <li>鸡蛋</li>
       <li>面包</li>
       <li>鹰嘴豆泥</li>
     </ul>
     #+END_SRC
 - Emphasis and importance(重点与强调)
   HTML提供相关语意来表达重点和强调等效果
   - Emphasis(强调)
     - element: <em>
     - 标识讽刺语句
       <p>I am <em>glad</em> you weren't <em>late</em>.</p>
   - Strong importance(重点)
     - elements: <strong>
     if you drink it, <strong>you may <em>die</em></strong>.</p>
 - italic,bold,underline
   <i> 被用来传达传统上用斜体表达的意义：外国文字，分类名称，技术术语，一种思想……
   <b> 被用来传达传统上用粗体表达的意义：关键字，产品名称，引导句……
   <u> 被用来传达传统上用下划线表达的意义：专有名词，拼写错误……
*** Advance text foramt
 - Description Lists
   #<<Description lists>>
   - elements: <dl> <dt> <dd>
   - example
     #+BEGIN_SRC html
     <dl>
       <dt>soliloquy</dt>
       <dd>In drama, where a character speaks to themselves, representing their inner thoughts or feelings and in the process relaying them to the audience (but not to other characters.)</dd>
       <dt>monologue</dt>
       <dd>In drama, where a character speaks their thoughts out loud to share them with the audience and any other characters present.</dd>
       <dt>aside</dt>
       <dd>In drama, where a character shares a comment only with the audience for humorous or dramatic effect. This is usually a feeling, thought or piece of additional background information.</dd>
     </dl>
     #+END_SRC
 - Qutations
   - 块引用
     - <blockquote>
   - 行内引用
     - <q>
   - 引文
     #+BEGIN_SRC html
     <p>According to the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
     <cite>MDN blockquote page</cite></a>:
     </p>

     <blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
       <p>The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or <em>HTML Block
       Quotation Element</em>) indicates that the enclosed text is an extended quotation.</p>
     </blockquote>

     <p>The quote element — <code>&lt;q&gt;</code> — is <q cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">intended
     for short quotations that don't require paragraph breaks.</q> -- <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">
     <cite>MDN q page</cite></a>.</p>
     #+END_SRC
 - Abbreviations(缩略语)
   - <abbr>
     #+BEGIN_SRC html
     <p>We use <abbr title="Hypertext Markup Language">HTML</abbr> to structure our web documents.</p>

     <p>I think <abbr title="Reverend">Rev.</abbr> Green did it in the kitchen with the chainsaw.</p>
     #+END_SRC
 - Marking up contact details
   - <address>
     #+BEGIN_SRC html
     <p>Chris Mills, Manchester, The Grim North, UK</p>
     #+END_SRC
 - Superscript and subscript
   - <sup><sub>
     #+BEGIN_SRC html
     <p>My birthday is on the 25<sup>th</sup> of May 2001.</p>
     <p>Caffeine's chemical formula is C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>.</p>
     <p>If x<sup>2</sup> is 9, x must equal 3 or -3.</p>
     #+END_SRC
 - Representing computer code
   - <code>: 用于标记计算机通用代码。
   - <pre>: 对保留的空格（通常是代码块）——如果您在文本中使用缩进或多余的空白，
            浏览器将忽略它，您将不会在呈现的页面上看到它。
            但是，如果您将文本包含在<pre></pre>标签中，
            那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。
   - <var>: 用于标记具体变量名。
   - <kbd>: 用于标记输入电脑的键盘（或其他类型）输入。
   - <samp>: 用于标记计算机程序的输出。
 - Marking up time and dates
   方便计算机识别
   - <time>
     <time datetime="2016-01-20">20 January 2016</time>
*** Document and website structure
 - Basic section of a document
 - HTML for structuring content
   我们需要遵守语义，并 *使用正确的元素进行语义化工作* 。
   - <header>
   - <nav>
   - <main>,<article>,<section>,<div>
   - <aside>
   - <footer>
   - 无语意元素
     - <div>
     - <span>
     - <br> ; 换行
     - <hr> ; 水平分隔线

*** HTML 表单
 - 表单验证
   - HTML5 内置教研
     - <input required>
     - <pattern>
     - <minlength>
     - <maxlength>
     - <min>
     - <max>
     - <step>
   - javascript
     - validationMessage
     - validity
     - validity.customError
 - 
*** CSS
 - @<rule>
   - @media
     #+BEGIN_SRC css
     @media (min-width: 801px){
         body{
             margin: 0 auto;
             width: 800px;
         }
     }
     #+END_SRC
 - 可读性
  
** CSS
 - 基础
   #+BEGIN_SRC css
   div p, #id:first-line{
       background-color: red;
       background-style: none;
   }
   #+END_SRC
 - 类型
   - Simple: type,class,id
     - type/element selectors
       #+BEGIN_SRC html
       <p>what color do you like?</p>
       <div>I like blue.</div>
       <p>I prefer red!</p>
       #+END_SRC
       #+BEGIN_SRC css
       p {
           color: red;
       }
       div {
           color: blue;
       }
       #+END_SRC
     - class selectors
       .<class-name>
       #+BEGIN_SRC html
       <ul>
         <li class="first done">Create a HTML docuemnt</li>
         <li class="second done">Created a CSS style sheet</li>
         <li class="third">link them all togeter</li>
       </ul>
       #+END_SRC
       #+BEGIN_SRC css
       .first {
           font-weight: bold;
       }
       .done {
           text-decoration: line-through;
       }
       #+END_SRC
     - id selectors
       #<ID-name>
       #+BEGIN_SRC html
       <p id="polite">- "Goold morning."</p>
       <p id="rude">- "Go away!"</p>
       #+END_SRC
       #+BEGIN_SRC css
       #polite {
           font-family: cursive;
       }

       #rude {
           font-family: monospace;
           text-transform: uppercase;
       }
       #+END_SRC
     - universal selector
       (*) 有性能损失
       #+BEGIN_SRC html
       <div>
         <p>I think the containing box just needed
         a <strong>border</strong> or <em>something</em>,
         but this is getting <strong>out of hand</strong>!</p>
       </div>
       #+END_SRC
       #+BEGIN_SRC css
       ,* {
         padding: 5px;
         border: 1px solid black;
         background: rgba(255,0,0,0.25)
       }
       #+END_SRC
   - Attribute: 通过 属性 / 属性值 匹配一个或多个元素
     [<attr>]
     [<attr>=<val>]
     [<attr>~=<val>]
     - data-* 
       本例中的 data-* 属性被称为 数据属性。
       它们提供了一种在HTML属性中存储自定义数据的方法，
       由此，这些数据可以轻松地被提取和使用。有关详细信息，请参阅 如何使用数据属性。
     #+BEGIN_SRC html
     <i lang="fr-FR">Poulet basquaise</i>
     <ul>
     <li data-quantity="1kg" data-vegetable>Tomatoes</li>
     <li data-quantity="3" data-vegetable>Onions</li>
     <li data-quantity="3" data-vegetable>Garlic</li>
     <li data-quantity="700g" data-vegetable="not spicy like chili">Red pepper</li>
     <li data-quantity="2kg" data-meat>Chicken</li>
     <li data-quantity="optional 150g" data-meat>Bacon bits</li>
     <li data-quantity="optional 10ml" data-vegetable="liquid">Olive oil</li>
     <li data-quantity="25cl" data-vegetable="liquid">White wine</li>
     </ul>
     #+END_SRC
     #+BEGIN_SRC css
     /* 所有具有"data-vegetable"属性的元素将被应用绿色的文本颜色 */
     [data-vegetable] {
     color: green
     }

     /* 所有具有"data-vegetable"属性且属性值刚好为"liquid"的元素将被应用金色的背景颜色 */
     [data-vegetable="liquid"] {
     background-color: goldenrod;
     }

     /* 所有具有"data-vegetable"属性且属性值包含"spicy"的元素，
     即使元素的属性中还包含其他属性值，都会被应用红色的文本颜色 */
     [data-vegetable~="spicy"] {
     color: red;
     }
     #+END_SRC
     - Substring value selectors
       - syntax
         [<atrr>|=val] 选择attr属性的值是 val 或值以 val- 开头的元素
         [<attr>^=val] 选择attr属性的值以 val 开头（包括 val）的元素。
         [<attr>$=val] 选择attr属性的值以 val 结尾（包括 val）的元素。
         [<attr>*=val] 选择attr属性的值中包含子字符串 val 的元素
       - sample
         #+BEGIN_SRC css
         /* 语言选择的经典用法 */
         [lang|="fr"] {
           font-weight: bold;
         }

         /* 
             具有"data-vegetable"属性含有值"not spicy"的所有元素,都变回绿色
         ,*/
         [data-vegetable*="not spicy"] {
           color: green;
         }

         /* 
            具有"data-quantity"属性其值以"kg"结尾的所有元素*/
         [data-quantity$="kg"] {
           font-weight: bold;
         }

         /* 
            具有属性"data-quantity"其值以"optional"开头的所有元素 
         ,*/
         [data-quantity^="optional"] {
           opacity: 0.5;
         }
         #+END_SRC
   - Pseudo-classes: 匹配处于确定状态的一个或多个元素
     比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是DOM树中一父节点的第一个子节点。
     - syntax
       :<pseudo-class>
     - peusdo-class items
       :valid
       :visited
       ...
     - example
       #+BEGIN_SRC html
       <a href="https://developer.mozilla.org/" target="_blank">Mozilla Developer Network</a>
       #+END_SRC
       #+BEGIN_SRC css
       /* 这些样式将在任何情况下应用于我们
       的链接 */

       a {
         color: blue;
         font-weight: bold;
       }

       /* 我们想让被访问过的链接和未被访问
       的链接看起来一样 */

       a:visited {
         color: blue;
       }

       /* 当光标悬停于链接，键盘激活或锁定
       链接时，我们让链接呈现高亮 */

       a:hover,
       a:active,
       a:focus {
         color: darkred;
         text-decoration: none;
       }
       #+END_SRC
   - Pseudo-elements: 匹配处于相关的确定位置的一个或多个元素
     例如每个段落的第一个字，或者某个元素之前生成的内容。     
   - Combinators: 有效的方式组合两个或更多的选择器
                  用于非常特定的选择的方法。
                  你可以只选择divs的直系子节点的段落，
                  或者直接跟在headings后面的段落。
   - Multiple:这个思路是将以逗号分隔开的多个选择器放在一个CSS规则下面
 - 值和单位
   - Numeric values
     - Length and size
       #+BEGIN_SRC html
       <p>This is a paragraph.</p>
       <p>This is a paragraph.</p>
       <p>This is a paragraph.</p>
       #+END_SRC
       #+BEGIN_SRC css
       p {
         margin: 5px;
         padding: 10px;
         border: 2px solid black;
         background-color: cyan;
       }

       p:nth-child(1) {
         width: 150px;
         font-size: 18px;
       }

       p:nth-child(2) {
         width: 250px;
         font-size: 24px;
       }

       p:nth-child(3) {
         width: 350px;
         font-size: 30px;
       }
       #+END_SRC
     - values
       - absolute units
         - px,pt,pc
           pixel,points,picas
         - q,mm,cm,in
           quarter millimeters, millimeters, centimeters, inches.
       - relative units
         - em
           1em is the same as the font-size of the current element.
           default 1em = 16px;
         - ex,ch
           height of a lowercase x and the width of the number 0.
         - rem(root em)
           always equal the size of the default base font-size;
         - vw,vh
           1/100th of the width/height of the view port.
       - unitless values
         - 0
           margin: 0;
         - line-height: 1.5
         - Number of animatiions
   - Percentages     
   - Colors
     - Keywords
       red ...
     - Hexadecimal values
       #ff0000 ; red
     - RGB
       background-color: rgb(255,255,0);
     - HLS(hue,saturation,lightness)
       - hue(色调) 0~360
       - saturation(饱和度) 0~100%
       - lightness(亮度) 0~100%
     - RGBA/HLSA
       transparency(透明度)
     - Opacity(不透明度)
   - Functions
     - rgba(<r>,<g>,<b>,<a>)
     - hsla(...)
     - rotate()
     - calc()
     - url()
 - Cascade and inheritance
   - The Cascade
     - factors
       1. importance
          - !important
            !important > ID > class > element
       2. Specificity
          - 权重
            1. 千位：
               如果声明是在style 属性中该列加1分
              （这样的声明没有选择器，
               所以它们的专用性总是1000。）否则为0。
            2. 百位：
               在整个选择器中每包含一个ID选择器就在该列中加1分。
            3. 十位：在整个选择器中每包含一个类选择器、
               属性选择器、或者伪类就在该列中加1分。
            4. 个位：在整个选择器中每包含一个元素选择器
               或伪元素就在该列中加1分。
       3. Source order
          相同权重的后面覆盖前面的交集部分；
   - The Inheritance
     - Controlling inheritance
       - inherit
         该值将应用到选定元素的属性值设置为与其父元素一样。
       - initial
         该值将应用到选定元素的属性值设置为与浏览器默认样式表中
         该元素设置的值一样。如果浏览器默认样式表中没有设置值，
         并且该属性是自然继承的，那么该属性值就被设置为 inherit。
       - unset
         该值将属性重置为其自然值，即如果属性是自然继承的，
         那么它就表现得像 inherit，否则就是表现得像 initial。
       - revert
         如果当前的节点没有应用任何样式，
         则将该属性恢复到它所拥有的值。
       - all:[inherit|initial|unset]
 - The box model
   - Box properties
     - width,height(内容框)
       设置内容框（content box）的宽度和高度。
       内容框是框内容显示的区域——包括框内的文本内容，
       以及表示嵌套子元素的其它框。
       - min-width,max-width,min-height,maxheight
     - padding(内边距)
       - padding-[top|right|bottom|left]
     - border(边界)
       - border-[top|right|bottom|left]
       - border-[widty|style|color]
     - margin(外边距)
       - margin-[top|rignt|bottom|left]
       - marging collapsing
         两边框拼接是使用 max(margin1, margin2) 
         不是 margin1 + margin2
     - display(框类型)
   - tips
     - background-clip -> background-[color/image]
     - overflow
     - box-sizing, border-box
   - Advance box manipulation
     - Overflow
       - syntax
         overflow: <values>
       - values
         - auto
           溢流的内容被隐藏，然后出现滚动条来让我们滚动查看所有的内容。
         - hidden
           溢流的内容被隐藏。
         - visible
           溢流的内容被显示在盒子的外边（这个是默认的行为）
     - background clip
     - outline
   - Types of CSS boxes
     - syntax
       display: [block|inline|inline-block]
     - values
       - block box(default)
       - inline box
       - inline-block box
 - Debug CSS
   
*** Styling text
 - font
   - color(文字颜色)
   - font-family(字体)
     - web safe fonts
       https://www.cssfontstack.com/
       - arial sans-seril helvetica
       - courier-new monospace
       - georgia serif
       - Times-new-roman serif
       - Trebuchet-ms sans-serif
       - verdana sans-serif
     - default fonts
       - 衬线: 是指字体笔画尾端的小装饰，存在于某些印刷体字体中
       |------------+----------------------------------------+---------|
       | term       | definition                             | example |
       |------------+----------------------------------------+---------|
       | serif      | 有衬线的字体                           |         |
       | sans-serif | 没有衬线的字体                         |         |
       | monospace  | 相同宽度的字体                         |         |
       | cursive    | 用于模拟笔迹的字体，具有流动的连接笔画 |         |
       | fantasy    | 用来装饰的字体                         |         |
       |------------+----------------------------------------+---------|
   - font-stack(字体栈)
     - instruction
       浏览器就有多种字体可以选择，避免有些字体不可用
     - font-family: "Trebuchet MS", Verdana, sans-serif;
   - font-size(字体大小)
     - px
     - ems
     - rems
   - font attributes
     - font-style
       - normal
       - italic
       - oblique
     - font-weight
       - normal,bold
       - lighter,bolder
     - fong-transform(转换)
       - none(不转换)
       - uppercase
       - lowercase
       - capitalize
       - full-width
     - text-decoration
       - syntax 
         text-decoration: line-through red wavy;
       - none
       - underline(下划线)
       - overline(上划线)
       - line-through(穿过文本)

       - text-decoration-[line|style|color]
   - Text drop shadows(文字阴影)
     - syntax
       text-shadow: <h-offset> <v-offset> <blur-radius> <color>;
                    水平偏移   上下偏移    模糊半径      颜色
       text-shadow: 4px 4px 5px red;
     - Multiple shadows
       #+BEGIN_SRC css
       text-shadow: -1px -1px 1px #aaa,
                    0px 4px 1px rgba(0,0,0,0.5),
                    4px 4px 5px rgba(0,0,0,0.7),
                    0px 0px 7px rgba(0,0,0,0.4);
       #+END_SRC
 - layout
   - Text alignment
     text-align: [left|right|center|justify(hyphens)]
   - Line height
     line-heigh: 1.5;
   - Letter and word spacing
     #+BEGIN_SRC css
     letter-spacing: 2px;
     word-spacing:4px     
     #+END_SRC
 - more
   - font-variant 在小型大写字母和普通文本选项之间切换。
   - font-kerning 开启或关闭字体间距选项。
   - font-feature-settings ...

   - text-ident(缩进)
   - text-overflow
   - white-space
   - word-block(单词内部换行)
   - direction(方向)
   - hyphens(连字符开关)
   - link-break
   - text-align-last
   - text-orientation
   - word-wrap(浏览器单词内换行)
   - writing-mode(水平/垂直布局)
 - font shorthand
   font-style, font-variant, font-weight, font-stretch, 
   font-size, line-height, and font-family.
   
   font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;
*** Styling lists
 - Handing list spacing
 - list-style-type
   #+BEGIN_SRC css
   /* 大写罗马字序号 */
   ol{
       list-style-type: upper-roman;
   }
   #+END_SRC
 - list-sytle-position
   #+BEGIN_SRC css
   ol {
       list-style-type: upper-roman;
       /* 位于行内 */
       list-style-position: inside;
   }
   #+END_SRC
 - list-style-image
   #+BEGIN_SRC css
   ul {
       list-style-image: url(star.svg);
   }

   ul {
     padding-left: 2rem;
     list-style-type: none;
   }

   ul li {
     padding-left: 2rem;
     background-image: url(star.svg);
     background-position: 0 0;
     background-size: 1.6rem 1.6rem;
     background-repeat: no-repeat;
   }

   ul {
     list-style-type: square;
     list-style-image: url(example.png);
     list-style-position: inside;
   }
   /* 与上面等价 */
   ul {
     list-style: square url(example.png) inside;
   }
   #+END_SRC

 - Controlling list counting
   - start
     <ol start="4"></ol>
   - reversed
     <ol start="4" reversed></ol>
   - value
     <li value"2"></li>
*** Styling links
 - Link states
   - introduction
     #+BEGIN_SRC css
     a{}
     a:link{}
     a:focus{}
     a:hover{}
     a:active{}
     #+END_SRC
   - Link(unvisited)
     :link
   - Visited
     :visited
   - Hover(鼠标悬停时)
     :hover
   - Focus(获得[tab]焦点时)
     :focus
   - Active(被点击/鼠标按下时)
     :active
 - Including icons on links
   #+BEGIN_SRC css
   a[href*="http"] {
       /*一个插入的副本，然后指定位置是 100% 使其出现在内容的右边，然后距离上方是 0 px。*/
       background: url('https://mdn.mozillademos.org/files/12982/external-link-52.png') no-repeat 100% 0;
       /* 指定要显示的背景图像的大小 */
       background-size: 16px 16px;
       /* 为背景图片留出空间，所以我们不会和文本重叠。 */
       padding-right: 19px;
   }
   #+END_SRC
 - Styling links as buttons
   #+BEGIN_SRC html
   <ul>
     <li><a href="#">Home</a></li><li><a href="#">Pizza</a></li><li><a href="#">Music</a></li><li><a href="#">Wombats</a></li><li><a href="#">Finland</a></li>
   </ul>
   #+END_SRC
   #+BEGIN_SRC css
   ul {
       /* */
       padding: 0;
       /* 设置了它的宽度是外部容器  <body> (在这次条件下) 的 100%  */
       width: 100%;
   }

   li {
       /* 不自动换行 */
       display: inline;
   }

   a {
       /* 取消外框 */
       outline: none;
       /* 取消下划线 */
       text-decoration: none;
       /* 设置类型 */
       display: inline-block;
       /* 设置按钮宽度，100/5=20*/
       width: 19.5%;
       /* 防止宽度溢出 */
       margin-right: 0.625%;
       /* 剧中文本 */
       text-align: center;
       /* 设置按钮高度 */
       line-height: 3;
       /* 字体颜色 */
       color: black;
   }

   li:last-child a {
     margin-right: 0;
   }

   a:link, a:visited, a:focus {
     background: yellow;
   }

   a:hover {     
     background: orange;
   }

   a:active {
     background: red;
     color: white;
   }
   #+END_SRC
*** Web fonts
 - introduction
   #+BEGIN_SRC css
   @font-face{
       font-family: "myFont";
       src: url("myFont.tff");
   }
   html{
       font-family: "myFont", "Bitstream Vera Serif", serif;
   }
   #+END_SRC
*** Styling boxes
 - Setting width and height constraints
   - min-width,max-width,min-height,max-height;
     #+BEGIN_SRC css
     div {
         width: 70%;
         max-width: 1280px;
         min-width: 480px;

         /* 0 上下边为0
            auto 居中*/
         margin: 0 auto;
     }

     #+END_SRC

 - Changing the box model completely
   - tatal width = width + padding-right + padding-left + border-right + border-left
   - box-sizing: border-box
 - display type
   - block
   - inline
   - inline-block
   - table 允许你像处理table布局那样处理非table元素
   - flex 布置一系列弹性等宽容器或者垂直居中内容
   - grid 给出一种简单实现CSS网格系统的方式
   - background: yellow linear-gradient(to bottom, orange, yellow) norepeat left;
 - background-size
   
*** Changing background styles using CSS
 - background-color
 - background-image
 - background-position
 - background-repeat
 - background-attachment
   - scroll
   - fixed
   - local
 - backgournd
 - background-size
*** Styling border using CSS
 - Longhand options
   - border-[top|right|bottom|left]
   - border-[width|style|color]
     - style dashed/sloid/dotted
   - border-[top-width|top-style|top-color]
 - border-radius(圆角)
   #+BEGIN_SRC css
   border-radius: 10%
   #+END_SRC
 - border-image
*** Styling tables
*** Advance box effects
 - Box shadows
 - inset, box-shadow(定制按钮)
 - Filters
 - Blend modes(混合模式)
   - background-blend-mode
   - mix-blend-mode
 - -webkit-backgournd-clip: text
   
* w3schools
  https://www.w3schools.com
  <tag attribute="value">element</tag>

  |-------------------------+--------------------------------------------|
  | tag                     | description                                |
  |-------------------------+--------------------------------------------|
  | <quote>                 |                                            |
  | <blockquote>            |                                            |
  | <abbr>                  | 缩写，鼠标移动到上面会探出提示             |
  | <address>               | 地址                                       |
  | <cite>                  | 引用工作标题 - 斜体                        |
  | <bdo>                   | bi-directional override ; 方向重写         |
  |-------------------------+--------------------------------------------|
  | Images                  | 图片相关标签                               |
  |-------------------------+--------------------------------------------|
  | <img>                   | 图片标签                                   |
  | <map>                   | 图片内容映射 <img ... usemap="#map"        |
  | <area>                  | 图片区域, <map name="map"><area ...>       |
  | <picture>               | 不同页面大小适配不同的图片                 |
  |-------------------------+--------------------------------------------|
  | Tables                  | 表格标签                                   |
  |-------------------------+--------------------------------------------|
  | <table>                 | 表格                                       |
  | <tr>                    | table row 行                               |
  | <th>                    | table header 表头, 默认粗体居中            |
  | <td>                    | table data/cell 表项                       |
  | <caption>               | 表标题                                     |
  |-------------------------+--------------------------------------------|
  | style                   |                                            |
  | border                  | table, th, td{border:1px solid black;}     |
  |                         | 边框有重复                                 |
  | collapsed borders       | table{...;border-collapse: collapse;}      |
  |                         | 解决边框重复问题                           |
  | Cell padding            | th,td{...; padding:15px;}                  |
  |                         | 控制表项留白大小                           |
  | text-align              | th{ text-align: center;}                   |
  |                         | 控制表项内字符对齐方式                     |
  | boarder-spaceing        | table{border-spacing:5px;}                 |
  |                         | 控制表项间距                               |
  | colspan                 | <th colspan="2">Tele</th>                  |
  |                         | 将表项拆分成2列                            |
  | rowspan                 | <th rowspan="2">                           |
  |                         | 将表项拆分成2行                            |
  |-------------------------+--------------------------------------------|
  | Lists                   | 列表                                       |
  |-------------------------+--------------------------------------------|
  | <ul>                    | Unordered List; 无序列表                   |
  | <ol>                    | Ordered List ; 有序列表                    |
  | <li>                    | list item ; 列表项                         |
  | <dl>                    | description list ; 描述列表                |
  | <dt>                    | description term ; 描述项                  |
  | <dd>                    | description data ; 描述数据                |
  |-------------------------+--------------------------------------------|
  | attributes              | 列表属性                                   |
  | <ol type="*">           | 控制列表计数类型，1,A,a,I,i                |
  | <ol start="50">         | 控制列表开始计数                           |
  |-------------------------+--------------------------------------------|
  | style                   | 列表样式                                   |
  | "list-style-type:"      | <ul style="list-style-type:disc">          |
  |                         | disc/cricle/square/none                    |
  | CSS more                |                                            |
  |-------------------------+--------------------------------------------|
  | Grouping Tags           |                                            |
  |-------------------------+--------------------------------------------|
  | Blocks                  | 块                                         |
  |                         | <address/article/aside/blockquote/         |
  |                         | canvas/dd/div/dl/dt/filedset/figure/       |
  |                         | figcaption/footer/form/h1-h6/header/       |
  |                         | hr/li/main/nav/noscript/ol/output/p/       |
  |                         | pre/section/table/tfoot/ul/video>          |
  | inline                  | 内联                                       |
  |                         | <a/abbr/acronym/b/bdo/big/br/botton/       |
  |                         | cite/code/dfn/em/i/img/input/kbd/label/    |
  |                         | map/object/q/samp/script/select/small/span |
  |                         | strong/sub/sup/textarea/time/tt/var>       |
  |-------------------------+--------------------------------------------|
  | <div>                   | <html> elements container ; html元素容器   |
  | <span>                  | a container for some text ; 文本容器       |
  |                         |                                            |
  |-------------------------+--------------------------------------------|
  | Classes                 |                                            |
  |-------------------------+--------------------------------------------|
  | <div class="city">      | <style>div.city{...}</style>               |
  | <span class="note">     | <style>span.note{...}</style>              |
  |-------------------------+--------------------------------------------|
  | LAYOUT                  | 布局                                       |
  |-------------------------+--------------------------------------------|
  | <div>                   | 利用div                                    |
  |-------------------------+--------------------------------------------|
  | <header>                | Defines a header for a document or section |
  | <nav>                   | ...container for navigation links          |
  | <section>               | section                                    |
  | <aritcle>               | an independent self-contained article      |
  | <footer>                |                                            |
  | <details>               | additional details                         |
  | <summary>               | heading for the <details> element          |
  |-------------------------+--------------------------------------------|
  | <table>                 | 利用table                                  |
  |-------------------------+--------------------------------------------|
  |-------------------------+--------------------------------------------|
  | Script                  |                                            |
  |-------------------------+--------------------------------------------|
  | <script>                |                                            |
  | <noscript>              |                                            |
  |-------------------------+--------------------------------------------|
  | Forms                   | 表单,获取用户输入                          |
  |                         | <form><input type="...">...</form>         |
  |-------------------------+--------------------------------------------|
  | <input type="text">     | 文本输入                                   |
  | <input type="password"> | 密码框                                     |
  | <input type="checkbox"> | 复选框                                        |
  | <input type="radio">    | 单选输入                                   |
  | <input type="submit">   | 提交按钮                                   |
  | <fieldset>              | 数据集合                                   |
  | <legend>                | 数据集标题                                 |
  | <select>                | 下拉列表框                                 |
  | <textarea>              | 文本区域                                   |
  | <button>                | 按钮                                       |
  | <datalist>              | 预定以数据列表                             |
  | <color>                 |                                            |
  | <date>                  |                                            |
  | <datetime>              |                                            |

** 1. HTML Introduction
*** 1.1 What is HTML?
    一种网页标记语言
    HTML stands for Hyper Text Markup Language
    使用标记描述网页解构 ; HTML describes the structure of web pages using Markup
    HTML 元素是网页块 ; HTML *elements* are the building blocks of HTML pages
    HTML 使用标签(tag)呈现 ; HTML elements are-represented by *tags*
    HTML 标签使用 head/paragraph/table 等标识 ; HTML tags label pieces of content such as heading , and so on
    网页不显示标签，但是使用标签渲染页面；(将标签转化为渲染指令执行) ; Browsers do not display the HTML tags but use them to render the content of page
*** 1.2 A Simple HTML Document
    #+BEGIN_SRC html
    <!--(MAST)declaration defines the document to be HTML5 -->
    <!DOCTYPE html>
    <!--The <html> elements is the root element of an HTML page-->
    <html>
      <!--The <head> element contains meta infomation(元信息) about the document-->
      <head>
        <!--specifies a title of the document ; 指定文档标题-->
        <title>Page Title</title>
      </head>
      <!--contains the visible page content ; body 包含可视内容-->
      <body>
        <!--(h1~h6六层级标题)element defines a large heading ; 定义一个大号头部-->
        <h1>My First Heading</h1>
        <!--element defines a paragraph-->
        <p>My first paragraph</p>
      </body>
    </html>
    #+END_SRC
*** 1.3 HTML tags
    HTML tags are-element names surrounded by angle brackets ; HTML 标记是使用尖括号包围的元素名称
    <tagname>content goes here...</tagname>
    HTML tags normally come in paires like <p> and </p> ; HTML标记通常是配对的，如<p>...</p>
    The first tag in a pair is the *start tag*, the second tag is the *end tag*. ; 第一个是 *开始标签*, 第二个是 *结束标签*
    The end tag is-written like the start tag, but with a *forward slash(斜杠)* inserted before the tag name. ; 结束标签在标签名前加斜杠
**** 1.3.1 Web Browsers (网页浏览器)
    The purpose of a web broser(Chrome, IE, Firefox, Safari) is to read HTML documents and display them.
    浏览器的一个目的是读取HTML文档然后显式该文档；
    The browser does not display the HTML tags, but uses them to determine how to display the document(render).
    浏览器不显示HTML标签，但使用标签来决定如何渲染页面；
**** 1.3.2 HTML Page Structure (页面结构)
     html(root)
      +- head
      +- body
     Only the content inside <body> section is-displayed in a browser.
**** 1.3.3 The <!DOCTYPE> Declaration
     The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.
     <!DOCTYPE>声明了文档类型，并帮助浏览器正确的显示页面
     It mast only appear once, at the topof the page(before any HTML tags).
     它必须出现一次，在页面的顶部(所有标签的上面)
     The <!DOCTYPE> declaration is not case sensitive(大小写无关);
     The <!DOCTYPE> declaration for *HTML5 is：<!DOCTYPE html>*
**** 1.3.4 HTML Versions
     |-----------+------|
     | Version   | Year |
     |-----------+------|
     | HTML      | 1991 |
     | HTML 2.0  | 1995 |
     | HTML 3.2  | 1997 |
     | HTML 4.01 | 1999 |
     | XHTML     | 2000 |
     | HTML5     | 2014 |
     |-----------+------|

*** 1.4 HTML Editors(编辑器)
   Notepad/TextEdit/emacs/vim
*** 1.5 HTML basic(基础)
    - *HTML Headings(标题)* <h1>heading content</h1> ~ <h6>...</h6>
    - *HTML Paragraphs(段落)* <p>paragraph content</p>
    - *HTML Links(连接)* <a href="https://www.w3schools.com">This is a link</a>
      The link's destination is-specified in the *href attribute*.
      *Attributes* are-used to provide additional infomation about HTML elements.
      *属性* 被用来给 *元素* 提供更多地信息。
    - *HTML Images(图片)* <img src="w3schools.jpg" alt="W3schools.com" with="104" height="142">
    - *HTML Bottons(按钮)* <botton>Click me</button>
    - *HTML List <ul>|<ol>* <ul><li>...</li><li>...</li></ul>

** 2. HTML Elements(元素)
   An HTML element ususlly consists of a tart tag and end tag, with the content inserted in between:
   <tagname>Content goes here...</tagname>
   HTML element with no content are-called *empty elements*.
   *Empty elements* do not have a end tag, such as the <br> element(which indicates a *line break*)
*** 2.1 Nested HTML Elements(嵌套元素)
    HTML elements can be-nested(elements can contain elements).
    ALL HTML documents consists of(组成) hested HTML elements. ; 文档由元素组成，元素内部可以包含元素
    The <html> element defines the *whole document*
    The element *content* is tow other HTML elements(<h1> and <p>)
*** 2.2 Empty Elements(空标签)
    <br> or <br />
*** 2.3 Use Lowercase Tags
    HTML tags are-not case sensitive: <P> means the same as <p>.

** 3. HTML Attributes(属性)
   - ALL HTML elements can have attribute
   - Attributes provide *additional information* about an element
   - Attributes are-always *specified in the start tag*
   - Attributes usually come in name/value paires like *name=value*
   - A complete list of all attributes for each HTML element.
     https://www.w3schools.com/tags/ref_attributes.asp
     |----------------+-------------+-----------------------------------------------------|
     | Attribute      | Belongs to  | Description                                         |
     |----------------+-------------+-----------------------------------------------------|
     | href           | 连接        | <a href="http://www.w3school.com">w2school</a>      |
     | src            | 资源        | <img src="girl.jpg" with="500" height="600">        |
     | alt            | 替代字符串  | <img src="not_exist.jpg" alt="image not exists"     |
     | style          | 样式        | <p style="color:red">I am red text</p>              |
     | lang           | 语言<html>  | <html lang="en-US"                                  |
     | title          | tooltip提示 | <p title="tooltip">paragraph with tooltip</p>       |
     | id             | 元素id      |                                                     |
     | disabled       | 元素去使能  |                                                     |
     |----------------+-------------+-----------------------------------------------------|
     | accept         | <input>     | Specifies the tyeps of file that the servre accepts |
     | accept-charset | <form>      | Specifies the character encodings                   |
     | accesskey      | Global      | Specifies a shortcut key to active/focus an element |
     | action         | <from>      |                                                     |
*** The href Attribute
    HTML links are define with the <a> tag, The link address is-specifed in href attribute:
    <a href="https://www.w2shools.com">w3schools</a>
*** The src/width/height Attribure
    HTML images are define with the <img> tag.
    The filename of the image sourece is specifie/d in the *src* attribute:
    <img src "img_girl.jpg" width="500" height="600">
*** The alt Attribute
    The *alt* attribute specifies an *alternative()* text to be-used, when an image cannot be display\ed.
    The value of the attribute can be rea\d by screen read.
    This way, someone "listening" to the webpage, e.g. a blind person, can "hear" the element.
    The *alt* attribute is also useful if the image does not exist
    <img src="img_girl.jpg" alt="Girl with a jacket">
*** The style Attribute
    The style attribute is use/d to specify the styling of an element, like color,font,size etc.
    <p style="color:red">I am a paragraph with red color</p>
    see: CSS Tutoral
*** The lang Attribute
    The language of the document can be declare in the <html> tag.
    Declaring a language is important for accessibility applications(screen readers) and search engines
    <html lang="en-US">
    The first two letters specify the language(en).
    If There is a dialect(方言), use tow letter(US).
*** The title Attribute
    Here, a *title* attribute is-added to the <p>/<head>... element.
    The value of the title attribute will be-displayed as a *tooltip* when you mouse over the content.
    <p title="I'm a tooltip">This is a paragraph</p>
*** We suggest
    - use lower case atribute ; 使用小写字母
    - quote attribute values; 使用双引号
*** Single or Double Quotes
    Double quotes around attribute values are the most common in HTML, but single quotes can also bu used.
    In some situations, when the attribute value itself contains double quotes, 
    it's nesscessary to use single quetes.
    <p title='John "ShotGun" Nelson'>
    <p title="Join 'ShotGun' Nelson">

** 4. Headings(标题)
    <h1~6><h1~6>
**** Headings Are Important
     *Search engines* use the head headings to index the structure and content of you web pages.
     Users *skim(略读)* your pages by its headings.
     It's important to use headings to show *the document structure*.
     Use HTML headings for headings only. *Don't* use heading to make text *BIG* or *bold*.

     Each HTML heading has a default size. However, you can specify the szie for any heading with
     *style* attribute, using the CSS *font-size* property
     *<h1 sytle="font-size:60px;">Heading 1 with 60 pixe</h1>*
**** HTML Horizontal Rules(水平分割线)
     The <hr> tag defines a thematic break in an HTML page,
     and is most often displayed as a horizontal rule.
     The <hr> element is use/d to separate(or define a change) in an HTML page
     <h1>This is heading 1</h1>
     <p>This is some text.</p>
     <hr>
     <h2>This is heading 2</h2>
     <p>This is some other text.</p>
     <hr>

**** The HTML <head> Element
     The HTML <head> element has nothing to do with HTML headings.
     The <head> element is a container for metadata.
     HTML metadata is data about the HTML document.
     Metadata is not displayed.
     The <head> element is place/d between <html> tag and <body> tag.
     <html>
     <head>
     <title>My First HTML</title>
     <meta charset="UTF-8">
     </head>
     <body></body>
     </html>
**** How to View HTML Source
     
** 5. Paragraphs(段落)
   Browsers atomatically add some white space before and after a paragraph.
*** HTML Display
    The browser will remove any extra spaces and extra lines when the page is displaye/d
    浏览器忽略所有多余的空格和换行,要换行使用<br> 或 <pre>
*** HTML Line Breaks <br>
    The HTML <br> element defines a *line break*.
*** The Poem Problem, use <pre>
    The HTML <pre> element defines *preformatted* text.
    <pre>
    My Bonnie lies over the ocean.
    
    My Bonnie lies over the sea.
    
    ...
    </pre>

** 6. Styles(样式)
   Setting the sytle of an HTML element, can be don/e with the style attribute.
   The HTML style attribute has the following *syntax*:
   <tagname style="CSSproperty:CSSvalue;">
   #+BEGIN_SRC html
   <!-- Background color -->
   <body style="background-color:powderblue;">
     <h1 style="color:blue;font-family:verdana;font-size:300%">This is a heading</h1>
     <p style="color:red;font-familly:courier">This is a paragrapf.</p>
     <p style="text-align:center;">Centered paragraph</p>
   </body>
   #+END_SRC
** 7. Text Formatting(字体格式)
   HTML also defines speccial elements for defining text with a special meaning.
   
   Browsers display <strong> as <b>, and <em> as <i>. However, there is a difference
   in the meaning of thest tags:<b> and <i> defines bold and etalic text, 
   but <strong> and <em> means that the text is "important".
   |------------+---------------------------------|
   | tag        | desciption                      |
   |------------+---------------------------------|
   | <b>...</b> | Bold text ;粗体字               |
   | <strong>   | Important text; 重点<b>         |
   | <i>        | Italic text; 斜体               |
   | <em>       | Emphasized text ; 强调<i>       |
   | <mark>     | Marked text ; 标记-字符背景黄色 |
   | <small>    | Small text ; 小 字体相对变小    |
   | <del>      | Deleted text ; 删除-中划线      |
   | <ins>      | Inserted text ; 插入-下划线     |
   | <sub>      | Subscript ;下标                 |
   | <sup>      | Superscrpt ; 上标               |
   |------------+---------------------------------|
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <p><b>This text is bold</b></p>
   <p><i>This text is italic</i></p>
   <p>This is<sub> subscript</sub> and <sup>superscript</sup></p>
   <p><strong>This text is strong.</strong></p>
   <p><em>This text is-emphasized.</em></p>
   <h2>HTML <mark>Marked</mark> Formatting</h2>
   <h2>HTML <small>Small</small> Formatting</h2>
   <p>My favorite color is <del>blue</del> red.</p>
   <p>My favorite <ins>color</ins> is red.</p>
   </body>
   </html>

   #+END_SRC
   
** 8. HTML Quotation and Citation Elements(引用)   
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <!-- blockquote -->
   <p>Here is a quote from WWF's website:</p>
   <blockquote cite="http://www.worldwildlife.org/who/index.html">
   For 50 years, WWF has been protecting the future of nature.
   The world's leading conservation organization,
   WWF works in 100 countries and is supported by
   1.2 million members in the United States and
   close to 5 million globally.
   </blockquote>
   <!-- abbr -->
   <p>The <abbr title="World Health Organization">WHO</abbr> was founde/d in 1948.</p>
   <!-- address -->
   <address>
   Written by John Doe.<br> 
   Visit us at:<br>
   Example.com<br>
   Box 564, Disneyland<br>
   USA
   </address>
   <!-- cite -->
   <img src="img_the_scream.jpg" width="220" height="277" alt="The Scream">
   <p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>
   <!-- bdo -->
   <bdo dir="rtl">This line will be-written from right to left</bdo>
   </body>
   </html>
   #+END_SRC
** 9. HTML Comments(批注)
   Comments are-not displayed by the browser, but they can 
   help document your HTML source code. ; 有助文档月的，调试
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <!-- This is a comment -->
   <p>This is a paragraph.</p>
   <!-- Comments are not displayed in the browser -->
   <!-- Do not display this at the moment
   <img border="0" src="pic_trulli.jpg" alt="Trulli">
   -->
   </body>
   </html>
   #+END_SRC
** 10. HTML Colors(颜色)
   HTML colors are specifie/d using predifined color names, or RGB,HEX,HSL,RGBA,HSLA values.
   https://www.w3schools.com/colors/colors_names.asp
   - background-color:Tormato;   背景色
   - color:DodgerBlue;           字体色
   - Border:2px solid Tomato;    边框色
   + hsl(hue, saturation, lightness)
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <body>
   <!-- background-color -->
   <h1 style="background-color:Tomato;">Tomato</h1>
   <h1 style="background-color:Orange;">Orange</h1>
   <h1 style="background-color:DodgerBlue;">DodgerBlue</h1>
   <h1 style="background-color:MediumSeaGreen;">MediumSeaGreen</h1>
   <h1 style="background-color:Gray;">Gray</h1>
   <h1 style="background-color:SlateBlue;">SlateBlue</h1>
   <h1 style="background-color:Violet;">Violet</h1>
   <h1 style="background-color:LightGray;">LightGray</h1>
   <!-- 字体颜色 -->
   <h1 style="color:Tomato;">Hello World</h1>
   <p style="color:DodgerBlue;">Lorem ipsum...</p>
   <p style="color:MediumSeaGreen;">Ut wisi enim...</p>
   <!-- 边框颜色 -->
   <h1 style="border:2px solid Tomato;">Hello World</h1>
   <h1 style="border:2px solid DodgerBlue;">Hello World</h1>
   <h1 style="border:2px solid Violet;">Hello World</h1>
   <!-- 数值表示颜色 -->
   <h1 style="background-color:rgb(255, 99, 71);">...</h1>
   <h1 style="background-color:#ff6347;">...</h1>
   <h1 style="background-color:hsl(9, 100%, 64%);">...</h1>

   <h1 style="background-color:rgba(255, 99, 71, 0.5);">...</h1>
   <h1 style="background-color:hsla(9, 100%, 64%, 0.5);">...</h1>
   </body>
   </html>
   #+END_SRC
** 11. HTML Styles-CSS(层叠样式单)
   CSS stands for Cascading Style Sheets.
   CSS describes how HTML elements are t be displaye/d on schreen, paper, or in other media.
   CSS saves a lo/t of work. It can control the layout of multiple web pages all at once.
   CSS can be edde/d to HTML elements in 3 ways:
   - inline - by using the style attribute in HTML elements
     <h1 style="color:blue;">This is a Blue Heading</h1>
   - internal - by using a <style> element in the <head> section
     #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
     <head>
     <style>
     body {background-color: powderblue;}
     h1   {color: blue;}
     p    {color: red;}
     </style>
     </head>
     <body>

     <h1>This is a heading</h1>
     <p>This is a paragraph.</p>

     </body>
     </html>
     #+END_SRC
   - external - by using an external CSS file(most common way to add CSS)
     #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
     <head>
       <link rel="stylesheet" href="styles.css">
     </head>
     <body>

     <h1>This is a heading</h1>
     <p>This is a paragraph.</p>

     </body>
     </html>
     #+END_SRC
     
     styles.css
     border:1px solid powderblue - 边框
     padding: 30 px -边框内衬垫
     margin:50px - 边框外边缘
     #+BEGIN_SRC css
     body {
         background-color: powderblue;
     }
     h1 {
         color: blue;
     }
     p {
         color: red;
         border: 1px solid powderblue;
         padding: 30px;
     }
     #+END_SRC
   + <id> 单指一个element
   + <class> 指一类element

   表单解决模板化问题，
   <id> and <class> 解决表单模板特例问题；

*** The id Attribute
    To define a specific style for one special element, and an <id> attribute to the element:
    <p id="p01">I am different</p>
    
    Then define a style for the element with specific id:
    #p01 {
      color: blue;
    }
*** The class Attribute
    To define a style for special types of element, add a <class> attribute to the element:
    <p class="error">I am different</p>
    then define a style for the element with the specific class:
    p.error{
      color:red;
    }
*** External References(外部关联)
    <link rel="stylesheet" href="https://aaa.com/styles.css">
** 12. HTML Links(链接)
   Links allow users to click their way from page to page. ; 叶面跳转
*** Hyperlinks
    You can click on a link and jump to another document.
    A link does not have to be text. It can be an image or any other html element.
*** Syntax(语法)
    <a href="url">link text</a>
    The *href* attribute specifies the destination address
    The *link text* is the visible part
    Clicking on the *link text* will send yu to the specified address.
*** Local Links
    A Local link is specifie/d with a relative URL(without http://www...)
*** Link Colors
    An unvisited link is underline/d and blue
    A visited link is underline/d and purple
    An active link is underline and red
    you can change it, by using CSS:
    a:hover{} -鼠标指针悬浮在连接上
    a:active{} -鼠标按下，但未弹开
    #+BEGIN_SRC css
    <style>
    a:link {
        color: green; 
        background-color: transparent; 
        text-decoration: none;
    }

    a:visited {
        color: pink;
        background-color: transparent;
        text-decoration: none;
    }

    a:hover {
        color: red;
        background-color: transparent;
        text-decoration: underline;
    }

    a:active {
        color: yellow;
        background-color: transparent;
        text-decoration: underline;
    }
    </style>
    #+END_SRC
*** The target Attribute
    The target attribute specifies where to open the linked document.
    <a ... target="_blank">link</a>
    - _blank - Opens the linked document in a new window or tab
    - _self - Opens ... in the same window/tab as it was clicke/d (default)
    - _parent -Opens ... in the parent frame
    - _top -Opens ... in the full body of the body(break out of the frame)
    - framename -Opens ... in a named frame
*** Image as Link
    #+BEGIN_SRC html
    <a href="default.asp">
      <img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;border:0;">
    </a>
    #+END_SRC
*** Link Titles
    连接内容提示
    #+BEGIN_SRC html
    <a href="https://www.w3schools.com/html/" title="Go to W3Schools HTML section">Visit our HTML Tutorial</a>
    #+END_SRC
*** Create a Bookmark
    HTML bookmarks are use/d to allow reader to jump to specific parts of a web page.
    Bookmark can be useful if your webpage is very long.
    To make a bookmark, you mast first create the bookmark, and then add a link to it.
    <h2 id="C4">Chapter 4</h2>
    <a href="#C4">Jump to Chapter4</a>
    <a href="html_demo.html#C4">Jump to C4 from another page</a>
*** External Paths
    <a href="https://www.w3schools.com/html/default.asp">HTML tutorial</a>
** 13. HTML Images(图片)
   Images can improve the design and appearance of a web page.
*** Syntax
    <img src="url">
*** The alt Attribute
    <img src="url" alt="Flowers in Chania">
*** Image Size - Width and Height
    <img src="img_girl.jpg" alt="Girl in a jacket" style="width:500px;height:600px;">
    <img src="img_girl.jpg" alt="Girl in a jacket" width="500" height="600">
*** Images in Another Folder
    <img src="/images/html5.gif">
*** Images on Another Server
    <img src="https://aaa/images/w3school_green.jpg">
*** Animated Images
    <img src="programming.gif">
*** Image as a Link
    <a href="sss.html"><img src="aaa.jpg"></a>
*** Image Floating
    loat:right
    <style="float:right;width:32px;height:42px;">
    #+BEGIN_SRC html
    <p>
    <img src="smiley.gif" alt="Smiley face" style="float:right;width:42px;height:42px;">
    A paragraph with a floating image. A paragraph with a floating image. A paragraph with a floating image.
    </p>
    #+END_SRC
*** Image Maps
    The <map> tag defines an image-map.
    An image-map is an image with clickable areas.
    允许点击图片内部的区域，跳转到某连接
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html>
    <body>

    <h2>Image Maps</h2>
    <p>Click on the computer, the phone, or the cup of coffee to go to a new page and read more about the topic:</p>

    <img src="workplace.jpg" alt="Workplace" usemap="#workmap" width="400" height="379">

    <map name="workmap">
      <area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
      <area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
      <area shape="circle" coords="337,300,44" alt="Cup of coffee" href="coffee.htm">
    </map>

    </body>
    </html>
    #+END_SRC

*** Background Image
    To add a background image on an HTML element, use CSS property:
    background-image:
    #+BEGIN_SRC html
    <body style="background-image:url('clouds.jpg')">
    <h2>Background Image</h2>
    </body>
    #+END_SRC
*** The <picture> Element
    HTML5 introduced the <picture> element to add more flexibility when sepcifying
    image resources.
    The <picture> element contains a number of <source> elements, each referring to 
    different image sources. This way the browser can choose the image that best fits
    the current view and/or device.
    Each <source> element have attributes describing when their image is the most suitable.
    The browser will use the first <source> element with matching attribute values, 
    and ignore an following <source> elements.
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html>
    <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>

    <h2>The picture Element</h2>

    <picture>
      <source media="(min-width: 650px)" srcset="img_pink_flowers.jpg">
      <source media="(min-width: 465px)" srcset="img_white_flower.jpg">
      <img src="img_orange_flowers.jpg" alt="Flowers" style="width:auto;">
    </picture>

    <p>Resize the browser to see different versions of the picture loading at different viewport sizes.
    The browser looks for the first source element where the media query matches the user's current viewport width,
    and fetches the image specified in the srcset attribute.</p>

    <p>The img element is required as the last child tag of the picture declaration block.
    The img element is used to provide backward compatibility for browsers that do not support the picture element, or if none of the source tags matched.
    </p>

    <p><strong>Note:</strong> The picture element is not supported in IE12 and earlier or Safari 9.0 and earlier.</p>

    </body>
    </html>
    #+END_SRC
*** HTML Screen Readers
    Screen reader is a software program that reads the HTML code, converts the text
    and allows the user to "linten" to the content. Screen readers are useful for
    people who are blind, visually impaired, or learning disabled.

** 14. HTML Tables(表格)
   #+BEGIN_SRC html
   <!DOCTYPE html>
   <html>
   <head>
   <style>
   table {
       font-family: arial, sans-serif;
       border-collapse: collapse;
       width: 100%;
   }

   td, th {
       border: 1px solid #dddddd;
       text-align: left;
       padding: 8px;
   }

   tr:nth-child(even) {
       background-color: #dddddd;
   }
   </style>
   </head>
   <body>

   <h2>HTML Table</h2>

   <table>
     <tr>
       <th>Company</th>
       <th>Contact</th>
       <th>Country</th>
     </tr>
     <tr>
       <td>Alfreds Futterkiste</td>
       <td>Maria Anders</td>
       <td>Germany</td>
     </tr>
     <tr>
       <td>Centro comercial Moctezuma</td>
       <td>Francisco Chang</td>
       <td>Mexico</td>
     </tr>
     <tr>
       <td>Ernst Handel</td>
       <td>Roland Mendel</td>
       <td>Austria</td>
     </tr>
     <tr>
       <td>Island Trading</td>
       <td>Helen Bennett</td>
       <td>UK</td>
     </tr>
     <tr>
       <td>Laughing Bacchus Winecellars</td>
       <td>Yoshi Tannamuri</td>
       <td>Canada</td>
     </tr>
     <tr>
       <td>Magazzini Alimentari Riuniti</td>
       <td>Giovanni Rovelli</td>
       <td>Italy</td>
     </tr>
   </table>

   </body>
   </html>
   #+END_SRC
*** Defining an HTML Table
    An HTML table is define/d with the <table> tag.
    Each table row is define/d with the <tr> tag.
    A table header is define/d with the <th> tag.
    By default, table heading are hold and centered.
    A table data/cell is define/d with the <td> tag.
*** Adding a Border(边界)
    If you do not specify a border for the table, it will be displaye/d without borders.
    A border is se/t using the CSS border property
    每个表项都有一个边界框，导致重复边框；
    #+BEGIN_SRC css
    table, th, td {
        border: 1px solid black;
    }
    #+END_SRC
*** Collapsed Borders(折叠边界)
    将重复边框折叠成单一边框。
    If you want the borders to collapse into one border, add the CSS *border-collapse* property
    (特性/属性)
    #+BEGIN_SRC css
    table, th, td{
        border: 1px solid black;
        border-collapse: collapse;
    }
    #+END_SRC
*** Adding Cell Padding(添加表项衬垫)
    Cell padding specifies the space between the cell contennt and its borders.
    (内容与边框之间的空白部衬垫-内边距)
    If you do not specify a padding, the table cells will be displaye/d without padding.
    To set the padding, use the CSS padding property:
    #+BEGIN_SRC css
    th, td{
        padding: 15px;
    }
    #+END_SRC
*** Left-align Headings(表头左对齐)
    By default, table headings are bold and centered.(标题居中、加粗)
    To left-align the table headings, use CSS text-align property:
    #+BEGIN_SRC css
    th{
        text-align: left;
    }
    #+END_SRC
*** Add Border Spacing(边框间距)
    与collapse特性冲突
    Border spacing specifies the space between the cells.
    To set the border spacing for a table, use the CSS border-spacing property:
    *Note: If the table has collapse borders, the border-spacing has not effect.*
    #+BEGIN_SRC css
    table{
        border-spacing: 15px;
    }
    #+END_SRC

*** Cells That Span Many Columns(列合并)
    To make a cell span more than one column, use the *colspan* attribute:
    #+BEGIN_SRC css
    <table style="width:100%">
      <tr>
        <th>Name</th>
        <th colspan="2">Telephone</th>
      </tr>
      <tr>
        <td>Bill Gates</td>
        <td>55577854</td>
        <td>55577855</td>
      </tr>
    </table>
    #+END_SRC
*** Cells That Span Many Rows(行合并)
    To make a cell span more then one row, use the *rowspan* attribute:
    #+BEGIN_SRC css
    <table style="width:100%">
      <tr>
        <th>Name:</th>
        <td>Bill Gates</td>
      </tr>
      <tr>
        <th rowspan="2">Telephone:</th>
        <td>55577854</td>
      </tr>
      <tr>
        <td>55577855</td>
      </tr>
    </table>
    #+END_SRC
*** Adding a Caption(表标题)
    To add a caption, use the *<caption>* tag:
    #+BEGIN_SRC html
    <table style="width:100%">
      <caption>Monthly savings</caption>
      <tr>
        <th>Month</th>
        <th>Savings</th>
      </tr>
      <tr>
        <td>January</td>
        <td>$100</td>
      </tr>
      <tr>
        <td>February</td>
        <td>$50</td>
      </tr>
    </table>
    #+END_SRC
** 15. HTML Lists(列表)
*** Unordered HTML List(无序列表)
    An unordered list starts with the *<ul>* tag.
    Each *list item* start with the *<li>* tag.
    The list items will be marke/d with bullets(small black circles) by default:
    #+BEGIN_SRC html
    <ul>
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    </ul>
    #+END_SRC
**** Choose List Item Marker
     The CSS *list-style-type* property is use/d to define the style of the list item marker:
     |--------+------------------------------------------------|
     | value  | description                                    |
     |--------+------------------------------------------------|
     | disc   | Sets the list item marker to a bullet(default) |
     | circle | ... to a circle                                |
     | square | ... to a square                                |
     | none   | The list item will not be marked               |
     |--------+------------------------------------------------|
     #+BEGIN_SRC html
     <ul style="list-style-type:disc">
       <li>Coffee</li>
       <li>Tea</li>
       <li>Milk</li>
     </ul>
     #+END_SRC
     
*** Ordered HTML List(有序列表)
    An ordered list starts with the *<ol>* tag.
    Each list item starts with the *<li>* tag.
**** The Type Attribute
     The *type* attribute of the *<ol>* tag, define the type of the list item marker:
     |----------+------------------------------------------------------|
     | Type     | Description                                          |
     |----------+------------------------------------------------------|
     | type="1" | The list items will be numbered with number(default) |
     | type="A" | ... with uppercase letters                           |
     | type="a" | ... with lowercase letters                           |
     | type="I" | ... with uppercase roman numbers                     |
     | type="i" | ... with lowercase roman numbers                     |
     |----------+------------------------------------------------------|
          
*** Description Lists(描述列表)
    A descrition list is a list of terms, with a description of each term.
    The *<dl>* tag defines the description list, the *<dt>* tag defines 
    the term(name), and the *<dd>* tag describes each term:
    #+BEGIN_SRC html
    <dl>
      <dt>Coffee</dt>
      <dd>- black hot drink</dd>
      <dt>Milk</dt>
      <dd>- white cold drink</dd>
    </dl>
    #+END_SRC

*** Nested HTML Lists(列表嵌套)
    List items can contain new list, and other HTML elements, like images and links, etc.
    #+BEGIN_SRC html
    <ul>
      <li>Coffee</li>
      <li>Tea
        <ul>
          <li>Black tea</li>
          <li>Green tea</li>
        </ul>
      </li>
      <li>Milk</li>
    </ul>
    #+END_SRC
*** Control List Counting(控制列表计数)
    By default, an order list will start counting from 1. If you want to start counting
    from a specified number, you can use the *start* attribute:
    #+BEGIN_SRC html
    <ol start="50">
      <li>Coffee</li>
      <li>Tea</li>
      <li>Milk</li>
    </ol>
    #+END_SRC

*** Horizontal List with CSS
    HTML list can be style/d in many different ways with CSS.
    One popular way is to style a list horizontally, to create a navigation menu:
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html>
    <head>
    <style>
    ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #333333;
    }

    li {
        float: left;
    }

    li a {
        display: block;
        color: white;
        text-align: center;
        padding: 16px;
        text-decoration: none;
    }

    li a:hover {
        background-color: #111111;
    }
    </style>
    </head>
    <body>

    <h2>Navigation Menu</h2>
    <p>In this example, we use CSS to style the list horizontally, to create a navigation menu:</p>

    <ul>
      <li><a href="#home">Home</a></li>
      <li><a href="#news">News</a></li>
      <li><a href="#contact">Contact</a></li>
      <li><a href="#about">About</a></li>
    </ul>

    </body>
    </html>
    #+END_SRC
** 16. HTML Blocks(块)
   Every HTML element has a default *display value* depending on what type of element it is.
   The default value for most elements is *block* or *line*.
*** Block-level Elements(块层级元素)
    A block-level element always starts on a new line and takes up the full width
    available(stretches out to the left and right as far as it can).
    The *<div>* element is a block-level element.
    
*** Inline Elements(内联元素)
    An inline element does not start on a new line and only takes up 
    as mutch width as nesscessary. 
    This is an inline *<span>* element inside a paragraph.
    
*** The <div> Element
    The *<div>* element is often used *as a container of other HTML elements*.
    The <div> element has no require attributes, but *style,class,id* are common.
    When used target with CSS, the <div> element can be use/d to *style blocks of content*:
    #+BEGIN_SRC html
    <div style="background-color:black;color:white;padding:20px;">
      <h2>London</h2>
      <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>
    </div>
    #+END_SRC
*** The <span> Element
    主要用于控制文本的CSS
    The <span> element is often used as a container for some text.
    When used target with CSS, the <span> elemnt can be use/d to *sytle part of text*:
    <h1>My <span style="color:red">Important</span> Heading</h1>
    
** 17. HTML Classes(类)
   对同一类元素的样式进行设置，如city, note
*** Classing Block Elements(块元素分类)
    class attribute makes it possible to define equal style for "equal" <dev> elements
    #+BEGIN_SRC html
     <!DOCTYPE html>
    <html>
    <head>
    <style>
    div.cities {
        background-color:black;
        color:white;
        margin:20px;
        padding:20px;
    }
    </style>
    </head>
    <body>

    <div class="cities">
    <h2>London</h2>
    <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>
    </div>

    <div class="cities">
    <h2>Paris</h2>
    <p>Paris is the capital and most populous city of France.</p>
    </div>

    <div class="cities">
    <h2>Tokyo</h2>
    <p>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,
    and the most populous metropolitan area in the world.</p>
    </div>

    </body>
    </html>
    #+END_SRC
*** Classing inline Elements(内联元素类)
    #+BEGIN_SRC html
    <head>
      <type>
        span.note{
                font-size:120%;
                color:red;
            }
      </type>
    </head>
    <body>
      <p>This is some <span class="note">important</span></p>
    </body>
    #+END_SRC

** 18. HTML Layouts(布局)
   Websites often display content in multiple columns(专栏) like a magazine or newspaper.
*** Using <div> Elements
*** Using HTML5
    HTML5 offers new semantic elements that define different parts of web page:
    <header>
    <nav>
    <section>   <aside>
    <article>   <aside>
    <footer>
** 19. HTML Responsive Web Design(响应式的设计)
*** What is Responsive Web Design?
    Responsive Web Design make your web page look good on all devices(desktops, tables, and phones)
    using CSS and HTML to resize(调整大小),hide(隐藏), shrink(收缩), enlarge(放大), 
    or move the content to make it look good 
    on any screed
    #+BEGIN_SRC html
    
    #+END_SRC
*** Create your Own Responsive Design
*** Using W3.CSS
** Forms(表单)
   HTML forms are used to collect user input.
   *form elements* are checkboxes,radio buttons,submit and more.
*** <input>
    #+BEGIN_SRC html
    <form>
      First name:<br>
      <input type="text" name="firstname"><br>
      Last name:<br>
      <input type="text" name="lastname">

      <input type="radio" name="gender" value="male" checked> Male<br>
    </form>
    #+END_SRC
*** Grouping From Data With <fieldset>
    The <fieldset> element groups related data in a form.
    The <legend> element defines a caption for the <fieldset> element.
    #+BEGIN_SRC html
    <fieldset>
      <legend>Personal information:</legend>
      First name:<input type="text" name="fname" value="Mickey"><br>
      <input type="submit" value="Submit" formmethod="post">
    </fieldset>
    #+END_SRC
*** HTML Form Attributes
    #+BEGIN_SRC html
    <form action="action_page.php" method="post" target="_blank"
          accept-charset="UTF-8" enctype="application/x-www-form-urlencoded"
          autocomplete="off" novalidate>
    </form>
    #+END_SRC
*** HTML Form Elements
**** <select> Element(Drop-Down List)
     #+BEGIN_SRC html
     <select name="cars">
       <option value="volvo">Volvo</option>
       <option value="saab">Saab</option>
       <option value="fiat">Fiat</option>
       <option value="audi">Audi</option>
     </select>
     #+END_SRC
**** <textarea>
     #+BEGIN_SRC html
     <textarea name="message" row="10" cols="30">
       The Cat was plating the garden.
       the second line.
     </textarea>
     #+END_SRC
**** <button>
     #+BEGIN_SRC html
     <button type="button" onclick="alert('hello world')">Click Me</button>
     #+END_SRC
**** HTML5 Form Elements
     - <datalist>
       #+BEGIN_SRC html
       <input list="browsers">
       <datalist id="browsers">
         <option value="Internet Explorer"></option>
         <option value="Firefox"></option>
         <option value="Chrome"></option>
         <optoin value="Opera"></optoin>
         <option value="Safrai"></option>
       </datalist>
       #+END_SRC
     - <keygen>
       
     - <output>
* 2 HTML 
** 2.1 标签和元素
 - 标签(tag)
   <标签名></标签名> ; 容器
   <br><hr> ; 不配对，空标签
 - 元素(item)
   标签中嵌套的内容就是元素
 - 属性(attribute)
   <attr>="value"
   空格分开多个标签
   属性可使用(推荐)"" 或 ''
 - 颜色
   bgcolor="#00ff00"
 - 注释
   <!-- 注释 -->
 - 字符实体
   &lt;
   &#60;
   |------+------+----------+--------|
   | 显示 | 描述 | 实体名称 | ascii  |
   |------+------+----------+--------|
   |      | 空格 | &nbsp;   | &#160; |
   | <    |      | &lt;     |        |
   | >    |      | &gt;     |        |
   | &    |      | &amp;    |        |
   | "    |      | &quot;   |        |
   | `    |      | &apos;   |        |
   |      | 商标 | &reg;    |        |
   |      | 章节 | &sect    |        |
   |      | 版权 | &copy    |        |
   |      | 乘号 | &times   |        |
   |      | 除号 | &divide  |        |
   |------+------+----------+--------|
** 2.2 主体结构
   <!DOCTYPE html>
   <html>     ; 代表html
     <head>   ; html 头
      <title>必须有标题</title>
      <base href="URL" target="WINDOW_NAME"/>
      <link rel="stylesheet" type="text/css" href="style.css"/>
      <meta name="keywords" content="meta keywords"/>
      <meta name="description" content="meta description"/>
      <object></object>
      <style></style>
      <script></script>
      
     </head>
     <body>   ; html 体
     </body>
   </html>
 - <head>
   如上；
 - <body>
   常用属性
   |--------------+--------------------------|
   | text         | 页面文字颜色             |
   | bgcolor      | 页面背景颜色             |
   | background   | 页面背景图像             |
   | bgproperties | 背景图像固定             |
   | link         | 默认链接颜色             |
   | alink        | 鼠标单击链接时的链接颜色 |
   | vlink        | 访问后链接文字颜色       |
   | topmargin    | 上边距                   |
   | leftmargin   | 左边距                   |
   |              |                          |
   | id           | 设定标签ID               |
   | name         | 标签名称                 |
   | class        | 类选择器                 |
   | style        | 样式属性                 |
   |              |                          |
** 2.3 格式标签
   | 标签     | 描述       | description  |
   |----------+------------+--------------|
   | <br>     | 换行       |              |
   | <p>      | 换段落     | paragraph    |
   | <center> | 居中       | center       |
   | <pre>    | 预格式化   | pre          |
   | <li>     | 列表       | list         |
   | <ul>     | 无序列表   | unorded list |
   | <ol>     | 有序列表   | orded list   |
   | <hr>     | 水平分割线 |              |
   |          |            |              |
** 2.4 文本标签
   | 标签    | 描述         |
   |---------+--------------|
   | <hn>    | 标题字标记   |
   | <b>     | 粗体字       |
   | <i>     | 斜体字       |
   | <u>     | 下划线       |
   | <sub>   | 文字下标字体 |
   | <sup>   | 文字上标字体 |
   | <font>  | 字体         |
   | <tt>    | 打字机文字   |
   | <cite>  | 引证、举例   |
   | <em>    | 强调斜体     |
   | <stong> | 强调粗体     |
   | <small> | 小型字体     |
   | <bit>   | 大型字体     |
   |         |              |
** 2.5 图像和链接
 - 插入图片
   <img src=URL alt=text width=num height=num border=num/>
   + alt 提示文字
   + border 边框宽度 border="2"
   + width 图片宽度
   + height 图片高度
 - 建立锚点和超链接
   <a href=URL name="name" target="target">链接文字</a>
   + target 
     _self ;default 当前窗口打开
     _blank ; 新窗口打开
     _parent ; 父窗口打开
     _top ; 顶层窗口打开
** 2.6 使用HTML表格
   | 表格        | 描述                 |
   |-------------+----------------------|
   | <table>     | 开始表格             |
   | <caption>   | 表格名称             |
   | <tr>        | 行标记               |
   | <th>/<td>   | 单元格标记           |
   |             |                      |
   | 属性        | 描述                 |
   | align       | 对齐                 |
   | border      | 外边框宽度           |
   | width       | 表格宽度             |
   | height      | 高度                 |
   | cellspacing | 单元格之间的间距(2)  |
   | cellpadding | 内容与边框之间的间距 |
   |             |                      |
   | 列属性      |                      |
   | width/he..  |                      |
   | avalign     | 水平对齐             |
   | valign      | 垂直对齐             |
   | rowspan     | 跨越行数             |
   | colspan     | 跨越列数             |
** 2.7 框架结构
   - <frameset> 划分框架
     + cols 
     + rows %分隔上下框
     + frameborder 0-无边框 1-有边框
     + border 边框粗细 5
   - <frame> 子窗口
     + src 指定文件地址
     + name 框架窗口名称
     + noresize 标记不能调整窗口大小
     + scroling auto自动 Yes有 No无
     + frameborder
     + border
** 2.8 表单设计
   - <form> 表单
     + <input>
       <input type="text" name="field_name" value="field_value" size="n" maxlength="n">
       <input type="password" name="field_name" value="field_value" size="n" maxlength="n">
       <input type="submit" name="fname" value="fvalue">
       <input type="reset" name="" value="">
       <input type="button" name="" value="">
       <input type="radio" name="" value="" checked>
       <input type="checkbox" name="" value="" checked>
       <input type="hidden" name="" value="">"
     + <select>
       <select name="" size="" multiple>
         <option value="value" selected>选项A</option>
         <option value="value" selected>选项B</option>
       </select>
     + <textarea>
       <textarea name="" rows="" cols="" value="">
       </textarea>
     + 属性
       <form action="login.php" method="post">
       - method GET(default)/POST
       - action URL(处理程序名)
       - enctype 表单编码方式
       - target 指定目标窗口或目标帧 

* 3 CSS 层叠样式表
** 3.1 简介
   Cascading Style Sheet 
   - 精确定位
   - 分离内容和格式
   - <style> 内嵌到HTML 或 单独保存
     <style>
       p{
         font-size:30px;
         color:yellow;
         border:2px solid blue;
         text-align:center;
         background:green
       }
     </style>
** 3.2 规则
   选择器 + 声明
   <h1 style="font-size:x-large;color:red">一级标题</h1>
   - 长度单位
   - 颜色单位
     #rrggbb
     rgb(r,g,b)
     rgb(r%,g%,b%)
   - 链接到外部样式表
     <link rel="StyleSheet" href="style.css" type="text/css">
** 3.4 选择器
 - HTML选择器
   p{text-ident:3em}
   h1{color:red}
 - 类选择器
   p.dart-row{background-color:#EAEAEA;}
   p.light-row{background-color:#F8F8F8;}
   <p class="dark-row">第一段</p>
   <p class="light-row">第二段</p>
 - ID选择器
   #main{text-ident:3em}
   <p id="main">文本缩进3em</p>
 - 关联选择器
   table a {color:red} /*只有在表格<table> 内的 <a> 样式改变*/
 - 组合选择器
   h1,h2,h3,h4{color:red;font-family:sans-serif}
 - 伪元素选择器
   a:link{color:red}
   a:hover{color:yellow;font-size:125%;}
   a:active{color:blue;}
   a:visited{color:blue;}
** 3.5 属性和值
 - 字体属性
 - 颜色
 - 背景
 - 文本
 - 边框
   border-style:solid;
 - 光标
   p{cursor:pointer/hand/crosshair/text/wait/help;}
 - 列表
* 4 DIV+CSS
  div/span 
* PHP 基础篇
** 5 搭建PHP开发环境
  ubuntu:
  $ sudo apt-
** 6 PHP基础语法
 - 服务器端语言
   前端语言：HTML/CSS/JavaScript 
   服务器端: PHP
 - 嵌入到HTML
   CSS/JavaScript可浏览器解析;
   PHP服务器端解析；
 - 脚本语言
 - PHP功能
   Wab开发服务器端脚本程序；
   + 收集表单数据
   + 生成动态页面
   + 字符串处理
   + 动态输出图像
   + 处理服务器段文件系统
   + 数据库支持
   + 会话跟踪
   + MXL处理
   + 支持大量网络协议
   + 其他操作
 - 第一个脚本
 - 变量
   $<name> = <value>
   $int = 100;
   $str = "string";
   $bool = true;
   $double = 99.99
   $var = $var1 = $int
   
   unset(); // 释放变量
   isset(); // 测试变量
   empty(); // 测试变量空

   变量名区分大小写；
   内置函数不区分大小写；
   不能以数字打头；
   不能带空格；

   + 可变变量
     $hi = "hello";
     $$hi = "world";
     echo "$hi $hello<br>";
     echo "$hi ${$hi}<br>"; // hello world

   + 变量总是传值赋值；

   + &引用赋值；
     $foo = "bob";
     $bar = &$foo;
     $bar = "My name is bob";
     echo $bar<br>;
     echo $foo<br>;

   + 变量类型(php 根据程序上下文确定)
     var_dump();
     - 标准类型
       + boolean
       + integer
       + float
       + string 
         $foo=123
         "$foo" // 输出变量值 123
         '$foo' // 输出变量名 $foo
         <<<EOT
           multiline
           多行文本
         EOT;
     - 复合类型
       array 

       $arr = array("foo"=>"bar", 12=>true);
       print_r($arr);
       echo $arr["foo"];
       echo $arr[12];

       object 
       
       class Persion{
       var $name;
       function say(){
       echo "$name Doing foo.";
       }
       }
       $p = new Person;
       $p->name = "Tom";
       $p->say();
     - 特殊类型
       resource 
       保存到外部资源的一个引用;
       文件、数据库链接、画布区域等特殊句柄；
       $file_handle = fopen("info.txt", "w");
       var_dump($file_handle); // resource(3) of type (stream)

       NULL
       $a=NULL;
       $b;
       $c="ccc";
       unset($
     - 伪类型
       mixed
         gettype();str_replace();
       number integer/float
       callback 除array(),echo(),empty(),eval(),exit(),isset(),list(),print(),unset();
     - 类型转换
       自然转换
       强制类型转换
       $foo=10;
       $bar=(boolean)$foo;
     - 类型测试函数
       is_bool/int/float/string/array/object/resource();
       is_null/scalar/number/callable();
     - 常量(只能是标量: boolean/integer/float/string)
       boolean define(string name, mixed value, [, bool case_insensitive]);
       define("CON_INT", 100);
       if(defined("CON_INT")){
       echo CON_INT;}
       | 预定义常量         | 常量值     | 说明 |
       |--------------------+------------+------|
       | PHP_OS             | UNIX/WINNT |      |
       | PHP_VERSION        |            |      |
       | TRUE/FALSE         |            |      |
       | DIRECTORY_SPARATOR | \or/       |      |
       | PATH_SEPARATOR     | ;or:       |      |
       | E_ERROR            | 1          |      |
       | E_WARNING          | 2          |      |
       | EPARSE             |            |      |
       | E_NOTICE           |            |      |
       | M_PI               | 3.1415926  | pi   |
       | __FILE__           |            |      |
       | __LINE__           |            |      |
       | __FUNCTION__       |            |      |
       | __CLASS__          |            |      |
       | __METHOD__         |            |      |
     - 运算符
       +、-、*、/、%、++、--
       str1.str2
       =/+=/-=/*=//=/%=/.=
       > < >= <= == === <> != !==
       and && or || not ! xor
       & | ^ ~ <(<) (>)>
       ?:
       `` ; `ls -la`
       @ $sum=100/0 ; 忽略除0错误
 - 流程控制
   + 条件控制
     if(exp){}elseif{}else{}
     switch(exp){
     case val1:
     //...
     break;
     devault:
     //...
     }
   + 循环
     while(exp){}
     do{}while(exp);
     for(;;){}
     break;
     continue;
     exit;
 - 函数定义
   + 声明
     function <name>([arg1, arg2, ... ,argn]){
       // body 
       static $a=0; // 静态变量
       return value;
     }

   + 默认参数、可变参数
     func_num_args();
     func_get_arg($i);

   + 回调函数 
     mixed funName(callback arg)
     call_user_func_array() // 自定义回调函数
     静态函数和对象方法回调

   + include()/requare()
     include() lazy load;
     requare() preload;
 - 数组和数据结构
   + indexed 索引数组
   + associatev 关联数组
   + 多维数组
     array{
       array{},
     };
   + 遍历
     mysql_fetch_row();
     for($i=0; $i<count($arr);$i++){
     echo $arr[$i];
     }
     foreach(arr as $value){
       // body
     }
     list()/each()/while()
   + 数组指针控制函数
     current();
     key();
     next();
     prev();
     end();
     reset();
   + 预定义数据 
     $_SERVER
     $_ENV 
     $_GET 
     $_POST 
     $_REQUEST 
     $_FILES 
     $_COOKIE 
     $_SESSION 
     $GLOBALS
   + 数组操作函数
     ...
 - 面向对象程序设计 
   + 类声明
     [abstract|final] class Person{
     function __construct($name=""){
       $this->name=$name;
     }
     function __destruct(){
       echo 'bye '.$this->name.'<br>';
     }
     function say(){
     echo 'my name is'.$this->name.'<br';
     }
     var $name;
     public $pub_val;
     private $pri_val;
     static $s_val;
     }

     class Student extends Person{
     function __construct($name, $school){
       parent::__construct($name);
       self::$count++;
       $this->school = $school;
     }
     function __clone(){
       $this->name = "I'am clone of ".$that->name;
     }
     public __toString(){
       return $this->name;
     }
     function __call($fun, $args){
       // 调用不存在方法是自动进入该方法
     echo 'function '.$fun.'not exists <br>';
     print_r($args);
     }
     function __sleep(){
     $arr=array("name");
     return($arr);
     }
     function __wakeup(){
     $this->name="aaa"; // 可对对象重新赋值;
     }
     static $count;
     const CONSTANT='constant value';
     public $school;
     }

     $man = new Student;
     if($msn instanceof Person){
       echo "$man is Person";
     }
     $man1 = clone $man;

     function __autoload($className){
     include(strtolower($className).'.class.php');
     }

     <?php 
     // serialize.php
     require "person.class.php";
     $person = new Person("name");
     $person_string = serialize($person);
     file_put_contents("file.txt", $person_string);
     ?>
     <?php
     // unserialize.pnp
     require "person.class.php";
     $person_string = file_get_contents("file.txt");
     $person = unserialize($person_string);
     $person->say();
     ?>
   + 预定义方法
     __set(name, value);
     __get();
     __call();
     __toString();
     __autoload();
   + 接口技术
     interface <name>{
     const CONSTANT = "CONSTANT value";
     // member 
     // function 
     }
     class Cname implements Iname1, Iname2, Iname3{}
 - 字符串处理
 - 正则表达式
   preg_match/match_all/replace/split/grep/replace_callback();
   '/<a.*?(?:|\\t|\\r|\\n)?href=[\'""]
** 7 PHP常用功能模块
*** 7.1 错误异常处理 
*** 7.2 日期时间
*** 7.3 文件系统
 - 文件管理
    filetype('/etc/passwd');
    // Block/Char/Dir/Fifo/File/Link/Unknow
    file_exists()
    file_size()
    is_readable()
    is_wiritable()
    is_executable()
    file[c|n|a]time()
    stat()
    
    basename();
    dirname();
    pathinfo();

    opendir()
    readdir()
    closedir()
    rewinddir()
    
    mkdir()
    rmdir()
    unlink()
    
    copy()
    
    fopen()
    fclose();
    fwrite();
    ftell()
    fseek()
    frewind()
    flock(handle, LOCK_SH/EX/UN/NB)

    allow_url_fopen 
 - 文件上传
   <form action='upload.php' method='post' enctype='multipart/form-data'>
   <input type='hidden' name="MAX_FILE_SIZE" value='1000000'>
   选择文件:<input type='file' name='myfile'>
   <input type='submit' value='上传文件'>
   </form>
   
   is/move_uploaded_file()
   <?php
   $allowtype=array("gif", "png", "jpg", "cpp", "c", "h", "hpp"); // 设置允许上传类型
   $size=2*1024*1024;
   $path="./uploads";
   if($_FILES['myfile']['error']>0){
   echo '上传错误';
   }
   $hz = array_pop(expload(".", $_FILES['myfile']['name']));
   if(!in_array($hz, $allowtype)){
   die("not allow file type <b>($hz)</b>")
   }
   $filename = date("YmdHis").rand(100,999).".".$hz;
   if(is_uploaded_file($_FILES['myfile']['tmp_name'])){
   if(!move_upload_file($_FILES['myfile']['tmp_name'], $path."/".$filename)){
   die("不能移动文件到指定目录");
   }
   }
   ?>

   文件下载
   <a href="http://path/book.rar">下载文件</a>
 - 动态图片处理
   GD图片库
 - 数据库开发
   
*** 高级开发
 - memcache
 - 会话控制
 - 模板引擎
 - MVC模式

