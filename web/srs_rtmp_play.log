[07 16:31:50.175][9][trace][virtual int SrsRtmp::handshake()]
 handshake success.
[07 16:31:50.216][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<amf0_command>{
	type: 20
	payload_len: 201
	timestamp: 0
	stream_id: 0
}

decode connect app pkt:
	command: connect
	ransaction: 1.00
		app:	live
		flashVer:	LNX 9,0,124,2
		tcUrl:	rtmp://192.168.16.130:1935/live
		fpad:	false
		capabilities:	15.00
		audioCodecs:	4071.00
		videoCodecs:	252.00
		videoFunction:	1.00
		:	EOF
[07 16:31:50.216][9][trace][virtual int SrsClient::do_cycle()]
 rtmp connect app success. tcUrl=rtmp://192.168.16.130:1935/live, pageUrl=, swfUrl=, schema=rtmp, vhost=192.168.16.130, port=1935, app=live
[07 16:31:50.216][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<ack_size>{
	type: 5
	payload_len: 4
	timestamp: 0
	stream_id: 0
}

encode WindowAckSizePacket:
	recv_size: 2500000
[07 16:31:50.216][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<bindwidth>{
	type: 6
	payload_len: 5
	timestamp: 0
	stream_id: 0
}

encode SetPeerBandWidth:
	bandwidth: 2500000
	type: 2
[07 16:31:50.216][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_command>{
	type: 20
	payload_len: 351
	timestamp: 0
	stream_id: 0
}

encode connect app response pkt:
	command: _result
	transaction_id: 1.00
		fmsVer: 	FMS/3,5,3,888
		capabilities: 	127.00
		mode: 	1.00
		level: 	status
		code: 	NetConnection.Connect.Success
		description: 	Connection succeeded
		objectEncoding: 	0.00
		data: 	ARRAY	version: 	3,5,3,888
	server: 	srs(simple rtmp server)
	srs_url: 	https://github.com/winlinvip/simple-rtmp-server
	srs_version: 	0.1
[07 16:31:50.216][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_command>{
	type: 20
	payload_len: 21
	timestamp: 0
	stream_id: 0
}

encode OnBWDone
	command: onBWDone
	transaction_id: 0.00
	NULL
[07 16:31:50.456][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<ack_size>{
	type: 5
	payload_len: 4
	timestamp: 0
	stream_id: 0
}

[07 16:31:50.456][9][trace][virtual int SrsProtocol::on_recv_message(SrsCommonMessage*)]
 set ack window size to 2500000
[07 16:31:50.456][9][trace][virtual int SrsRtmp::identify_client(int, SrsClientType&, std::string&)]
 identify ignore messages except AMF0/AMF3 command message. type=0x5
[07 16:31:50.456][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<amf0_command>{
	type: 20
	payload_len: 25
	timestamp: 0
	stream_id: 0
}

decode create stream pkt:
	command: createStream
	transaction_id: 2.00
	NULL
[07 16:31:50.456][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_command>{
	type: 20
	payload_len: 29
	timestamp: 0
	stream_id: 0
}

encode CreateStreamResponse:
	command: _result
	transaction_id: 2.00
	NULL
	stream_id: 1.00[07 16:31:50.456][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<amf0_command>{
	type: 20
	payload_len: 21
	timestamp: 0
	stream_id: 0
}

[07 16:31:50.456][9][trace][virtual int SrsCommonMessage::decode_packet()]
 drop the AMF0/AMF3 command message, command_name=_checkbw
[07 16:31:50.456][9][trace][virtual int SrsRtmp::identify_create_stream_client(SrsCreateStreamPacket*, int, SrsClientType&, std::string&)]
 ignore AMF0/AMF3 command message.
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<amf0_command>{
	type: 20
	payload_len: 41
	timestamp: 0
	stream_id: 0
}

[07 16:31:50.497][9][trace][virtual int SrsCommonMessage::decode_packet()]
 drop the AMF0/AMF3 command message, command_name=getStreamLength
[07 16:31:50.497][9][trace][virtual int SrsRtmp::identify_create_stream_client(SrsCreateStreamPacket*, int, SrsClientType&, std::string&)]
 ignore AMF0/AMF3 command message.
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<amf0_command>{
	type: 20
	payload_len: 39
	timestamp: 0
	stream_id: 1
}

decode play packet:
	command: play
	transaction_id: 5.00
	NULL
	stream_name: livestream
	start: -2000.00
	duration: -1.00
[07 16:31:50.497][9][trace][virtual int SrsRtmp::identify_create_stream_client(SrsCreateStreamPacket*, int, SrsClientType&, std::string&)]
 identity client type=play, stream_name=livestream
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<set_chunk_size>{
	type: 1
	payload_len: 4
	timestamp: 0
	stream_id: 0
}

encode ChunkSize:
	chunk_size: 4096
[07 16:31:50.497][9][trace][virtual int SrsProtocol::on_send_message(ISrsMessage*)]
 set output chunk size to 4096
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<user_ctl_event>{
	type: 4
	payload_len: 6
	timestamp: 0
	stream_id: 0
}

encode PCUC4Bytes:
	event_type: 0
	event_data: 1
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_command>{
	type: 20
	payload_len: 154
	timestamp: 0
	stream_id: 1
}

encode OnStatusCallPacket:
	command: onStatus
	transaction_id: 0.00
	NULL
		level: 	status
		code: 	NetStream.Play.Reset
		description: 	Playing and resetting stream.
		details: 	stream
		clientid: 	ASAICiss
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_command>{
	type: 20
	payload_len: 148
	timestamp: 0
	stream_id: 1
}

encode OnStatusCallPacket:
	command: onStatus
	transaction_id: 0.00
	NULL
		level: 	status
		code: 	NetStream.Play.Start
		description: 	Started playing stream.
		details: 	stream
		clientid: 	ASAICiss
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_data>{
	type: 18
	payload_len: 24
	timestamp: 0
	stream_id: 1
}

encode SampleAccessPacket:
	command: |RtmpSampleAccess
video_sample_access: 0[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_data>{
	type: 18
	payload_len: 44
	timestamp: 0
	stream_id: 1
}

encode OnStatusDataPacket:
	command: onStatus
		code: 	NetStream.Data.Start
[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<user_ctl_event>{
	type: 4
	payload_len: 10
	timestamp: 1
	stream_id: 0
}

[07 16:31:50.497][9][DBG][void SrsMessageHeader::ztrace(bool)]send MsgHeader<amf0_data>{
	type: 18
	payload_len: 405
	timestamp: 0
	stream_id: 1
}

[07 16:31:51.564][8][DBG][void SrsMessageHeader::ztrace(bool)]vedio<all:17920 max:26413 gtp:0.30 average_size:1062>
[07 16:31:55.748][8][DBG][void SrsMessageHeader::ztrace(bool)]	audio<all:31232 base:90 lt:19461 gt:11771 gtp:0.38, averate_size:89>
[07 16:31:56.428][9][trace][virtual int SrsClient::streaming_play(SrsSource*)]
 play report, time=6000, ctl_msg_ret=211, msgs=7
[07 16:32:01.720][8][DBG][void SrsMessageHeader::ztrace(bool)]	audio<all:31744 base:90 lt:19784 gt:11960 gtp:0.38, averate_size:89>
[07 16:32:01.810][8][DBG][void SrsMessageHeader::ztrace(bool)]vedio<all:18432 max:26413 gtp:0.30 average_size:1056>
[07 16:32:02.465][9][trace][virtual int SrsClient::streaming_play(SrsSource*)]
 play report, time=12000, ctl_msg_ret=211, msgs=6
[07 16:32:07.662][8][DBG][void SrsMessageHeader::ztrace(bool)]	audio<all:32256 base:90 lt:20112 gt:12144 gtp:0.38, averate_size:89>
[07 16:32:08.494][9][trace][virtual int SrsClient::streaming_play(SrsSource*)]
 play report, time=18000, ctl_msg_ret=211, msgs=7
[07 16:32:12.008][9][DBG][void SrsMessageHeader::ztrace(bool)]vedio<all:18944 max:26413 gtp:0.30 average_size:1066>
[07 16:32:13.617][9][DBG][void SrsMessageHeader::ztrace(bool)]	audio<all:32768 base:90 lt:20438 gt:12330 gtp:0.38, averate_size:89>
[07 16:32:14.523][9][trace][virtual int SrsClient::streaming_play(SrsSource*)]
 play report, time=24000, ctl_msg_ret=211, msgs=7
[07 16:32:19.548][9][DBG][void SrsMessageHeader::ztrace(bool)]	audio<all:33280 base:90 lt:20766 gt:12514 gtp:0.38, averate_size:89>
[07 16:32:20.554][9][trace][virtual int SrsClient::streaming_play(SrsSource*)]
 play report, time=30000, ctl_msg_ret=211, msgs=7
[07 16:32:22.263][9][DBG][void SrsMessageHeader::ztrace(bool)]vedio<all:19456 max:26413 gtp:0.30 average_size:1072>
[07 16:32:25.481][9][DBG][void SrsMessageHeader::ztrace(bool)]	audio<all:33792 base:90 lt:21075 gt:12717 gtp:0.38, averate_size:89>
[07 16:32:26.586][9][trace][virtual int SrsClient::streaming_play(SrsSource*)]
 play report, time=36000, ctl_msg_ret=211, msgs=7
[07 16:32:29.344][9][DBG][void SrsMessageHeader::ztrace(bool)]recv MsgHeader<ack>{
	type: 3
	payload_len: 4
	timestamp: 121081
	stream_id: 0
}
