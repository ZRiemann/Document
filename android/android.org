* android studio
  http://www.cnblogs.com/whycxb/category/1001652.html
** 代码混淆
修改 build.gradle -> buildTypes.release.minifyEnabled true

#==================================API=================================================
#API里边的类，最好都要避免混淆
-keep public class * extends android.app.Fragment
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.preference.Preference
-keep public class * extends android.support.v4.**
-keep public class com.android.vending.licensing.ILicensingService

-dontwarn android.annotation
-keepattributes *Annotation*

#=====================保留了所有的Native变量名及类名=====================
-keepclasseswithmembernames class * {
    native <methods>;
}
#某些构造方法不能去混淆
-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}
#枚举类不能去混淆
-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

#aidl文件不能去混淆.
-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}

-keepclassmembers class * {
   public <init>(org.json.JSONObject);
}

#=====================不混淆资源类=====================
-keepclassmembers class **.R$* {
    public static <fields>;
}
#过滤R文件的混淆：
-keep class **.R$* {
    *;
}

#=================================当前项目==================================================
#一般model最好避免混淆（model无关紧要，不混淆也没多大关系）如：
#-keep class com.why.project.helloworld.bean.**{*;}

#===================================其他常规================================================
#加上这句话，不然会在控制台中报warning警告【不添加的话比较好，可以用来验证签名是否成功】
#-ignorewarnings
#设置混淆的压缩比率 0 ~ 7
-optimizationpasses 5
#Aa aA
-dontusemixedcaseclassnames
#混淆后生产映射文件 map 类名->转化后类名的映射
-verbose
#混淆采用的算法.
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
* android develop
** 1. 项目组成
   - src ; 源码目录
   - AndroidMainfest.xml ; 清单文件，描述程序构成，组件，权限等配置
   - gen/R.java ;
   - assets ; 静态资产文件
   - drawable ; 图标
   - layout ; 布局
   - values ; string.xml
   - apk ; 安装包
** 2. 核心组件
   - View ; 界面视图，组织UI控件
   - Intent ; 意图，支持组件间通信
   - Activity ; 处理界面与UI交互
   - Content Provider ; 存储共享数据
   - IntentReceiver ; 接收消息及事件处理
   - Service ; 后台服务，硬件与启动
   - Notification ; 消息与通知
** 3. Activity(活动)
*** 概念
    - 最基本的应用程序组件
    - 一个单独的屏幕，显示响应事件，以及启动其它组件
    - android.app.Activity
*** 生命周期
    onCreate()/onStart()/onRestart()/onResume()/onPause()/onStop()/onDestroy()
    (Activity start)
    onCreate()            /---<----------------------------------------\
    onStart()  <-------------------------------------\                 |
    onResume() <-----------------------------------\ |                 |
    (Activity is-running)                          | |                 |
    <New Activity is-started)           (comes to the foreground)  (navigates back)
    onPause() -->----------------------------------/ |            (porcess is-killed)
    <Your Activity is no longer visible>             |                 |
    onStop() -->------------------------------------/                  |
                  \--------------------->------------------------------/
    onDestroy()
    (Activity is-shut down)
   
** 4. Intent(意图)
*** 概念
    - 减少组件耦合
    - 组件间传递Intent来执行动作和产生事件
    - 活动、服务、广播接收器
    - 显式 Intent.setComponent()/Intent.setClass()
    - 隐式 根据inter-filter中设置的action/category/URI/DataType 找到合适的组件处理
           android.intent.category.DEFAULT
*** Bundle(一捆)
    - 挟带数据 HashMap<String, Object>;
    - public final class Boundle implements Parcelable, Cloneable{HasnMap<String, Object> mMap; ...}
*** AndroidManifest.xml(清单)
    #+BEGIN_SRC xml
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.tst.z.myapplication">        # 包名
      <application
          android:allowBackup="true"
          android:icon="@mipmap/ic_launcher"            # 应用程序图标
          android:label="@string/app_name"              # 调用values文件夹里的字符串数据
          android:roundIcon="@mipmap/ic_launcher_round" # 
          android:supportsRtl="true"
          android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">         # Activity      活动
          <intent-filter>                               # intent-filter 意图过滤器
            <action android:name="android.intent.action.MAIN" /> # 首先打开的运行页面
            
            <category android:name="android.intent.category.LAUNCHER" />
          </intent-filter>
        </activity>
      </application>
    </manifest>
    #+END_SRC
    R.java 定义各类资源ID
*** MainActivity(主活)
    #+BEGIN_SRC java
    package com.tst.z.myapplication;

    import android.support.v7.app.AppCompatActivity;
    import android.os.Bundle;
    import android.widget.TextView;

    public class MainActivity extends AppCompatActivity {

        // Used to load the 'native-lib' library on application startup.
        static {
            System.loadLibrary("native-lib");
        }

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);           // 调用父类方法
            setContentView(R.layout.activity_main);       // 设置内容视图

            // Example of a call to a native method
            TextView tv = (TextView) findViewById(R.id.sample_text);
            tv.setText(stringFromJNI());
        }

        /**
         ,* A native method that is implemented by the 'native-lib' native library,
         ,* which is packaged with this application.
         ,*/
        public native String stringFromJNI();
    }
    #+END_SRC
*** main_activity.xml
    #+BEGIN_SRC xml
    <?xml version="1.0" encoding="utf-8"?>
    <android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".MainActivity">

        <TextView
            android:id="@+id/sample_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Hello World!"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

    </android.support.constraint.ConstraintLayout>
    #+END_SRC
** 5. UI事件处理与布局管理
*** View/ViewGroup
   - View 视图组件；占据一块矩形区域，负责渲染、处理时间、可见、焦点
     ViewGroup ; View容器，布局Views，可以添加进另一个ViewGroup
   - Layout 布局组件
   - Wigets UI元素
   - Menus 菜单
*** 事件处理
    onKeyDown()/onKeyUp()/onTouchEvent()
*** Toast(提醒消息)
    Toast.makeText(this, string, Toast.LENGTH_SHORT).show();
*** 布局
    - LinearLayout(线性布局) ; 一行或一列排列控件
    - AbsoluteLayout(绝对布局) ; 固定坐标
    - RelativeLayout(想对布局) ; addroid:layout_below/above/toRightOf/toLeftOf
    - TableLayout(表格布局) ; android:layout_weight/TableRow
    - FrameLayout(框架布局)

** 6. Service
   - 运行在后台的一段代码
   - 不是进程也不是线程
   - 不与用户交互/后台更新
*** 生命周期
    onCreate()
    onStart()
    onDestroy()
    onBind()
    onUnbind()
    public class MyService extends Service {...}
** 7. Notification(通知)
** 8. 文件操作
   